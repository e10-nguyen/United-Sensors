
IMU_imp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a550  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ab0  0800a6e0  0800a6e0  0001a6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b190  0800b190  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800b190  0800b190  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b190  0800b190  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b190  0800b190  0001b190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b194  0800b194  0001b194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b198  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  200001e8  0800b380  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  0800b380  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013796  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b56  00000000  00000000  000339f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001470  00000000  00000000  00036548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fda  00000000  00000000  000379b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b04  00000000  00000000  00038992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000634a  00000000  00000000  00049496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  00006978  00000000  00000000  0004f7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000063  00000000  00000000  00056158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6c8 	.word	0x0800a6c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a6c8 	.word	0x0800a6c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <bmi08a_init>:
 *  @brief This API is the entry point for accel sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of accel sensor.
 */
int8_t bmi08a_init(struct bmi08x_dev *dev)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f000 fac8 	bl	80011ea <null_ptr_check>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d150      	bne.n	8000d08 <bmi08a_init+0xc0>
    {
        if (dev->intf == BMI08X_SPI_INTF)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	7b1b      	ldrb	r3, [r3, #12]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d10f      	bne.n	8000c8e <bmi08a_init+0x46>
        {
            /* Set dummy byte in case of SPI interface */
            dev->dummy_byte = BMI08X_ENABLE;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2201      	movs	r2, #1
 8000c72:	739a      	strb	r2, [r3, #14]
            printf("Dev correct\n\r");
 8000c74:	4827      	ldr	r0, [pc, #156]	; (8000d14 <bmi08a_init+0xcc>)
 8000c76:	f006 fded 	bl	8007854 <iprintf>
            /* Dummy read of Chip-ID in SPI mode */
            rslt = get_regs(BMI08X_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 8000c7a:	f107 010e 	add.w	r1, r7, #14
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2201      	movs	r2, #1
 8000c82:	2000      	movs	r0, #0
 8000c84:	f000 fad5 	bl	8001232 <get_regs>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73fb      	strb	r3, [r7, #15]
 8000c8c:	e002      	b.n	8000c94 <bmi08a_init+0x4c>
        }
        else
        {
            /* Make dummy byte 0 in case of I2C interface */
            dev->dummy_byte = BMI08X_DISABLE;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2200      	movs	r2, #0
 8000c92:	739a      	strb	r2, [r3, #14]
        }

        if (rslt == BMI08X_OK)
 8000c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d135      	bne.n	8000d08 <bmi08a_init+0xc0>
        {
        	//chip_id = 0;
        	printf("starting init \n\r");
 8000c9c:	481e      	ldr	r0, [pc, #120]	; (8000d18 <bmi08a_init+0xd0>)
 8000c9e:	f006 fdd9 	bl	8007854 <iprintf>
            rslt = get_regs(BMI08X_REG_ACCEL_CHIP_ID, &chip_id, 1, dev);
 8000ca2:	f107 010e 	add.w	r1, r7, #14
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 fac1 	bl	8001232 <get_regs>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8000cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d125      	bne.n	8000d08 <bmi08a_init+0xc0>
            {
            	printf("OK \n\r");
 8000cbc:	4817      	ldr	r0, [pc, #92]	; (8000d1c <bmi08a_init+0xd4>)
 8000cbe:	f006 fdc9 	bl	8007854 <iprintf>
                /* Check for chip id validity */
            	printf("%d: Chip id\r\n", chip_id);
 8000cc2:	7bbb      	ldrb	r3, [r7, #14]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4816      	ldr	r0, [pc, #88]	; (8000d20 <bmi08a_init+0xd8>)
 8000cc8:	f006 fdc4 	bl	8007854 <iprintf>

                if ((dev->variant == BMI085_VARIANT) && (chip_id == BMI088_ACCEL_CHIP_ID)) //BMI085_ACCEL_CHIP_ID
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	7b5b      	ldrb	r3, [r3, #13]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d109      	bne.n	8000ce8 <bmi08a_init+0xa0>
 8000cd4:	7bbb      	ldrb	r3, [r7, #14]
 8000cd6:	2b1e      	cmp	r3, #30
 8000cd8:	d106      	bne.n	8000ce8 <bmi08a_init+0xa0>
                {
                	printf("BMI085");
 8000cda:	4812      	ldr	r0, [pc, #72]	; (8000d24 <bmi08a_init+0xdc>)
 8000cdc:	f006 fdba 	bl	8007854 <iprintf>
                    /* Store the chip ID in dev structure */
                    dev->accel_chip_id = chip_id;
 8000ce0:	7bba      	ldrb	r2, [r7, #14]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e00f      	b.n	8000d08 <bmi08a_init+0xc0>
                }
                else if ((dev->variant == BMI088_VARIANT) && (chip_id == BMI088_ACCEL_CHIP_ID))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7b5b      	ldrb	r3, [r3, #13]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d109      	bne.n	8000d04 <bmi08a_init+0xbc>
 8000cf0:	7bbb      	ldrb	r3, [r7, #14]
 8000cf2:	2b1e      	cmp	r3, #30
 8000cf4:	d106      	bne.n	8000d04 <bmi08a_init+0xbc>
                {
                    /* Store the chip ID in dev structure */
                	printf("BMI088");
 8000cf6:	480c      	ldr	r0, [pc, #48]	; (8000d28 <bmi08a_init+0xe0>)
 8000cf8:	f006 fdac 	bl	8007854 <iprintf>
                    dev->accel_chip_id = chip_id;
 8000cfc:	7bba      	ldrb	r2, [r7, #14]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e001      	b.n	8000d08 <bmi08a_init+0xc0>
                }
                else
                {
                    rslt = BMI08X_E_DEV_NOT_FOUND;
 8000d04:	23fd      	movs	r3, #253	; 0xfd
 8000d06:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8000d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	0800a6e0 	.word	0x0800a6e0
 8000d18:	0800a6f0 	.word	0x0800a6f0
 8000d1c:	0800a704 	.word	0x0800a704
 8000d20:	0800a70c 	.word	0x0800a70c
 8000d24:	0800a71c 	.word	0x0800a71c
 8000d28:	0800a724 	.word	0x0800a724

08000d2c <bmi08a_get_regs>:

/*!
 *  @brief This API reads the data from the given register address of accel sensor.
 */
int8_t bmi08a_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60b9      	str	r1, [r7, #8]
 8000d34:	607a      	str	r2, [r7, #4]
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	4603      	mov	r3, r0
 8000d3a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000d3c:	6838      	ldr	r0, [r7, #0]
 8000d3e:	f000 fa54 	bl	80011ea <null_ptr_check>
 8000d42:	4603      	mov	r3, r0
 8000d44:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8000d46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d111      	bne.n	8000d72 <bmi08a_get_regs+0x46>
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00e      	beq.n	8000d72 <bmi08a_get_regs+0x46>
    {
        if (len > 0)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d008      	beq.n	8000d6c <bmi08a_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 8000d5a:	7bf8      	ldrb	r0, [r7, #15]
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	f000 fa66 	bl	8001232 <get_regs>
 8000d66:	4603      	mov	r3, r0
 8000d68:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8000d6a:	e004      	b.n	8000d76 <bmi08a_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8000d6c:	23f9      	movs	r3, #249	; 0xf9
 8000d6e:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8000d70:	e001      	b.n	8000d76 <bmi08a_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8000d72:	23ff      	movs	r3, #255	; 0xff
 8000d74:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000d76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <bmi08a_set_regs>:
/*!
 *  @brief This API writes the given data to the register address
 *  of accel sensor.
 */
int8_t bmi08a_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4603      	mov	r3, r0
 8000d90:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000d92:	6838      	ldr	r0, [r7, #0]
 8000d94:	f000 fa29 	bl	80011ea <null_ptr_check>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 8000d9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d12c      	bne.n	8000dfe <bmi08a_set_regs+0x7c>
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d029      	beq.n	8000dfe <bmi08a_set_regs+0x7c>
    {
        if (len > 0)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d023      	beq.n	8000df8 <bmi08a_set_regs+0x76>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 8000db0:	7bf8      	ldrb	r0, [r7, #15]
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	68b9      	ldr	r1, [r7, #8]
 8000db8:	f000 fa8b 	bl	80012d2 <set_regs>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->accel_cfg.power == BMI08X_ACCEL_PM_SUSPEND)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	7bdb      	ldrb	r3, [r3, #15]
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d108      	bne.n	8000dda <bmi08a_set_regs+0x58>
            {
                dev->delay_us(450, dev->intf_ptr_accel);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	6852      	ldr	r2, [r2, #4]
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000dd6:	4798      	blx	r3
        if (len > 0)
 8000dd8:	e013      	b.n	8000e02 <bmi08a_set_regs+0x80>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->accel_cfg.power == BMI08X_ACCEL_PM_ACTIVE)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	7bdb      	ldrb	r3, [r3, #15]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d107      	bne.n	8000df2 <bmi08a_set_regs+0x70>
            {
                dev->delay_us(2, dev->intf_ptr_accel);
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	6852      	ldr	r2, [r2, #4]
 8000dea:	4611      	mov	r1, r2
 8000dec:	2002      	movs	r0, #2
 8000dee:	4798      	blx	r3
        if (len > 0)
 8000df0:	e007      	b.n	8000e02 <bmi08a_set_regs+0x80>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08X_E_INVALID_INPUT;
 8000df2:	23fb      	movs	r3, #251	; 0xfb
 8000df4:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8000df6:	e004      	b.n	8000e02 <bmi08a_set_regs+0x80>
            }
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8000df8:	23f9      	movs	r3, #249	; 0xf9
 8000dfa:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8000dfc:	e001      	b.n	8000e02 <bmi08a_set_regs+0x80>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8000dfe:	23ff      	movs	r3, #255	; 0xff
 8000e00:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000e02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <bmi08a_soft_reset>:

/*!
 *  @brief This API resets the accel sensor.
 */
int8_t bmi08a_soft_reset(struct bmi08x_dev *dev)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b084      	sub	sp, #16
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 f9e7 	bl	80011ea <null_ptr_check>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8000e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d123      	bne.n	8000e70 <bmi08a_soft_reset+0x62>
    {
        data = BMI08X_SOFT_RESET_CMD;
 8000e28:	23b6      	movs	r3, #182	; 0xb6
 8000e2a:	73bb      	strb	r3, [r7, #14]

        /* Reset accel device */
        rslt = set_regs(BMI08X_REG_ACCEL_SOFTRESET, &data, 1, dev);
 8000e2c:	f107 010e 	add.w	r1, r7, #14
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	207e      	movs	r0, #126	; 0x7e
 8000e36:	f000 fa4c 	bl	80012d2 <set_regs>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d114      	bne.n	8000e70 <bmi08a_soft_reset+0x62>
        {
            /* Delay 1 ms after reset value is written to its register */
            dev->delay_us(BMI08X_MS_TO_US(BMI08X_ACCEL_SOFTRESET_DELAY_MS), dev->intf_ptr_accel);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	6852      	ldr	r2, [r2, #4]
 8000e4e:	4611      	mov	r1, r2
 8000e50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e54:	4798      	blx	r3

            /* After soft reset SPI mode in the initialization phase, need to  perform a dummy SPI read
             * operation, The soft-reset performs a fundamental reset to the device,
             * which is largely equivalent to a power cycle. */
            if (dev->intf == BMI08X_SPI_INTF)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	7b1b      	ldrb	r3, [r3, #12]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d108      	bne.n	8000e70 <bmi08a_soft_reset+0x62>
            {
                /* Dummy SPI read operation of Chip-ID */
                rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_CHIP_ID, &data, 1, dev);
 8000e5e:	f107 010e 	add.w	r1, r7, #14
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2201      	movs	r2, #1
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff ff60 	bl	8000d2c <bmi08a_get_regs>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <bmi08a_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of accel sensor.
 */
int8_t bmi08a_set_meas_conf(struct bmi08x_dev *dev)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8000e84:	2300      	movs	r3, #0
 8000e86:	81bb      	strh	r3, [r7, #12]
    uint8_t bw, range, odr;
    uint8_t is_odr_invalid = FALSE, is_bw_invalid = FALSE, is_range_invalid = FALSE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	75bb      	strb	r3, [r7, #22]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	757b      	strb	r3, [r7, #21]
 8000e90:	2300      	movs	r3, #0
 8000e92:	753b      	strb	r3, [r7, #20]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f9a8 	bl	80011ea <null_ptr_check>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8000e9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d171      	bne.n	8000f8a <bmi08a_set_meas_conf+0x10e>
    {
        odr = dev->accel_cfg.odr;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7c9b      	ldrb	r3, [r3, #18]
 8000eaa:	74fb      	strb	r3, [r7, #19]
        bw = dev->accel_cfg.bw;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	7c5b      	ldrb	r3, [r3, #17]
 8000eb0:	74bb      	strb	r3, [r7, #18]
        range = dev->accel_cfg.range;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	7c1b      	ldrb	r3, [r3, #16]
 8000eb6:	747b      	strb	r3, [r7, #17]

        /* Check for valid ODR */
        if ((odr < BMI08X_ACCEL_ODR_12_5_HZ) || (odr > BMI08X_ACCEL_ODR_1600_HZ))
 8000eb8:	7cfb      	ldrb	r3, [r7, #19]
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	d902      	bls.n	8000ec4 <bmi08a_set_meas_conf+0x48>
 8000ebe:	7cfb      	ldrb	r3, [r7, #19]
 8000ec0:	2b0c      	cmp	r3, #12
 8000ec2:	d901      	bls.n	8000ec8 <bmi08a_set_meas_conf+0x4c>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	75bb      	strb	r3, [r7, #22]
        }

        /* Check for valid bandwidth */
        if (bw > BMI08X_ACCEL_BW_NORMAL)
 8000ec8:	7cbb      	ldrb	r3, [r7, #18]
 8000eca:	2b0a      	cmp	r3, #10
 8000ecc:	d901      	bls.n	8000ed2 <bmi08a_set_meas_conf+0x56>
        {
            /* Updating the status */
            is_bw_invalid = TRUE;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	757b      	strb	r3, [r7, #21]
        }

        if (dev->variant == BMI085_VARIANT)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	7b5b      	ldrb	r3, [r3, #13]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d104      	bne.n	8000ee4 <bmi08a_set_meas_conf+0x68>
        {
            /* Check for valid Range */
            if (range > BMI085_ACCEL_RANGE_16G)
 8000eda:	7c7b      	ldrb	r3, [r7, #17]
 8000edc:	2b03      	cmp	r3, #3
 8000ede:	d901      	bls.n	8000ee4 <bmi08a_set_meas_conf+0x68>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	753b      	strb	r3, [r7, #20]
            }
        }

        if (dev->variant == BMI088_VARIANT)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	7b5b      	ldrb	r3, [r3, #13]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d104      	bne.n	8000ef6 <bmi08a_set_meas_conf+0x7a>
        {
            /* Check for valid Range */
            if (range > BMI088_ACCEL_RANGE_24G)
 8000eec:	7c7b      	ldrb	r3, [r7, #17]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d901      	bls.n	8000ef6 <bmi08a_set_meas_conf+0x7a>
            {
                /* Updating the status */
                is_range_invalid = TRUE;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	753b      	strb	r3, [r7, #20]
            }
        }

        /* If ODR, BW and Range are valid, write it to accel config. registers */
        if ((!is_odr_invalid) && (!is_bw_invalid) && (!is_range_invalid))
 8000ef6:	7dbb      	ldrb	r3, [r7, #22]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d144      	bne.n	8000f86 <bmi08a_set_meas_conf+0x10a>
 8000efc:	7d7b      	ldrb	r3, [r7, #21]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d141      	bne.n	8000f86 <bmi08a_set_meas_conf+0x10a>
 8000f02:	7d3b      	ldrb	r3, [r7, #20]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d13e      	bne.n	8000f86 <bmi08a_set_meas_conf+0x10a>
        {
            /* Read accel config. register */
            rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_CONF, data, 2, dev);
 8000f08:	f107 010c 	add.w	r1, r7, #12
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2202      	movs	r2, #2
 8000f10:	2040      	movs	r0, #64	; 0x40
 8000f12:	f7ff ff0b 	bl	8000d2c <bmi08a_get_regs>
 8000f16:	4603      	mov	r3, r0
 8000f18:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 8000f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d133      	bne.n	8000f8a <bmi08a_set_meas_conf+0x10e>
            {
                /* Update data with new odr and bw values */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_ACCEL_ODR, odr);
 8000f22:	7b3b      	ldrb	r3, [r7, #12]
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	f023 030f 	bic.w	r3, r3, #15
 8000f2a:	b25a      	sxtb	r2, r3
 8000f2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f30:	f003 030f 	and.w	r3, r3, #15
 8000f34:	b25b      	sxtb	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b25b      	sxtb	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	733b      	strb	r3, [r7, #12]
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_ACCEL_BW, bw);
 8000f3e:	7b3b      	ldrb	r3, [r7, #12]
 8000f40:	b25b      	sxtb	r3, r3
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	b25a      	sxtb	r2, r3
 8000f48:	7cbb      	ldrb	r3, [r7, #18]
 8000f4a:	011b      	lsls	r3, r3, #4
 8000f4c:	b25b      	sxtb	r3, r3
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	733b      	strb	r3, [r7, #12]

                /* Update data with current range values */
                data[1] = BMI08X_SET_BITS_POS_0(data[1], BMI08X_ACCEL_RANGE, range);
 8000f56:	7b7b      	ldrb	r3, [r7, #13]
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	f023 0303 	bic.w	r3, r3, #3
 8000f5e:	b25a      	sxtb	r2, r3
 8000f60:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000f64:	f003 0303 	and.w	r3, r3, #3
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	737b      	strb	r3, [r7, #13]

                /* write to range register */
                rslt = set_regs(BMI08X_REG_ACCEL_CONF, data, 2, dev);
 8000f72:	f107 010c 	add.w	r1, r7, #12
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2202      	movs	r2, #2
 8000f7a:	2040      	movs	r0, #64	; 0x40
 8000f7c:	f000 f9a9 	bl	80012d2 <set_regs>
 8000f80:	4603      	mov	r3, r0
 8000f82:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI08X_OK)
 8000f84:	e001      	b.n	8000f8a <bmi08a_set_meas_conf+0x10e>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, BW, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 8000f86:	23f8      	movs	r3, #248	; 0xf8
 8000f88:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8000f8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <bmi08a_set_power_mode>:

/*!
 * @brief This API sets the power mode of the accel sensor.
 */
int8_t bmi08a_set_power_mode(struct bmi08x_dev *dev)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode;
    uint8_t data[2] = { 0 };
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	81bb      	strh	r3, [r7, #12]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f921 	bl	80011ea <null_ptr_check>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8000fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d143      	bne.n	800103c <bmi08a_set_power_mode+0xa6>
    {
        power_mode = dev->accel_cfg.power;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	7bdb      	ldrb	r3, [r3, #15]
 8000fb8:	73bb      	strb	r3, [r7, #14]

        /* Configure data array to write to accel power configuration register */
        if (power_mode == BMI08X_ACCEL_PM_ACTIVE)
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d104      	bne.n	8000fca <bmi08a_set_power_mode+0x34>
        {
            data[0] = BMI08X_ACCEL_PM_ACTIVE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_ENABLE;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	737b      	strb	r3, [r7, #13]
 8000fc8:	e009      	b.n	8000fde <bmi08a_set_power_mode+0x48>
        }
        else if (power_mode == BMI08X_ACCEL_PM_SUSPEND)
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d104      	bne.n	8000fda <bmi08a_set_power_mode+0x44>
        {
            data[0] = BMI08X_ACCEL_PM_SUSPEND;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	733b      	strb	r3, [r7, #12]
            data[1] = BMI08X_ACCEL_POWER_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	737b      	strb	r3, [r7, #13]
 8000fd8:	e001      	b.n	8000fde <bmi08a_set_power_mode+0x48>
        }
        else
        {
            /* Invalid power input */
            rslt = BMI08X_E_INVALID_INPUT;
 8000fda:	23fb      	movs	r3, #251	; 0xfb
 8000fdc:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI08X_OK)
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d12a      	bne.n	800103c <bmi08a_set_power_mode+0xa6>
        {
            /*enable accel sensor*/
            rslt = set_regs(BMI08X_REG_ACCEL_PWR_CONF, &data[0], 1, dev);
 8000fe6:	f107 010c 	add.w	r1, r7, #12
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2201      	movs	r2, #1
 8000fee:	207c      	movs	r0, #124	; 0x7c
 8000ff0:	f000 f96f 	bl	80012d2 <set_regs>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8000ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d11d      	bne.n	800103c <bmi08a_set_power_mode+0xa6>
            {
                /*delay between power ctrl and power config*/
                dev->delay_us(BMI08X_MS_TO_US(BMI08X_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	6852      	ldr	r2, [r2, #4]
 8001008:	4611      	mov	r1, r2
 800100a:	f241 3088 	movw	r0, #5000	; 0x1388
 800100e:	4798      	blx	r3

                /* write to accel power configuration register */
                rslt = set_regs(BMI08X_REG_ACCEL_PWR_CTRL, &data[1], 1, dev);
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	1c59      	adds	r1, r3, #1
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2201      	movs	r2, #1
 800101a:	207d      	movs	r0, #125	; 0x7d
 800101c:	f000 f959 	bl	80012d2 <set_regs>
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d107      	bne.n	800103c <bmi08a_set_power_mode+0xa6>
                {
                    /*delay required to switch power modes*/
                    dev->delay_us(BMI08X_MS_TO_US(BMI08X_POWER_CONFIG_DELAY), dev->intf_ptr_accel);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	6852      	ldr	r2, [r2, #4]
 8001034:	4611      	mov	r1, r2
 8001036:	f241 3088 	movw	r0, #5000	; 0x1388
 800103a:	4798      	blx	r3
                }
            }
        }
    }

    return rslt;
 800103c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <bmi08a_get_data>:
 * @brief This API reads the accel data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08a_get_data(struct bmi08x_sensor_data *accel, struct bmi08x_dev *dev)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[6] = {0};
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	2300      	movs	r3, #0
 8001058:	823b      	strh	r3, [r7, #16]
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800105a:	6838      	ldr	r0, [r7, #0]
 800105c:	f000 f8c5 	bl	80011ea <null_ptr_check>
 8001060:	4603      	mov	r3, r0
 8001062:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (accel != NULL))
 8001064:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d140      	bne.n	80010ee <bmi08a_get_data+0xa6>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d03d      	beq.n	80010ee <bmi08a_get_data+0xa6>
    {
        /* Read accel sensor data */
        rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_X_LSB, data, 6, dev);
 8001072:	f107 010c 	add.w	r1, r7, #12
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2206      	movs	r2, #6
 800107a:	2012      	movs	r0, #18
 800107c:	f7ff fe56 	bl	8000d2c <bmi08a_get_regs>
 8001080:	4603      	mov	r3, r0
 8001082:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 8001084:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d132      	bne.n	80010f2 <bmi08a_get_data+0xaa>
        {
            lsb = data[0];
 800108c:	7b3b      	ldrb	r3, [r7, #12]
 800108e:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8001090:	7b7b      	ldrb	r3, [r7, #13]
 8001092:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001094:	7d7b      	ldrb	r3, [r7, #21]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b21a      	sxth	r2, r3
 800109a:	7dbb      	ldrb	r3, [r7, #22]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	827b      	strh	r3, [r7, #18]
            accel->x = ((int16_t) msblsb); /* Data in X axis */
 80010a4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 80010ac:	7bbb      	ldrb	r3, [r7, #14]
 80010ae:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 80010b4:	7d7b      	ldrb	r3, [r7, #21]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	7dbb      	ldrb	r3, [r7, #22]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	827b      	strh	r3, [r7, #18]
            accel->y = ((int16_t) msblsb); /* Data in Y axis */
 80010c4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 80010cc:	7c3b      	ldrb	r3, [r7, #16]
 80010ce:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 80010d0:	7c7b      	ldrb	r3, [r7, #17]
 80010d2:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 80010d4:	7d7b      	ldrb	r3, [r7, #21]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7dbb      	ldrb	r3, [r7, #22]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	827b      	strh	r3, [r7, #18]
            accel->z = ((int16_t) msblsb); /* Data in Z axis */
 80010e4:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 80010ec:	e001      	b.n	80010f2 <bmi08a_get_data+0xaa>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80010ee:	23ff      	movs	r3, #255	; 0xff
 80010f0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80010f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <bmi08a_set_int_config>:
 * @brief This API configures the necessary accel interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08a_set_int_config(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800110a:	6838      	ldr	r0, [r7, #0]
 800110c:	f000 f86d 	bl	80011ea <null_ptr_check>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (int_config != NULL))
 8001114:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d13a      	bne.n	8001192 <bmi08a_set_int_config+0x92>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d037      	beq.n	8001192 <bmi08a_set_int_config+0x92>
    {
        switch (int_config->int_type)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	785b      	ldrb	r3, [r3, #1]
 8001126:	2b04      	cmp	r3, #4
 8001128:	d82f      	bhi.n	800118a <bmi08a_set_int_config+0x8a>
 800112a:	a201      	add	r2, pc, #4	; (adr r2, 8001130 <bmi08a_set_int_config+0x30>)
 800112c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001130:	08001145 	.word	0x08001145
 8001134:	08001153 	.word	0x08001153
 8001138:	08001161 	.word	0x08001161
 800113c:	0800116f 	.word	0x0800116f
 8001140:	0800117d 	.word	0x0800117d
        {
            case BMI08X_ACCEL_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_accel_data_ready_int(int_config, dev);
 8001144:	6839      	ldr	r1, [r7, #0]
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f97e 	bl	8001448 <set_accel_data_ready_int>
 800114c:	4603      	mov	r3, r0
 800114e:	73fb      	strb	r3, [r7, #15]
                break;
 8001150:	e01e      	b.n	8001190 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_SYNC_DATA_RDY:

                /* synchronized data ready interrupt */
                rslt = set_accel_sync_data_ready_int(int_config, dev);
 8001152:	6839      	ldr	r1, [r7, #0]
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 f9d5 	bl	8001504 <set_accel_sync_data_ready_int>
 800115a:	4603      	mov	r3, r0
 800115c:	73fb      	strb	r3, [r7, #15]
                break;
 800115e:	e017      	b.n	8001190 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_SYNC_INPUT:

                /* input for synchronization on accel */
                rslt = set_accel_sync_input(int_config, dev);
 8001160:	6839      	ldr	r1, [r7, #0]
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 fa13 	bl	800158e <set_accel_sync_input>
 8001168:	4603      	mov	r3, r0
 800116a:	73fb      	strb	r3, [r7, #15]
                break;
 800116c:	e010      	b.n	8001190 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_FIFO_WM:

                /* FIFO watermark interrupt */
                rslt = set_fifo_wm_int(int_config, dev);
 800116e:	6839      	ldr	r1, [r7, #0]
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 fa26 	bl	80015c2 <set_fifo_wm_int>
 8001176:	4603      	mov	r3, r0
 8001178:	73fb      	strb	r3, [r7, #15]
                break;
 800117a:	e009      	b.n	8001190 <bmi08a_set_int_config+0x90>
            case BMI08X_ACCEL_INT_FIFO_FULL:

                /* FIFO full interrupt */
                rslt = set_fifo_full_int(int_config, dev);
 800117c:	6839      	ldr	r1, [r7, #0]
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 fa7d 	bl	800167e <set_fifo_full_int>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]
                break;
 8001188:	e002      	b.n	8001190 <bmi08a_set_int_config+0x90>
            default:
                rslt = BMI08X_E_INVALID_CONFIG;
 800118a:	23f8      	movs	r3, #248	; 0xf8
 800118c:	73fb      	strb	r3, [r7, #15]
                break;
 800118e:	bf00      	nop
        switch (int_config->int_type)
 8001190:	e001      	b.n	8001196 <bmi08a_set_int_config+0x96>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001192:	23ff      	movs	r3, #255	; 0xff
 8001194:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3710      	adds	r7, #16
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop

080011a4 <bmi08a_get_data_int_status>:

/*!
 * @brief This internal API gets accel feature interrupt status
 */
int8_t bmi08a_get_data_int_status(uint8_t *int_status, struct bmi08x_dev *dev)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t status = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73bb      	strb	r3, [r7, #14]

    if (int_status != NULL)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d010      	beq.n	80011da <bmi08a_get_data_int_status+0x36>
    {
        rslt = bmi08a_get_regs(BMI08X_REG_ACCEL_INT_STAT_1, &status, 1, dev);
 80011b8:	f107 010e 	add.w	r1, r7, #14
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2201      	movs	r2, #1
 80011c0:	201d      	movs	r0, #29
 80011c2:	f7ff fdb3 	bl	8000d2c <bmi08a_get_regs>
 80011c6:	4603      	mov	r3, r0
 80011c8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI08X_OK)
 80011ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d105      	bne.n	80011de <bmi08a_get_data_int_status+0x3a>
        {
            (*int_status) = status;
 80011d2:	7bba      	ldrb	r2, [r7, #14]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	e001      	b.n	80011de <bmi08a_get_data_int_status+0x3a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80011da:	23ff      	movs	r3, #255	; 0xff
 80011dc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80011de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00f      	beq.n	8001218 <null_ptr_check+0x2e>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00b      	beq.n	8001218 <null_ptr_check+0x2e>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	2b00      	cmp	r3, #0
 8001206:	d007      	beq.n	8001218 <null_ptr_check+0x2e>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <null_ptr_check+0x2e>
        (dev->intf_ptr_accel == NULL))
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 8001218:	23ff      	movs	r3, #255	; 0xff
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	e001      	b.n	8001222 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3714      	adds	r7, #20
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <get_regs>:

/*!
 * @brief This API reads the data from the given register address.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001232:	b590      	push	{r4, r7, lr}
 8001234:	b0a7      	sub	sp, #156	; 0x9c
 8001236:	af00      	add	r7, sp, #0
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4603      	mov	r3, r0
 8001240:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    uint16_t index;
    uint8_t temp_buff[BMI08X_MAX_LEN];

    if (dev->intf == BMI08X_SPI_INTF)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	7b1b      	ldrb	r3, [r3, #12]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d103      	bne.n	8001258 <get_regs+0x26>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = reg_addr | BMI08X_SPI_RD_MASK;
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001256:	73fb      	strb	r3, [r7, #15]
    }

    /* Read the data from the register */
    dev->intf_rslt = dev->read(reg_addr, temp_buff, (len + dev->dummy_byte), dev->intf_ptr_accel);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	6a1c      	ldr	r4, [r3, #32]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	7b9b      	ldrb	r3, [r3, #14]
 8001260:	461a      	mov	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	441a      	add	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f107 0114 	add.w	r1, r7, #20
 800126e:	7bf8      	ldrb	r0, [r7, #15]
 8001270:	47a0      	blx	r4
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt == BMI08X_INTF_RET_SUCCESS)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001282:	2b00      	cmp	r3, #0
 8001284:	d11c      	bne.n	80012c0 <get_regs+0x8e>
    {
        for (index = 0; index < len; index++)
 8001286:	2300      	movs	r3, #0
 8001288:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800128c:	e012      	b.n	80012b4 <get_regs+0x82>
        {
            /* Updating the data buffer */
            reg_data[index] = temp_buff[index + dev->dummy_byte];
 800128e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	7b92      	ldrb	r2, [r2, #14]
 8001296:	441a      	add	r2, r3
 8001298:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	440b      	add	r3, r1
 80012a0:	3298      	adds	r2, #152	; 0x98
 80012a2:	443a      	add	r2, r7
 80012a4:	f812 2c84 	ldrb.w	r2, [r2, #-132]
 80012a8:	701a      	strb	r2, [r3, #0]
        for (index = 0; index < len; index++)
 80012aa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80012ae:	3301      	adds	r3, #1
 80012b0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80012b4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d8e7      	bhi.n	800128e <get_regs+0x5c>
 80012be:	e002      	b.n	80012c6 <get_regs+0x94>
        }
    }
    else
    {
        /* Failure case */
        rslt = BMI08X_E_COM_FAIL;
 80012c0:	23fe      	movs	r3, #254	; 0xfe
 80012c2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    }

    return rslt;
 80012c6:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	379c      	adds	r7, #156	; 0x9c
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd90      	pop	{r4, r7, pc}

080012d2 <set_regs>:

/*!
 * @brief This API writes the data to the given register address.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 80012d2:	b590      	push	{r4, r7, lr}
 80012d4:	b087      	sub	sp, #28
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	4603      	mov	r3, r0
 80012e0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08X_SPI_INTF)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	7b1b      	ldrb	r3, [r3, #12]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d103      	bne.n	80012f6 <set_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
 80012f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012f4:	73fb      	strb	r3, [r7, #15]
    }

    /* write to an accel register */
    dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_accel);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	7bf8      	ldrb	r0, [r7, #15]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	47a0      	blx	r4
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <set_regs+0x4c>
    {
        /* Updating the error status */
        rslt = BMI08X_E_COM_FAIL;
 800131a:	23fe      	movs	r3, #254	; 0xfe
 800131c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800131e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001322:	4618      	mov	r0, r3
 8001324:	371c      	adds	r7, #28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd90      	pop	{r4, r7, pc}

0800132a <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b084      	sub	sp, #16
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
 8001332:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t reg_addr = 0, data, is_channel_invalid = FALSE;
 8001334:	2300      	movs	r3, #0
 8001336:	73bb      	strb	r3, [r7, #14]
 8001338:	2300      	movs	r3, #0
 800133a:	737b      	strb	r3, [r7, #13]

    switch (int_config->int_channel)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d002      	beq.n	800134a <set_int_pin_config+0x20>
 8001344:	2b01      	cmp	r3, #1
 8001346:	d003      	beq.n	8001350 <set_int_pin_config+0x26>
 8001348:	e005      	b.n	8001356 <set_int_pin_config+0x2c>
    {
        case BMI08X_INT_CHANNEL_1:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08X_REG_ACCEL_INT1_IO_CONF;
 800134a:	2353      	movs	r3, #83	; 0x53
 800134c:	73bb      	strb	r3, [r7, #14]
            break;
 800134e:	e005      	b.n	800135c <set_int_pin_config+0x32>

        case BMI08X_INT_CHANNEL_2:

            /* update reg_addr based on channel inputs */
            reg_addr = BMI08X_REG_ACCEL_INT2_IO_CONF;
 8001350:	2354      	movs	r3, #84	; 0x54
 8001352:	73bb      	strb	r3, [r7, #14]
            break;
 8001354:	e002      	b.n	800135c <set_int_pin_config+0x32>

        default:
            is_channel_invalid = TRUE;
 8001356:	2301      	movs	r3, #1
 8001358:	737b      	strb	r3, [r7, #13]
            break;
 800135a:	bf00      	nop
    }

    if (!is_channel_invalid)
 800135c:	7b7b      	ldrb	r3, [r7, #13]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d16a      	bne.n	8001438 <set_int_pin_config+0x10e>
    {
        /* Read interrupt pin configuration register */
        rslt = get_regs(reg_addr, &data, 1, dev);
 8001362:	f107 010c 	add.w	r1, r7, #12
 8001366:	7bb8      	ldrb	r0, [r7, #14]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2201      	movs	r2, #1
 800136c:	f7ff ff61 	bl	8001232 <get_regs>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 8001374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d15f      	bne.n	800143c <set_int_pin_config+0x112>
        {
            /* Update data with user configured bmi08x_int_cfg structure */
            data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_LVL, int_config->int_pin_cfg.lvl);
 800137c:	7b3b      	ldrb	r3, [r7, #12]
 800137e:	b25b      	sxtb	r3, r3
 8001380:	f023 0302 	bic.w	r3, r3, #2
 8001384:	b25a      	sxtb	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	789b      	ldrb	r3, [r3, #2]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	b25b      	sxtb	r3, r3
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b25b      	sxtb	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	733b      	strb	r3, [r7, #12]
            data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_OD, int_config->int_pin_cfg.output_mode);
 800139c:	7b3b      	ldrb	r3, [r7, #12]
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	f023 0304 	bic.w	r3, r3, #4
 80013a4:	b25a      	sxtb	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	78db      	ldrb	r3, [r3, #3]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	f003 0304 	and.w	r3, r3, #4
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	733b      	strb	r3, [r7, #12]

            if (int_config->int_type == BMI08X_ACCEL_SYNC_INPUT)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	785b      	ldrb	r3, [r3, #1]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d11a      	bne.n	80013fa <set_int_pin_config+0xd0>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_ACCEL_INT_EDGE, BMI08X_ENABLE);
 80013c4:	7b3b      	ldrb	r3, [r7, #12]
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_IN, int_config->int_pin_cfg.enable_int_pin);
 80013ce:	7b3b      	ldrb	r3, [r7, #12]
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	f023 0310 	bic.w	r3, r3, #16
 80013d6:	b25a      	sxtb	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	791b      	ldrb	r3, [r3, #4]
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	b25b      	sxtb	r3, r3
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	b25b      	sxtb	r3, r3
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BIT_VAL_0(data, BMI08X_ACCEL_INT_IO);
 80013ee:	7b3b      	ldrb	r3, [r7, #12]
 80013f0:	f023 0308 	bic.w	r3, r3, #8
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	733b      	strb	r3, [r7, #12]
 80013f8:	e014      	b.n	8001424 <set_int_pin_config+0xfa>
            }
            else
            {
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT_IO, int_config->int_pin_cfg.enable_int_pin);
 80013fa:	7b3b      	ldrb	r3, [r7, #12]
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	f023 0308 	bic.w	r3, r3, #8
 8001402:	b25a      	sxtb	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	791b      	ldrb	r3, [r3, #4]
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	b25b      	sxtb	r3, r3
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	b25b      	sxtb	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b25b      	sxtb	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	733b      	strb	r3, [r7, #12]
                data = BMI08X_SET_BIT_VAL_0(data, BMI08X_ACCEL_INT_IN);
 800141a:	7b3b      	ldrb	r3, [r7, #12]
 800141c:	f023 0310 	bic.w	r3, r3, #16
 8001420:	b2db      	uxtb	r3, r3
 8001422:	733b      	strb	r3, [r7, #12]
            }

            /* Write to interrupt pin configuration register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 8001424:	f107 010c 	add.w	r1, r7, #12
 8001428:	7bb8      	ldrb	r0, [r7, #14]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2201      	movs	r2, #1
 800142e:	f7ff fca8 	bl	8000d82 <bmi08a_set_regs>
 8001432:	4603      	mov	r3, r0
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e001      	b.n	800143c <set_int_pin_config+0x112>
        }
    }
    else
    {
        rslt = BMI08X_E_INVALID_INPUT;
 8001438:	23fb      	movs	r3, #251	; 0xfb
 800143a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800143c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <set_accel_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for accel sensor.
 */
static int8_t set_accel_data_ready_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 8001452:	2300      	movs	r3, #0
 8001454:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001456:	f107 010d 	add.w	r1, r7, #13
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2201      	movs	r2, #1
 800145e:	2058      	movs	r0, #88	; 0x58
 8001460:	f7ff fee7 	bl	8001232 <get_regs>
 8001464:	4603      	mov	r3, r0
 8001466:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d143      	bne.n	80014f8 <set_accel_data_ready_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	791b      	ldrb	r3, [r3, #4]
 8001474:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <set_accel_data_ready_int+0x3c>
 800147e:	2b01      	cmp	r3, #1
 8001480:	d010      	beq.n	80014a4 <set_accel_data_ready_int+0x5c>
 8001482:	e01f      	b.n	80014c4 <set_accel_data_ready_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT1_DRDY, conf);
 8001484:	7b7b      	ldrb	r3, [r7, #13]
 8001486:	b25b      	sxtb	r3, r3
 8001488:	f023 0304 	bic.w	r3, r3, #4
 800148c:	b25a      	sxtb	r2, r3
 800148e:	7bbb      	ldrb	r3, [r7, #14]
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	b25b      	sxtb	r3, r3
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	b25b      	sxtb	r3, r3
 800149a:	4313      	orrs	r3, r2
 800149c:	b25b      	sxtb	r3, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	737b      	strb	r3, [r7, #13]
                break;
 80014a2:	e012      	b.n	80014ca <set_accel_data_ready_int+0x82>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_DRDY, conf);
 80014a4:	7b7b      	ldrb	r3, [r7, #13]
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014ac:	b25a      	sxtb	r2, r3
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	019b      	lsls	r3, r3, #6
 80014b2:	b25b      	sxtb	r3, r3
 80014b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	737b      	strb	r3, [r7, #13]
                break;
 80014c2:	e002      	b.n	80014ca <set_accel_data_ready_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 80014c4:	23fb      	movs	r3, #251	; 0xfb
 80014c6:	73fb      	strb	r3, [r7, #15]
                break;
 80014c8:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 80014ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d112      	bne.n	80014f8 <set_accel_data_ready_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 80014d2:	6839      	ldr	r1, [r7, #0]
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff28 	bl	800132a <set_int_pin_config>
 80014da:	4603      	mov	r3, r0
 80014dc:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80014de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d108      	bne.n	80014f8 <set_accel_data_ready_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80014e6:	f107 010d 	add.w	r1, r7, #13
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	2058      	movs	r0, #88	; 0x58
 80014f0:	f7ff fc47 	bl	8000d82 <bmi08a_set_regs>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 80014f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <set_accel_sync_data_ready_int>:
/*!
 * @brief This API sets the synchronized data ready interrupt for accel sensor
 */
static int8_t set_accel_sync_data_ready_int(const struct bmi08x_accel_int_channel_cfg *int_config,
                                            struct bmi08x_dev *dev)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data, reg_addr = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001512:	6838      	ldr	r0, [r7, #0]
 8001514:	f7ff fe69 	bl	80011ea <null_ptr_check>
 8001518:	4603      	mov	r3, r0
 800151a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08X_OK)
 800151c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d12e      	bne.n	8001582 <set_accel_sync_data_ready_int+0x7e>
    {

        data = BMI08X_ACCEL_INTA_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	737b      	strb	r3, [r7, #13]

        switch (int_config->int_channel)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <set_accel_sync_data_ready_int+0x32>
 8001530:	2b01      	cmp	r3, #1
 8001532:	d003      	beq.n	800153c <set_accel_sync_data_ready_int+0x38>
 8001534:	e005      	b.n	8001542 <set_accel_sync_data_ready_int+0x3e>
        {
            case BMI08X_INT_CHANNEL_1:
                reg_addr = BMI08X_REG_ACCEL_INT1_MAP;
 8001536:	2356      	movs	r3, #86	; 0x56
 8001538:	73bb      	strb	r3, [r7, #14]
                break;
 800153a:	e005      	b.n	8001548 <set_accel_sync_data_ready_int+0x44>

            case BMI08X_INT_CHANNEL_2:
                reg_addr = BMI08X_REG_ACCEL_INT2_MAP;
 800153c:	2357      	movs	r3, #87	; 0x57
 800153e:	73bb      	strb	r3, [r7, #14]
                break;
 8001540:	e002      	b.n	8001548 <set_accel_sync_data_ready_int+0x44>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8001542:	23fb      	movs	r3, #251	; 0xfb
 8001544:	73fb      	strb	r3, [r7, #15]
                break;
 8001546:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8001548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d118      	bne.n	8001582 <set_accel_sync_data_ready_int+0x7e>
        {
            if (int_config->int_pin_cfg.enable_int_pin == BMI08X_ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	791b      	ldrb	r3, [r3, #4]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <set_accel_sync_data_ready_int+0x58>
            {
                /*interrupt A mapped to INT1/INT2 */
                data = BMI08X_ACCEL_INTA_ENABLE;
 8001558:	2301      	movs	r3, #1
 800155a:	737b      	strb	r3, [r7, #13]
            }

            /* Write to interrupt map register */
            rslt = bmi08a_set_regs(reg_addr, &data, 1, dev);
 800155c:	f107 010d 	add.w	r1, r7, #13
 8001560:	7bb8      	ldrb	r0, [r7, #14]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	f7ff fc0c 	bl	8000d82 <bmi08a_set_regs>
 800156a:	4603      	mov	r3, r0
 800156c:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d105      	bne.n	8001582 <set_accel_sync_data_ready_int+0x7e>
            {
                /*set input interrupt configuration*/
                rslt = set_int_pin_config(int_config, dev);
 8001576:	6839      	ldr	r1, [r7, #0]
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff fed6 	bl	800132a <set_int_pin_config>
 800157e:	4603      	mov	r3, r0
 8001580:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <set_accel_sync_input>:

/*!
 * @brief This API configures the given interrupt channel as input for accel sensor
 */
static int8_t set_accel_sync_input(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b084      	sub	sp, #16
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001598:	6838      	ldr	r0, [r7, #0]
 800159a:	f7ff fe26 	bl	80011ea <null_ptr_check>
 800159e:	4603      	mov	r3, r0
 80015a0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI08X_OK)
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d105      	bne.n	80015b6 <set_accel_sync_input+0x28>
    {
        /*set input interrupt configuration*/
        rslt = set_int_pin_config(int_config, dev);
 80015aa:	6839      	ldr	r1, [r7, #0]
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff febc 	bl	800132a <set_int_pin_config>
 80015b2:	4603      	mov	r3, r0
 80015b4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <set_fifo_wm_int>:

/*!
 * @brief This API sets the FIFO water mark interrupt for accel sensor.
 */
static int8_t set_fifo_wm_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b084      	sub	sp, #16
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 80015cc:	2300      	movs	r3, #0
 80015ce:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 80015d0:	f107 010d 	add.w	r1, r7, #13
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	2201      	movs	r2, #1
 80015d8:	2058      	movs	r0, #88	; 0x58
 80015da:	f7ff fe2a 	bl	8001232 <get_regs>
 80015de:	4603      	mov	r3, r0
 80015e0:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d143      	bne.n	8001672 <set_fifo_wm_int+0xb0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	791b      	ldrb	r3, [r3, #4]
 80015ee:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <set_fifo_wm_int+0x3c>
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d010      	beq.n	800161e <set_fifo_wm_int+0x5c>
 80015fc:	e01f      	b.n	800163e <set_fifo_wm_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT1_FWM, conf);
 80015fe:	7b7b      	ldrb	r3, [r7, #13]
 8001600:	b25b      	sxtb	r3, r3
 8001602:	f023 0302 	bic.w	r3, r3, #2
 8001606:	b25a      	sxtb	r2, r3
 8001608:	7bbb      	ldrb	r3, [r7, #14]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	b25b      	sxtb	r3, r3
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	b25b      	sxtb	r3, r3
 8001614:	4313      	orrs	r3, r2
 8001616:	b25b      	sxtb	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	737b      	strb	r3, [r7, #13]
                break;
 800161c:	e012      	b.n	8001644 <set_fifo_wm_int+0x82>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_FWM, conf);
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	b25b      	sxtb	r3, r3
 8001622:	f023 0320 	bic.w	r3, r3, #32
 8001626:	b25a      	sxtb	r2, r3
 8001628:	7bbb      	ldrb	r3, [r7, #14]
 800162a:	015b      	lsls	r3, r3, #5
 800162c:	b25b      	sxtb	r3, r3
 800162e:	f003 0320 	and.w	r3, r3, #32
 8001632:	b25b      	sxtb	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b25b      	sxtb	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	737b      	strb	r3, [r7, #13]
                break;
 800163c:	e002      	b.n	8001644 <set_fifo_wm_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 800163e:	23fb      	movs	r3, #251	; 0xfb
 8001640:	73fb      	strb	r3, [r7, #15]
                break;
 8001642:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8001644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d112      	bne.n	8001672 <set_fifo_wm_int+0xb0>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 800164c:	6839      	ldr	r1, [r7, #0]
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff fe6b 	bl	800132a <set_int_pin_config>
 8001654:	4603      	mov	r3, r0
 8001656:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d108      	bne.n	8001672 <set_fifo_wm_int+0xb0>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 8001660:	f107 010d 	add.w	r1, r7, #13
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2201      	movs	r2, #1
 8001668:	2058      	movs	r0, #88	; 0x58
 800166a:	f7ff fb8a 	bl	8000d82 <bmi08a_set_regs>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <set_fifo_full_int>:

/*!
 * @brief This API sets the FIFO full interrupt for accel sensor.
 */
static int8_t set_fifo_full_int(const struct bmi08x_accel_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b084      	sub	sp, #16
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0, conf;
 8001688:	2300      	movs	r3, #0
 800168a:	737b      	strb	r3, [r7, #13]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 800168c:	f107 010d 	add.w	r1, r7, #13
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2201      	movs	r2, #1
 8001694:	2058      	movs	r0, #88	; 0x58
 8001696:	f7ff fdcc 	bl	8001232 <get_regs>
 800169a:	4603      	mov	r3, r0
 800169c:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 800169e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d142      	bne.n	800172c <set_fifo_full_int+0xae>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	791b      	ldrb	r3, [r3, #4]
 80016aa:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <set_fifo_full_int+0x3c>
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d00f      	beq.n	80016d8 <set_fifo_full_int+0x5a>
 80016b8:	e01e      	b.n	80016f8 <set_fifo_full_int+0x7a>
        {
            case BMI08X_INT_CHANNEL_1:

                /* Updating the data */
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_ACCEL_INT1_FFULL, conf);
 80016ba:	7b7b      	ldrb	r3, [r7, #13]
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	f023 0301 	bic.w	r3, r3, #1
 80016c2:	b25a      	sxtb	r2, r3
 80016c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	737b      	strb	r3, [r7, #13]
                break;
 80016d6:	e012      	b.n	80016fe <set_fifo_full_int+0x80>

            case BMI08X_INT_CHANNEL_2:

                /* Updating the data */
                data = BMI08X_SET_BITS(data, BMI08X_ACCEL_INT2_FFULL, conf);
 80016d8:	7b7b      	ldrb	r3, [r7, #13]
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	f023 0310 	bic.w	r3, r3, #16
 80016e0:	b25a      	sxtb	r2, r3
 80016e2:	7bbb      	ldrb	r3, [r7, #14]
 80016e4:	011b      	lsls	r3, r3, #4
 80016e6:	b25b      	sxtb	r3, r3
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	737b      	strb	r3, [r7, #13]
                break;
 80016f6:	e002      	b.n	80016fe <set_fifo_full_int+0x80>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 80016f8:	23fb      	movs	r3, #251	; 0xfb
 80016fa:	73fb      	strb	r3, [r7, #15]
                break;
 80016fc:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d112      	bne.n	800172c <set_fifo_full_int+0xae>
        {
            /* Configure interrupt pins */
            rslt = set_int_pin_config(int_config, dev);
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fe0e 	bl	800132a <set_int_pin_config>
 800170e:	4603      	mov	r3, r0
 8001710:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d108      	bne.n	800172c <set_fifo_full_int+0xae>
            {
                /* Write to interrupt map register */
                rslt = bmi08a_set_regs(BMI08X_REG_ACCEL_INT1_INT2_MAP_DATA, &data, 1, dev);
 800171a:	f107 010d 	add.w	r1, r7, #13
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	2201      	movs	r2, #1
 8001722:	2058      	movs	r0, #88	; 0x58
 8001724:	f7ff fb2d 	bl	8000d82 <bmi08a_set_regs>
 8001728:	4603      	mov	r3, r0
 800172a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800172c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <bmi08g_init>:
 *  @brief This API is the entry point for gyro sensor.
 *  It performs the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of gyro sensor.
 */
int8_t bmi08g_init(struct bmi08x_dev *dev)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t chip_id = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure */
    rslt = null_ptr_check(dev);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 fa1f 	bl	8001b88 <null_ptr_check>
 800174a:	4603      	mov	r3, r0
 800174c:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d11a      	bne.n	800178c <bmi08g_init+0x54>
    {
        /* Read gyro chip id */


        rslt = get_regs(BMI08X_REG_GYRO_CHIP_ID, &chip_id, 1, dev);
 8001756:	f107 010e 	add.w	r1, r7, #14
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	2000      	movs	r0, #0
 8001760:	f000 fa36 	bl	8001bd0 <get_regs>
 8001764:	4603      	mov	r3, r0
 8001766:	73fb      	strb	r3, [r7, #15]
        printf("%d: Chip id\r\n", chip_id);
 8001768:	7bbb      	ldrb	r3, [r7, #14]
 800176a:	4619      	mov	r1, r3
 800176c:	480a      	ldr	r0, [pc, #40]	; (8001798 <bmi08g_init+0x60>)
 800176e:	f006 f871 	bl	8007854 <iprintf>
        if (rslt == BMI08X_OK)
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d108      	bne.n	800178c <bmi08g_init+0x54>
        {
            if (chip_id == BMI08X_GYRO_CHIP_ID)
 800177a:	7bbb      	ldrb	r3, [r7, #14]
 800177c:	2b0f      	cmp	r3, #15
 800177e:	d103      	bne.n	8001788 <bmi08g_init+0x50>
            {
                /* Store the chip ID in dev structure */
                dev->gyro_chip_id = chip_id;
 8001780:	7bba      	ldrb	r2, [r7, #14]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	705a      	strb	r2, [r3, #1]
 8001786:	e001      	b.n	800178c <bmi08g_init+0x54>
            }
            else
            {
                rslt = BMI08X_E_DEV_NOT_FOUND;
 8001788:	23fd      	movs	r3, #253	; 0xfd
 800178a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800178c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	0800a730 	.word	0x0800a730

0800179c <bmi08g_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of gyro sensor.
 */
int8_t bmi08g_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	4603      	mov	r3, r0
 80017aa:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80017ac:	6838      	ldr	r0, [r7, #0]
 80017ae:	f000 f9eb 	bl	8001b88 <null_ptr_check>
 80017b2:	4603      	mov	r3, r0
 80017b4:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 80017b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d111      	bne.n	80017e2 <bmi08g_get_regs+0x46>
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00e      	beq.n	80017e2 <bmi08g_get_regs+0x46>
    {
        if (len > 0)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d008      	beq.n	80017dc <bmi08g_get_regs+0x40>
        {
            /* Reading from the register */
            rslt = get_regs(reg_addr, reg_data, len, dev);
 80017ca:	7bf8      	ldrb	r0, [r7, #15]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	68b9      	ldr	r1, [r7, #8]
 80017d2:	f000 f9fd 	bl	8001bd0 <get_regs>
 80017d6:	4603      	mov	r3, r0
 80017d8:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80017da:	e004      	b.n	80017e6 <bmi08g_get_regs+0x4a>
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 80017dc:	23f9      	movs	r3, #249	; 0xf9
 80017de:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 80017e0:	e001      	b.n	80017e6 <bmi08g_get_regs+0x4a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 80017e2:	23ff      	movs	r3, #255	; 0xff
 80017e4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80017e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <bmi08g_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of gyro sensor.
 */
int8_t bmi08g_set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	4603      	mov	r3, r0
 8001800:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001802:	6838      	ldr	r0, [r7, #0]
 8001804:	f000 f9c0 	bl	8001b88 <null_ptr_check>
 8001808:	4603      	mov	r3, r0
 800180a:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (reg_data != NULL))
 800180c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d130      	bne.n	8001876 <bmi08g_set_regs+0x84>
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d02d      	beq.n	8001876 <bmi08g_set_regs+0x84>
    {
        if (len > 0)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d027      	beq.n	8001870 <bmi08g_set_regs+0x7e>
        {
            /* Writing to the register */
            rslt = set_regs(reg_addr, reg_data, len, dev);
 8001820:	7bf8      	ldrb	r0, [r7, #15]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	68b9      	ldr	r1, [r7, #8]
 8001828:	f000 f9fe 	bl	8001c28 <set_regs>
 800182c:	4603      	mov	r3, r0
 800182e:	75fb      	strb	r3, [r7, #23]

            /* Delay for suspended mode of the sensor is 450 us */
            if (dev->gyro_cfg.power == BMI08X_GYRO_PM_SUSPEND || dev->gyro_cfg.power == BMI08X_GYRO_PM_DEEP_SUSPEND)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	7cdb      	ldrb	r3, [r3, #19]
 8001834:	2b80      	cmp	r3, #128	; 0x80
 8001836:	d003      	beq.n	8001840 <bmi08g_set_regs+0x4e>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	7cdb      	ldrb	r3, [r3, #19]
 800183c:	2b20      	cmp	r3, #32
 800183e:	d108      	bne.n	8001852 <bmi08g_set_regs+0x60>
            {
                dev->delay_us(450, dev->intf_ptr_gyro);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	6892      	ldr	r2, [r2, #8]
 8001848:	4611      	mov	r1, r2
 800184a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800184e:	4798      	blx	r3
        if (len > 0)
 8001850:	e013      	b.n	800187a <bmi08g_set_regs+0x88>
            }
            /* Delay for Normal mode of the sensor is 2 us */
            else if (dev->gyro_cfg.power == BMI08X_GYRO_PM_NORMAL)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	7cdb      	ldrb	r3, [r3, #19]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d107      	bne.n	800186a <bmi08g_set_regs+0x78>
            {
                dev->delay_us(2, dev->intf_ptr_gyro);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	6892      	ldr	r2, [r2, #8]
 8001862:	4611      	mov	r1, r2
 8001864:	2002      	movs	r0, #2
 8001866:	4798      	blx	r3
        if (len > 0)
 8001868:	e007      	b.n	800187a <bmi08g_set_regs+0x88>
            }
            else
            {
                /* Invalid power input */
                rslt = BMI08X_E_INVALID_INPUT;
 800186a:	23fb      	movs	r3, #251	; 0xfb
 800186c:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 800186e:	e004      	b.n	800187a <bmi08g_set_regs+0x88>
            }
        }
        else
        {
            rslt = BMI08X_E_RD_WR_LENGTH_INVALID;
 8001870:	23f9      	movs	r3, #249	; 0xf9
 8001872:	75fb      	strb	r3, [r7, #23]
        if (len > 0)
 8001874:	e001      	b.n	800187a <bmi08g_set_regs+0x88>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001876:	23ff      	movs	r3, #255	; 0xff
 8001878:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800187a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <bmi08g_set_meas_conf>:
/*!
 * @brief This API sets the output data rate, range and bandwidth
 * of gyro sensor.
 */
int8_t bmi08g_set_meas_conf(struct bmi08x_dev *dev)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t odr, range;
    uint8_t is_range_invalid = FALSE, is_odr_invalid = FALSE;
 800188e:	2300      	movs	r3, #0
 8001890:	73bb      	strb	r3, [r7, #14]
 8001892:	2300      	movs	r3, #0
 8001894:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f976 	bl	8001b88 <null_ptr_check>
 800189c:	4603      	mov	r3, r0
 800189e:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 80018a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d166      	bne.n	8001976 <bmi08g_set_meas_conf+0xf0>
    {
        odr = dev->gyro_cfg.odr;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7d9b      	ldrb	r3, [r3, #22]
 80018ac:	733b      	strb	r3, [r7, #12]
        range = dev->gyro_cfg.range;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	7d1b      	ldrb	r3, [r3, #20]
 80018b2:	72fb      	strb	r3, [r7, #11]

        if (odr > BMI08X_GYRO_BW_32_ODR_100_HZ)
 80018b4:	7b3b      	ldrb	r3, [r7, #12]
 80018b6:	2b07      	cmp	r3, #7
 80018b8:	d901      	bls.n	80018be <bmi08g_set_meas_conf+0x38>
        {
            /* Updating the status */
            is_odr_invalid = TRUE;
 80018ba:	2301      	movs	r3, #1
 80018bc:	737b      	strb	r3, [r7, #13]
        }

        if (range > BMI08X_GYRO_RANGE_125_DPS)
 80018be:	7afb      	ldrb	r3, [r7, #11]
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d901      	bls.n	80018c8 <bmi08g_set_meas_conf+0x42>
        {
            /* Updating the status */
            is_range_invalid = TRUE;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73bb      	strb	r3, [r7, #14]
        }

        /* If ODR and Range is valid, write it to gyro config. registers */
        if ((!is_odr_invalid) && (!is_range_invalid))
 80018c8:	7b7b      	ldrb	r3, [r7, #13]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d14f      	bne.n	800196e <bmi08g_set_meas_conf+0xe8>
 80018ce:	7bbb      	ldrb	r3, [r7, #14]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d14c      	bne.n	800196e <bmi08g_set_meas_conf+0xe8>
        {
            /* Read range value from the range register */
            rslt = bmi08g_get_regs(BMI08X_REG_GYRO_BANDWIDTH, &data, 1, dev);
 80018d4:	f107 010a 	add.w	r1, r7, #10
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	2010      	movs	r0, #16
 80018de:	f7ff ff5d 	bl	800179c <bmi08g_get_regs>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d142      	bne.n	8001974 <bmi08g_set_meas_conf+0xee>
            {
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_BW, odr);
 80018ee:	7abb      	ldrb	r3, [r7, #10]
 80018f0:	b25b      	sxtb	r3, r3
 80018f2:	f023 030f 	bic.w	r3, r3, #15
 80018f6:	b25a      	sxtb	r2, r3
 80018f8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	b25b      	sxtb	r3, r3
 8001902:	4313      	orrs	r3, r2
 8001904:	b25b      	sxtb	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	72bb      	strb	r3, [r7, #10]

                /* Write odr value to odr register */
                rslt = bmi08g_set_regs(BMI08X_REG_GYRO_BANDWIDTH, &data, 1, dev);
 800190a:	f107 010a 	add.w	r1, r7, #10
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	2010      	movs	r0, #16
 8001914:	f7ff ff6d 	bl	80017f2 <bmi08g_set_regs>
 8001918:	4603      	mov	r3, r0
 800191a:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 800191c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d127      	bne.n	8001974 <bmi08g_set_meas_conf+0xee>
                {
                    /* Read range value from the range register */
                    rslt = bmi08g_get_regs(BMI08X_REG_GYRO_RANGE, &data, 1, dev);
 8001924:	f107 010a 	add.w	r1, r7, #10
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	200f      	movs	r0, #15
 800192e:	f7ff ff35 	bl	800179c <bmi08g_get_regs>
 8001932:	4603      	mov	r3, r0
 8001934:	73fb      	strb	r3, [r7, #15]

                    if (rslt == BMI08X_OK)
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d11a      	bne.n	8001974 <bmi08g_set_meas_conf+0xee>
                    {
                        data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_RANGE, range);
 800193e:	7abb      	ldrb	r3, [r7, #10]
 8001940:	b25b      	sxtb	r3, r3
 8001942:	f023 0307 	bic.w	r3, r3, #7
 8001946:	b25a      	sxtb	r2, r3
 8001948:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	b25b      	sxtb	r3, r3
 8001952:	4313      	orrs	r3, r2
 8001954:	b25b      	sxtb	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	72bb      	strb	r3, [r7, #10]

                        /* Write range value to range register */
                        rslt = bmi08g_set_regs(BMI08X_REG_GYRO_RANGE, &data, 1, dev);
 800195a:	f107 010a 	add.w	r1, r7, #10
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	200f      	movs	r0, #15
 8001964:	f7ff ff45 	bl	80017f2 <bmi08g_set_regs>
 8001968:	4603      	mov	r3, r0
 800196a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI08X_OK)
 800196c:	e002      	b.n	8001974 <bmi08g_set_meas_conf+0xee>
            }
        }
        else
        {
            /* Invalid configuration present in ODR, Range */
            rslt = BMI08X_E_INVALID_CONFIG;
 800196e:	23f8      	movs	r3, #248	; 0xf8
 8001970:	73fb      	strb	r3, [r7, #15]
 8001972:	e000      	b.n	8001976 <bmi08g_set_meas_conf+0xf0>
            if (rslt == BMI08X_OK)
 8001974:	bf00      	nop
        }
    }

    return rslt;
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <bmi08g_set_power_mode>:

/*!
 * @brief This API sets the power mode of the gyro sensor.
 */
int8_t bmi08g_set_power_mode(struct bmi08x_dev *dev)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b084      	sub	sp, #16
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t power_mode, data;
    uint8_t is_power_switching_mode_valid = TRUE;
 800198a:	2301      	movs	r3, #1
 800198c:	73bb      	strb	r3, [r7, #14]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f8fa 	bl	8001b88 <null_ptr_check>
 8001994:	4603      	mov	r3, r0
 8001996:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BMI08X_OK)
 8001998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d13a      	bne.n	8001a16 <bmi08g_set_power_mode+0x94>
    {
        /*read the previous power state*/
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_LPM1, &data, 1, dev);
 80019a0:	f107 010c 	add.w	r1, r7, #12
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	2011      	movs	r0, #17
 80019aa:	f7ff fef7 	bl	800179c <bmi08g_get_regs>
 80019ae:	4603      	mov	r3, r0
 80019b0:	73fb      	strb	r3, [r7, #15]

        if (rslt == BMI08X_OK)
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d12d      	bne.n	8001a16 <bmi08g_set_power_mode+0x94>
        {
            power_mode = dev->gyro_cfg.power;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7cdb      	ldrb	r3, [r3, #19]
 80019be:	737b      	strb	r3, [r7, #13]

            /* Switching between normal mode and the suspend modes is allowed, it is not possible to switch
             * between suspend and deep suspend and vice versa. Check for invalid power switching,
             * (i.e) deep suspend to suspend */
            if ((power_mode == BMI08X_GYRO_PM_SUSPEND) && (data == BMI08X_GYRO_PM_DEEP_SUSPEND))
 80019c0:	7b7b      	ldrb	r3, [r7, #13]
 80019c2:	2b80      	cmp	r3, #128	; 0x80
 80019c4:	d104      	bne.n	80019d0 <bmi08g_set_power_mode+0x4e>
 80019c6:	7b3b      	ldrb	r3, [r7, #12]
 80019c8:	2b20      	cmp	r3, #32
 80019ca:	d101      	bne.n	80019d0 <bmi08g_set_power_mode+0x4e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	73bb      	strb	r3, [r7, #14]
            }

            /* Check for invalid power switching (i.e) from suspend to deep suspend */
            if ((power_mode == BMI08X_GYRO_PM_DEEP_SUSPEND) && (data == BMI08X_GYRO_PM_SUSPEND))
 80019d0:	7b7b      	ldrb	r3, [r7, #13]
 80019d2:	2b20      	cmp	r3, #32
 80019d4:	d104      	bne.n	80019e0 <bmi08g_set_power_mode+0x5e>
 80019d6:	7b3b      	ldrb	r3, [r7, #12]
 80019d8:	2b80      	cmp	r3, #128	; 0x80
 80019da:	d101      	bne.n	80019e0 <bmi08g_set_power_mode+0x5e>
            {
                /* Updating the status */
                is_power_switching_mode_valid = FALSE;
 80019dc:	2300      	movs	r3, #0
 80019de:	73bb      	strb	r3, [r7, #14]
            }

            /* Check if power switching mode is valid*/
            if (is_power_switching_mode_valid)
 80019e0:	7bbb      	ldrb	r3, [r7, #14]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d015      	beq.n	8001a12 <bmi08g_set_power_mode+0x90>
            {
                /* Write power to power register */
                rslt = bmi08g_set_regs(BMI08X_REG_GYRO_LPM1, &power_mode, 1, dev);
 80019e6:	f107 010d 	add.w	r1, r7, #13
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	2011      	movs	r0, #17
 80019f0:	f7ff feff 	bl	80017f2 <bmi08g_set_regs>
 80019f4:	4603      	mov	r3, r0
 80019f6:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 80019f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10a      	bne.n	8001a16 <bmi08g_set_power_mode+0x94>
                {
                    /* Time required to switch the power mode */
                    dev->delay_us(BMI08X_MS_TO_US(BMI08X_GYRO_POWER_MODE_CONFIG_DELAY), dev->intf_ptr_gyro);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6892      	ldr	r2, [r2, #8]
 8001a08:	4611      	mov	r1, r2
 8001a0a:	f247 5030 	movw	r0, #30000	; 0x7530
 8001a0e:	4798      	blx	r3
 8001a10:	e001      	b.n	8001a16 <bmi08g_set_power_mode+0x94>
                }
            }
            else
            {
                /* Updating the error */
                rslt = BMI08X_E_INVALID_INPUT;
 8001a12:	23fb      	movs	r3, #251	; 0xfb
 8001a14:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <bmi08g_get_data>:
 * @brief This API reads the gyro data from the sensor,
 * store it in the bmi08x_sensor_data structure instance
 * passed by the user.
 */
int8_t bmi08g_get_data(struct bmi08x_sensor_data *gyro, struct bmi08x_dev *dev)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[6] = {200};
 8001a2c:	23c8      	movs	r3, #200	; 0xc8
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	2300      	movs	r3, #0
 8001a32:	823b      	strh	r3, [r7, #16]
    uint8_t lsb, msb;
    uint16_t msblsb;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001a34:	6838      	ldr	r0, [r7, #0]
 8001a36:	f000 f8a7 	bl	8001b88 <null_ptr_check>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (gyro != NULL))
 8001a3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d140      	bne.n	8001ac8 <bmi08g_get_data+0xa6>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d03d      	beq.n	8001ac8 <bmi08g_get_data+0xa6>
    {
        /* read gyro sensor data */
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_X_LSB, data, 6, dev);
 8001a4c:	f107 010c 	add.w	r1, r7, #12
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2206      	movs	r2, #6
 8001a54:	2002      	movs	r0, #2
 8001a56:	f7ff fea1 	bl	800179c <bmi08g_get_regs>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	75fb      	strb	r3, [r7, #23]

        if (rslt == BMI08X_OK)
 8001a5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d132      	bne.n	8001acc <bmi08g_get_data+0xaa>
        {
            lsb = data[0];
 8001a66:	7b3b      	ldrb	r3, [r7, #12]
 8001a68:	75bb      	strb	r3, [r7, #22]
            msb = data[1];
 8001a6a:	7b7b      	ldrb	r3, [r7, #13]
 8001a6c:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001a6e:	7d7b      	ldrb	r3, [r7, #21]
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b21a      	sxth	r2, r3
 8001a74:	7dbb      	ldrb	r3, [r7, #22]
 8001a76:	b21b      	sxth	r3, r3
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	827b      	strh	r3, [r7, #18]
            gyro->x = (int16_t)msblsb; /* Data in X axis */
 8001a7e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	801a      	strh	r2, [r3, #0]

            lsb = data[2];
 8001a86:	7bbb      	ldrb	r3, [r7, #14]
 8001a88:	75bb      	strb	r3, [r7, #22]
            msb = data[3];
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001a8e:	7d7b      	ldrb	r3, [r7, #21]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	7dbb      	ldrb	r3, [r7, #22]
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	827b      	strh	r3, [r7, #18]
            gyro->y = (int16_t)msblsb; /* Data in Y axis */
 8001a9e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	805a      	strh	r2, [r3, #2]

            lsb = data[4];
 8001aa6:	7c3b      	ldrb	r3, [r7, #16]
 8001aa8:	75bb      	strb	r3, [r7, #22]
            msb = data[5];
 8001aaa:	7c7b      	ldrb	r3, [r7, #17]
 8001aac:	757b      	strb	r3, [r7, #21]
            msblsb = (msb << 8) | lsb;
 8001aae:	7d7b      	ldrb	r3, [r7, #21]
 8001ab0:	021b      	lsls	r3, r3, #8
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	7dbb      	ldrb	r3, [r7, #22]
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	b21b      	sxth	r3, r3
 8001abc:	827b      	strh	r3, [r7, #18]
            gyro->z = (int16_t)msblsb; /* Data in Z axis */
 8001abe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	809a      	strh	r2, [r3, #4]
        if (rslt == BMI08X_OK)
 8001ac6:	e001      	b.n	8001acc <bmi08g_get_data+0xaa>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001ac8:	23ff      	movs	r3, #255	; 0xff
 8001aca:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <bmi08g_set_int_config>:
 * @brief This API configures the necessary gyro interrupt
 * based on the user settings in the bmi08x_int_cfg
 * structure instance.
 */
int8_t bmi08g_set_int_config(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001ae2:	6838      	ldr	r0, [r7, #0]
 8001ae4:	f000 f850 	bl	8001b88 <null_ptr_check>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if ((rslt == BMI08X_OK) && (int_config != NULL))
 8001aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d11e      	bne.n	8001b32 <bmi08g_set_int_config+0x5a>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01b      	beq.n	8001b32 <bmi08g_set_int_config+0x5a>
    {

        switch (int_config->int_type)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	785b      	ldrb	r3, [r3, #1]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <bmi08g_set_int_config+0x36>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db11      	blt.n	8001b2a <bmi08g_set_int_config+0x52>
 8001b06:	3b01      	subs	r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d80e      	bhi.n	8001b2a <bmi08g_set_int_config+0x52>
 8001b0c:	e006      	b.n	8001b1c <bmi08g_set_int_config+0x44>
        {
            case BMI08X_GYRO_INT_DATA_RDY:

                /* Data ready interrupt */
                rslt = set_gyro_data_ready_int(int_config, dev);
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 f8e1 	bl	8001cd8 <set_gyro_data_ready_int>
 8001b16:	4603      	mov	r3, r0
 8001b18:	73fb      	strb	r3, [r7, #15]
                break;
 8001b1a:	e009      	b.n	8001b30 <bmi08g_set_int_config+0x58>
            case BMI08X_GYRO_INT_FIFO_WM:
            case BMI08X_GYRO_INT_FIFO_FULL:

                /* FIFO interrupt */
                rslt = set_fifo_int(int_config, dev);
 8001b1c:	6839      	ldr	r1, [r7, #0]
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f94c 	bl	8001dbc <set_fifo_int>
 8001b24:	4603      	mov	r3, r0
 8001b26:	73fb      	strb	r3, [r7, #15]
                break;
 8001b28:	e002      	b.n	8001b30 <bmi08g_set_int_config+0x58>

            default:
                rslt = BMI08X_E_INVALID_CONFIG;
 8001b2a:	23f8      	movs	r3, #248	; 0xf8
 8001b2c:	73fb      	strb	r3, [r7, #15]
                break;
 8001b2e:	bf00      	nop
        switch (int_config->int_type)
 8001b30:	e001      	b.n	8001b36 <bmi08g_set_int_config+0x5e>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001b32:	23ff      	movs	r3, #255	; 0xff
 8001b34:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <bmi08g_get_data_int_status>:

/*!
 * @brief This internal API gets gyro data ready interrupt status
 */
int8_t bmi08g_get_data_int_status(uint8_t *int_status, struct bmi08x_dev *dev)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t status = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73bb      	strb	r3, [r7, #14]

    if (int_status != NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d010      	beq.n	8001b78 <bmi08g_get_data_int_status+0x36>
    {
        rslt = bmi08g_get_regs(BMI08X_REG_GYRO_INT_STAT_1, &status, 1, dev);
 8001b56:	f107 010e 	add.w	r1, r7, #14
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	200a      	movs	r0, #10
 8001b60:	f7ff fe1c 	bl	800179c <bmi08g_get_regs>
 8001b64:	4603      	mov	r3, r0
 8001b66:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI08X_OK)
 8001b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <bmi08g_get_data_int_status+0x3a>
        {
            (*int_status) = status;
 8001b70:	7bba      	ldrb	r2, [r7, #14]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	701a      	strb	r2, [r3, #0]
 8001b76:	e001      	b.n	8001b7c <bmi08g_get_data_int_status+0x3a>
        }
    }
    else
    {
        rslt = BMI08X_E_NULL_PTR;
 8001b78:	23ff      	movs	r3, #255	; 0xff
 8001b7a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3710      	adds	r7, #16
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <null_ptr_check>:
/*!
 * @brief This API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi08x_dev *dev)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00f      	beq.n	8001bb6 <null_ptr_check+0x2e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <null_ptr_check+0x2e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d007      	beq.n	8001bb6 <null_ptr_check+0x2e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <null_ptr_check+0x2e>
        (dev->intf_ptr_gyro == NULL))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL) ||
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <null_ptr_check+0x34>
    {
        /* Device structure pointer is not valid */
        rslt = BMI08X_E_NULL_PTR;
 8001bb6:	23ff      	movs	r3, #255	; 0xff
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e001      	b.n	8001bc0 <null_ptr_check+0x38>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI08X_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <get_regs>:

/*!
 * @brief This API reads the data from the given register address of gyro sensor.
 */
static int8_t get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001bd0:	b590      	push	{r4, r7, lr}
 8001bd2:	b087      	sub	sp, #28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	4603      	mov	r3, r0
 8001bde:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	75fb      	strb	r3, [r7, #23]

    if (dev->intf == BMI08X_SPI_INTF)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	7b1b      	ldrb	r3, [r3, #12]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d103      	bne.n	8001bf4 <get_regs+0x24>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr | BMI08X_SPI_RD_MASK);
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bf2:	73fb      	strb	r3, [r7, #15]
    }

    /* Read gyro register */
    dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	6a1c      	ldr	r4, [r3, #32]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	7bf8      	ldrb	r0, [r7, #15]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	47a0      	blx	r4
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <get_regs+0x4c>
    {
        /* Updating the error */
        rslt = BMI08X_E_COM_FAIL;
 8001c18:	23fe      	movs	r3, #254	; 0xfe
 8001c1a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001c1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	371c      	adds	r7, #28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd90      	pop	{r4, r7, pc}

08001c28 <set_regs>:

/*!
 * @brief This API writes the given data to the register address of gyro sensor.
 */
static int8_t set_regs(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, struct bmi08x_dev *dev)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	4603      	mov	r3, r0
 8001c36:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI08X_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	75bb      	strb	r3, [r7, #22]

    if (dev->intf == BMI08X_SPI_INTF)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	7b1b      	ldrb	r3, [r3, #12]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d103      	bne.n	8001c50 <set_regs+0x28>
    {
        /* Configuring reg_addr for SPI Interface */
        reg_addr = (reg_addr & BMI08X_SPI_WR_MASK);
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c4e:	73fb      	strb	r3, [r7, #15]
    }

    /* SPI write requires to set The MSB of reg_addr as 0
     * but in default the MSB is always 0
     */
    if (len == 1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d113      	bne.n	8001c7e <set_regs+0x56>
    {
        dev->intf_rslt = dev->write(reg_addr, reg_data, len, dev->intf_ptr_gyro);
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	7bf8      	ldrb	r0, [r7, #15]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	68b9      	ldr	r1, [r7, #8]
 8001c64:	47a0      	blx	r4
 8001c66:	4603      	mov	r3, r0
 8001c68:	461a      	mov	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <set_regs+0x56>
        {
            /* Failure case */
            rslt = BMI08X_E_COM_FAIL;
 8001c7a:	23fe      	movs	r3, #254	; 0xfe
 8001c7c:	75fb      	strb	r3, [r7, #23]

    /* Burst write is not allowed thus we split burst case write
     * into single byte writes Thus user can write multiple bytes
     * with ease
     */
    if (len > 1)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d923      	bls.n	8001ccc <set_regs+0xa4>
    {
        for (count = 0; count < len; count++)
 8001c84:	2300      	movs	r3, #0
 8001c86:	75bb      	strb	r3, [r7, #22]
 8001c88:	e01c      	b.n	8001cc4 <set_regs+0x9c>
        {
            dev->intf_rslt = dev->write(reg_addr, &reg_data[count], 1, dev->intf_ptr_gyro);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001c8e:	7dbb      	ldrb	r3, [r7, #22]
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	18d1      	adds	r1, r2, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	7bf8      	ldrb	r0, [r7, #15]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	47a0      	blx	r4
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

            reg_addr++;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	3301      	adds	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]

            if (dev->intf_rslt != BMI08X_INTF_RET_SUCCESS)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f993 302c 	ldrsb.w	r3, [r3, #44]	; 0x2c
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <set_regs+0x96>
            {
                /* Failure case */
                rslt = BMI08X_E_COM_FAIL;
 8001cb8:	23fe      	movs	r3, #254	; 0xfe
 8001cba:	75fb      	strb	r3, [r7, #23]
                break;
 8001cbc:	e006      	b.n	8001ccc <set_regs+0xa4>
        for (count = 0; count < len; count++)
 8001cbe:	7dbb      	ldrb	r3, [r7, #22]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	75bb      	strb	r3, [r7, #22]
 8001cc4:	7dbb      	ldrb	r3, [r7, #22]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d8de      	bhi.n	8001c8a <set_regs+0x62>
            }
        }
    }

    return rslt;
 8001ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd90      	pop	{r4, r7, pc}

08001cd8 <set_gyro_data_ready_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_gyro_data_ready_int(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	81bb      	strh	r3, [r7, #12]

    /* read interrupt map register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8001ce6:	f107 010c 	add.w	r1, r7, #12
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2201      	movs	r2, #1
 8001cee:	2018      	movs	r0, #24
 8001cf0:	f7ff ff6e 	bl	8001bd0 <get_regs>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d157      	bne.n	8001db0 <set_gyro_data_ready_int+0xd8>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	791b      	ldrb	r3, [r3, #4]
 8001d04:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <set_gyro_data_ready_int+0x3c>
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d00f      	beq.n	8001d32 <set_gyro_data_ready_int+0x5a>
 8001d12:	e01b      	b.n	8001d4c <set_gyro_data_ready_int+0x74>
        {
            case BMI08X_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS_POS_0(data[0], BMI08X_GYRO_INT3_MAP, conf);
 8001d14:	7b3b      	ldrb	r3, [r7, #12]
 8001d16:	b25b      	sxtb	r3, r3
 8001d18:	f023 0301 	bic.w	r3, r3, #1
 8001d1c:	b25a      	sxtb	r2, r3
 8001d1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	b25b      	sxtb	r3, r3
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	b25b      	sxtb	r3, r3
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	733b      	strb	r3, [r7, #12]
                break;
 8001d30:	e00f      	b.n	8001d52 <set_gyro_data_ready_int+0x7a>

            case BMI08X_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_INT4_MAP, conf);
 8001d32:	7b3b      	ldrb	r3, [r7, #12]
 8001d34:	b25b      	sxtb	r3, r3
 8001d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d3a:	b25a      	sxtb	r2, r3
 8001d3c:	7bbb      	ldrb	r3, [r7, #14]
 8001d3e:	01db      	lsls	r3, r3, #7
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b25b      	sxtb	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	733b      	strb	r3, [r7, #12]
                break;
 8001d4a:	e002      	b.n	8001d52 <set_gyro_data_ready_int+0x7a>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8001d4c:	23fb      	movs	r3, #251	; 0xfb
 8001d4e:	73fb      	strb	r3, [r7, #15]
                break;
 8001d50:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d12a      	bne.n	8001db0 <set_gyro_data_ready_int+0xd8>
        {
            /*condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08X_GYRO_MAP_DRDY_TO_BOTH_INT3_INT4)
 8001d5a:	7b3b      	ldrb	r3, [r7, #12]
 8001d5c:	f003 0381 	and.w	r3, r3, #129	; 0x81
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d002      	beq.n	8001d6a <set_gyro_data_ready_int+0x92>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08X_GYRO_DRDY_INT_ENABLE_VAL;
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	737b      	strb	r3, [r7, #13]
 8001d68:	e001      	b.n	8001d6e <set_gyro_data_ready_int+0x96>
            }
            else
            {
                data[1] = BMI08X_GYRO_DRDY_INT_DISABLE_VAL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8001d6e:	f107 010c 	add.w	r1, r7, #12
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	2201      	movs	r2, #1
 8001d76:	2018      	movs	r0, #24
 8001d78:	f7ff fd3b 	bl	80017f2 <bmi08g_set_regs>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d113      	bne.n	8001db0 <set_gyro_data_ready_int+0xd8>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 8001d88:	6839      	ldr	r1, [r7, #0]
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f88c 	bl	8001ea8 <set_int_pin_config>
 8001d90:	4603      	mov	r3, r0
 8001d92:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <set_gyro_data_ready_int+0xd8>
                {
                    /* Write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	1c59      	adds	r1, r3, #1
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	2015      	movs	r0, #21
 8001da8:	f7ff fd23 	bl	80017f2 <bmi08g_set_regs>
 8001dac:	4603      	mov	r3, r0
 8001dae:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <set_fifo_int>:

/*!
 * @brief This API sets the data ready interrupt for gyro sensor.
 */
static int8_t set_fifo_int(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t conf, data[2] = { 0 };
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	81bb      	strh	r3, [r7, #12]

    /* Read interrupt map register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8001dca:	f107 010c 	add.w	r1, r7, #12
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	2018      	movs	r0, #24
 8001dd4:	f7ff fefc 	bl	8001bd0 <get_regs>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d15b      	bne.n	8001e9c <set_fifo_int+0xe0>
    {
        conf = int_config->int_pin_cfg.enable_int_pin;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	791b      	ldrb	r3, [r3, #4]
 8001de8:	73bb      	strb	r3, [r7, #14]

        switch (int_config->int_channel)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <set_fifo_int+0x3c>
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d010      	beq.n	8001e18 <set_fifo_int+0x5c>
 8001df6:	e01f      	b.n	8001e38 <set_fifo_int+0x7c>
        {
            case BMI08X_INT_CHANNEL_3:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_FIFO_INT3, conf);
 8001df8:	7b3b      	ldrb	r3, [r7, #12]
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	f023 0304 	bic.w	r3, r3, #4
 8001e00:	b25a      	sxtb	r2, r3
 8001e02:	7bbb      	ldrb	r3, [r7, #14]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	b25b      	sxtb	r3, r3
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	b25b      	sxtb	r3, r3
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	733b      	strb	r3, [r7, #12]
                break;
 8001e16:	e012      	b.n	8001e3e <set_fifo_int+0x82>

            case BMI08X_INT_CHANNEL_4:

                /* Data to enable new data ready interrupt */
                data[0] = BMI08X_SET_BITS(data[0], BMI08X_GYRO_FIFO_INT4, conf);
 8001e18:	7b3b      	ldrb	r3, [r7, #12]
 8001e1a:	b25b      	sxtb	r3, r3
 8001e1c:	f023 0320 	bic.w	r3, r3, #32
 8001e20:	b25a      	sxtb	r2, r3
 8001e22:	7bbb      	ldrb	r3, [r7, #14]
 8001e24:	015b      	lsls	r3, r3, #5
 8001e26:	b25b      	sxtb	r3, r3
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	b25b      	sxtb	r3, r3
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	733b      	strb	r3, [r7, #12]
                break;
 8001e36:	e002      	b.n	8001e3e <set_fifo_int+0x82>

            default:
                rslt = BMI08X_E_INVALID_INPUT;
 8001e38:	23fb      	movs	r3, #251	; 0xfb
 8001e3a:	73fb      	strb	r3, [r7, #15]
                break;
 8001e3c:	bf00      	nop
        }

        if (rslt == BMI08X_OK)
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d12a      	bne.n	8001e9c <set_fifo_int+0xe0>
        {
            /* Condition to check disabling the interrupt in single channel when both
             * interrupts channels are enabled*/
            if (data[0] & BMI08X_GYRO_MAP_FIFO_BOTH_INT3_INT4)
 8001e46:	7b3b      	ldrb	r3, [r7, #12]
 8001e48:	f003 0324 	and.w	r3, r3, #36	; 0x24
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <set_fifo_int+0x9a>
            {
                /* Updating the data */
                /* Data to enable new data ready interrupt */
                data[1] = BMI08X_GYRO_FIFO_INT_ENABLE_VAL;
 8001e50:	2340      	movs	r3, #64	; 0x40
 8001e52:	737b      	strb	r3, [r7, #13]
 8001e54:	e001      	b.n	8001e5a <set_fifo_int+0x9e>
            }
            else
            {
                data[1] = BMI08X_GYRO_FIFO_INT_DISABLE_VAL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	737b      	strb	r3, [r7, #13]
            }

            /* write data to interrupt map register */
            rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data[0], 1, dev);
 8001e5a:	f107 010c 	add.w	r1, r7, #12
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2201      	movs	r2, #1
 8001e62:	2018      	movs	r0, #24
 8001e64:	f7ff fcc5 	bl	80017f2 <bmi08g_set_regs>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	73fb      	strb	r3, [r7, #15]

            if (rslt == BMI08X_OK)
 8001e6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d113      	bne.n	8001e9c <set_fifo_int+0xe0>
            {
                /* Configure interrupt pin */
                rslt = set_int_pin_config(int_config, dev);
 8001e74:	6839      	ldr	r1, [r7, #0]
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f816 	bl	8001ea8 <set_int_pin_config>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73fb      	strb	r3, [r7, #15]

                if (rslt == BMI08X_OK)
 8001e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d109      	bne.n	8001e9c <set_fifo_int+0xe0>
                {
                    /* write data to interrupt control register */
                    rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT_CTRL, &data[1], 1, dev);
 8001e88:	f107 030c 	add.w	r3, r7, #12
 8001e8c:	1c59      	adds	r1, r3, #1
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2201      	movs	r2, #1
 8001e92:	2015      	movs	r0, #21
 8001e94:	f7ff fcad 	bl	80017f2 <bmi08g_set_regs>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <set_int_pin_config>:
/*!
 * @brief This API configures the pins which fire the
 * interrupt signal when any interrupt occurs.
 */
static int8_t set_int_pin_config(const struct bmi08x_gyro_int_channel_cfg *int_config, struct bmi08x_dev *dev)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read interrupt configuration register */
    rslt = get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 8001eb2:	f107 010e 	add.w	r1, r7, #14
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	2016      	movs	r0, #22
 8001ebc:	f7ff fe88 	bl	8001bd0 <get_regs>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	73fb      	strb	r3, [r7, #15]

    if (rslt == BMI08X_OK)
 8001ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d150      	bne.n	8001f6e <set_int_pin_config+0xc6>
    {
        switch (int_config->int_channel)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <set_int_pin_config+0x32>
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d020      	beq.n	8001f1a <set_int_pin_config+0x72>
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
                break;

            default:
                break;
 8001ed8:	e040      	b.n	8001f5c <set_int_pin_config+0xb4>
                data = BMI08X_SET_BITS_POS_0(data, BMI08X_GYRO_INT3_LVL, int_config->int_pin_cfg.lvl);
 8001eda:	7bbb      	ldrb	r3, [r7, #14]
 8001edc:	b25b      	sxtb	r3, r3
 8001ede:	f023 0301 	bic.w	r3, r3, #1
 8001ee2:	b25a      	sxtb	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	789b      	ldrb	r3, [r3, #2]
 8001ee8:	b25b      	sxtb	r3, r3
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	b25b      	sxtb	r3, r3
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	b25b      	sxtb	r3, r3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	73bb      	strb	r3, [r7, #14]
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT3_OD, int_config->int_pin_cfg.output_mode);
 8001ef8:	7bbb      	ldrb	r3, [r7, #14]
 8001efa:	b25b      	sxtb	r3, r3
 8001efc:	f023 0302 	bic.w	r3, r3, #2
 8001f00:	b25a      	sxtb	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	78db      	ldrb	r3, [r3, #3]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	b25b      	sxtb	r3, r3
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	b25b      	sxtb	r3, r3
 8001f10:	4313      	orrs	r3, r2
 8001f12:	b25b      	sxtb	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	73bb      	strb	r3, [r7, #14]
                break;
 8001f18:	e020      	b.n	8001f5c <set_int_pin_config+0xb4>
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_LVL, int_config->int_pin_cfg.lvl);
 8001f1a:	7bbb      	ldrb	r3, [r7, #14]
 8001f1c:	b25b      	sxtb	r3, r3
 8001f1e:	f023 0304 	bic.w	r3, r3, #4
 8001f22:	b25a      	sxtb	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	789b      	ldrb	r3, [r3, #2]
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	b25b      	sxtb	r3, r3
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	b25b      	sxtb	r3, r3
 8001f32:	4313      	orrs	r3, r2
 8001f34:	b25b      	sxtb	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	73bb      	strb	r3, [r7, #14]
                data = BMI08X_SET_BITS(data, BMI08X_GYRO_INT4_OD, int_config->int_pin_cfg.output_mode);
 8001f3a:	7bbb      	ldrb	r3, [r7, #14]
 8001f3c:	b25b      	sxtb	r3, r3
 8001f3e:	f023 0308 	bic.w	r3, r3, #8
 8001f42:	b25a      	sxtb	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	78db      	ldrb	r3, [r3, #3]
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	b25b      	sxtb	r3, r3
 8001f52:	4313      	orrs	r3, r2
 8001f54:	b25b      	sxtb	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	73bb      	strb	r3, [r7, #14]
                break;
 8001f5a:	bf00      	nop
        }

        /* write to interrupt configuration register */
        rslt = bmi08g_set_regs(BMI08X_REG_GYRO_INT3_INT4_IO_CONF, &data, 1, dev);
 8001f5c:	f107 010e 	add.w	r1, r7, #14
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2201      	movs	r2, #1
 8001f64:	2016      	movs	r0, #22
 8001f66:	f7ff fc44 	bl	80017f2 <bmi08g_set_regs>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	HAL_USART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001f84:	1d39      	adds	r1, r7, #4
 8001f86:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	4803      	ldr	r0, [pc, #12]	; (8001f9c <__io_putchar+0x20>)
 8001f8e:	f004 fcbb 	bl	8006908 <HAL_USART_Transmit>
}
 8001f92:	bf00      	nop
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200002b4 	.word	0x200002b4

08001fa0 <init_bmi08x_get_data>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t init_bmi08x_get_data(void) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
	int8_t rslt;

	rslt = bmi08a_init(&bmi08xdev);
 8001fa6:	483d      	ldr	r0, [pc, #244]	; (800209c <init_bmi08x_get_data+0xfc>)
 8001fa8:	f7fe fe4e 	bl	8000c48 <bmi08a_init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("bmi08a_init", rslt);
 8001fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	483a      	ldr	r0, [pc, #232]	; (80020a0 <init_bmi08x_get_data+0x100>)
 8001fb8:	f000 fd98 	bl	8002aec <bmi08x_error_codes_print_result>
	printf("Accel init\n\r");
 8001fbc:	4839      	ldr	r0, [pc, #228]	; (80020a4 <init_bmi08x_get_data+0x104>)
 8001fbe:	f005 fc49 	bl	8007854 <iprintf>

//	if (rslt == BMI08X_OK) {

		rslt = bmi08g_init(&bmi08xdev);
 8001fc2:	4836      	ldr	r0, [pc, #216]	; (800209c <init_bmi08x_get_data+0xfc>)
 8001fc4:	f7ff fbb8 	bl	8001738 <bmi08g_init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_init", rslt);
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4835      	ldr	r0, [pc, #212]	; (80020a8 <init_bmi08x_get_data+0x108>)
 8001fd4:	f000 fd8a 	bl	8002aec <bmi08x_error_codes_print_result>
		printf("Gyro init\n\r");
 8001fd8:	4834      	ldr	r0, [pc, #208]	; (80020ac <init_bmi08x_get_data+0x10c>)
 8001fda:	f005 fc3b 	bl	8007854 <iprintf>
//	}
	bmi08x_delay_us(5000,0);
 8001fde:	2100      	movs	r1, #0
 8001fe0:	f241 3088 	movw	r0, #5000	; 0x1388
 8001fe4:	f000 fd0a 	bl	80029fc <bmi08x_delay_us>
//        printf("Uploading config file !\n");
//        rslt = bmi08a_load_config_file(&bmi08xdev);
//        bmi08x_error_codes_print_result("bmi08a_load_config_file", rslt);
//    }

	if (rslt == BMI08X_OK) {
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d14f      	bne.n	8002090 <init_bmi08x_get_data+0xf0>
		bmi08xdev.accel_cfg.odr = BMI08X_ACCEL_ODR_1600_HZ;
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <init_bmi08x_get_data+0xfc>)
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	749a      	strb	r2, [r3, #18]

		if (bmi08xdev.variant == BMI085_VARIANT) {
 8001ff6:	4b29      	ldr	r3, [pc, #164]	; (800209c <init_bmi08x_get_data+0xfc>)
 8001ff8:	7b5b      	ldrb	r3, [r3, #13]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d103      	bne.n	8002006 <init_bmi08x_get_data+0x66>
			bmi08xdev.accel_cfg.range = BMI085_ACCEL_RANGE_16G;
 8001ffe:	4b27      	ldr	r3, [pc, #156]	; (800209c <init_bmi08x_get_data+0xfc>)
 8002000:	2203      	movs	r2, #3
 8002002:	741a      	strb	r2, [r3, #16]
 8002004:	e006      	b.n	8002014 <init_bmi08x_get_data+0x74>
		} else if (bmi08xdev.variant == BMI088_VARIANT) {
 8002006:	4b25      	ldr	r3, [pc, #148]	; (800209c <init_bmi08x_get_data+0xfc>)
 8002008:	7b5b      	ldrb	r3, [r3, #13]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d102      	bne.n	8002014 <init_bmi08x_get_data+0x74>
			bmi08xdev.accel_cfg.range = BMI088_ACCEL_RANGE_24G;
 800200e:	4b23      	ldr	r3, [pc, #140]	; (800209c <init_bmi08x_get_data+0xfc>)
 8002010:	2203      	movs	r2, #3
 8002012:	741a      	strb	r2, [r3, #16]
		}

		bmi08xdev.accel_cfg.power = BMI08X_ACCEL_PM_ACTIVE; /*user_accel_power_modes[user_bmi088_accel_low_power]; */
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <init_bmi08x_get_data+0xfc>)
 8002016:	2200      	movs	r2, #0
 8002018:	73da      	strb	r2, [r3, #15]
		bmi08xdev.accel_cfg.bw = BMI08X_ACCEL_BW_NORMAL; /* Bandwidth and OSR are same */
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <init_bmi08x_get_data+0xfc>)
 800201c:	220a      	movs	r2, #10
 800201e:	745a      	strb	r2, [r3, #17]

		rslt = bmi08a_set_power_mode(&bmi08xdev);
 8002020:	481e      	ldr	r0, [pc, #120]	; (800209c <init_bmi08x_get_data+0xfc>)
 8002022:	f7fe ffb8 	bl	8000f96 <bmi08a_set_power_mode>
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08a_set_power_mode", rslt);
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	4619      	mov	r1, r3
 8002030:	481f      	ldr	r0, [pc, #124]	; (80020b0 <init_bmi08x_get_data+0x110>)
 8002032:	f000 fd5b 	bl	8002aec <bmi08x_error_codes_print_result>

		rslt = bmi08a_set_meas_conf(&bmi08xdev);
 8002036:	4819      	ldr	r0, [pc, #100]	; (800209c <init_bmi08x_get_data+0xfc>)
 8002038:	f7fe ff20 	bl	8000e7c <bmi08a_set_meas_conf>
 800203c:	4603      	mov	r3, r0
 800203e:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08a_set_meas_conf", rslt);
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	4619      	mov	r1, r3
 8002046:	481b      	ldr	r0, [pc, #108]	; (80020b4 <init_bmi08x_get_data+0x114>)
 8002048:	f000 fd50 	bl	8002aec <bmi08x_error_codes_print_result>

		bmi08xdev.gyro_cfg.odr = BMI08X_GYRO_BW_230_ODR_2000_HZ;
 800204c:	4b13      	ldr	r3, [pc, #76]	; (800209c <init_bmi08x_get_data+0xfc>)
 800204e:	2201      	movs	r2, #1
 8002050:	759a      	strb	r2, [r3, #22]
		bmi08xdev.gyro_cfg.range = BMI08X_GYRO_RANGE_250_DPS;
 8002052:	4b12      	ldr	r3, [pc, #72]	; (800209c <init_bmi08x_get_data+0xfc>)
 8002054:	2203      	movs	r2, #3
 8002056:	751a      	strb	r2, [r3, #20]
		bmi08xdev.gyro_cfg.bw = BMI08X_GYRO_BW_230_ODR_2000_HZ;
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <init_bmi08x_get_data+0xfc>)
 800205a:	2201      	movs	r2, #1
 800205c:	755a      	strb	r2, [r3, #21]
		bmi08xdev.gyro_cfg.power = BMI08X_GYRO_PM_NORMAL;
 800205e:	4b0f      	ldr	r3, [pc, #60]	; (800209c <init_bmi08x_get_data+0xfc>)
 8002060:	2200      	movs	r2, #0
 8002062:	74da      	strb	r2, [r3, #19]

		rslt = bmi08g_set_power_mode(&bmi08xdev);
 8002064:	480d      	ldr	r0, [pc, #52]	; (800209c <init_bmi08x_get_data+0xfc>)
 8002066:	f7ff fc8c 	bl	8001982 <bmi08g_set_power_mode>
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_set_power_mode", rslt);
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	4619      	mov	r1, r3
 8002074:	4810      	ldr	r0, [pc, #64]	; (80020b8 <init_bmi08x_get_data+0x118>)
 8002076:	f000 fd39 	bl	8002aec <bmi08x_error_codes_print_result>

		rslt = bmi08g_set_meas_conf(&bmi08xdev);
 800207a:	4808      	ldr	r0, [pc, #32]	; (800209c <init_bmi08x_get_data+0xfc>)
 800207c:	f7ff fc03 	bl	8001886 <bmi08g_set_meas_conf>
 8002080:	4603      	mov	r3, r0
 8002082:	71fb      	strb	r3, [r7, #7]
		bmi08x_error_codes_print_result("bmi08g_set_meas_conf", rslt);
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	4619      	mov	r1, r3
 800208a:	480c      	ldr	r0, [pc, #48]	; (80020bc <init_bmi08x_get_data+0x11c>)
 800208c:	f000 fd2e 	bl	8002aec <bmi08x_error_codes_print_result>
	}

	return rslt;
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000304 	.word	0x20000304
 80020a0:	0800a740 	.word	0x0800a740
 80020a4:	0800a74c 	.word	0x0800a74c
 80020a8:	0800a75c 	.word	0x0800a75c
 80020ac:	0800a768 	.word	0x0800a768
 80020b0:	0800a774 	.word	0x0800a774
 80020b4:	0800a78c 	.word	0x0800a78c
 80020b8:	0800a7a4 	.word	0x0800a7a4
 80020bc:	0800a7bc 	.word	0x0800a7bc

080020c0 <enable_bmi08x_interrupt>:
 *  @param[in] void
 *
 *  @return void
 *
 */
static int8_t enable_bmi08x_interrupt() {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
	int8_t rslt;
	uint8_t data = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	71bb      	strb	r3, [r7, #6]

	/* Set accel interrupt pin configuration */
	accel_int_config.int_channel = BMI08X_INT_CHANNEL_1;
 80020ca:	4b27      	ldr	r3, [pc, #156]	; (8002168 <enable_bmi08x_interrupt+0xa8>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
	accel_int_config.int_type = BMI08X_ACCEL_INT_DATA_RDY;
 80020d0:	4b25      	ldr	r3, [pc, #148]	; (8002168 <enable_bmi08x_interrupt+0xa8>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	705a      	strb	r2, [r3, #1]
	accel_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 80020d6:	4b24      	ldr	r3, [pc, #144]	; (8002168 <enable_bmi08x_interrupt+0xa8>)
 80020d8:	2200      	movs	r2, #0
 80020da:	70da      	strb	r2, [r3, #3]
	accel_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <enable_bmi08x_interrupt+0xa8>)
 80020de:	2201      	movs	r2, #1
 80020e0:	709a      	strb	r2, [r3, #2]
	accel_int_config.int_pin_cfg.enable_int_pin = BMI08X_ENABLE;
 80020e2:	4b21      	ldr	r3, [pc, #132]	; (8002168 <enable_bmi08x_interrupt+0xa8>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	711a      	strb	r2, [r3, #4]

	/* Enable accel data ready interrupt channel */
	rslt = bmi08a_set_int_config(
 80020e8:	4920      	ldr	r1, [pc, #128]	; (800216c <enable_bmi08x_interrupt+0xac>)
 80020ea:	481f      	ldr	r0, [pc, #124]	; (8002168 <enable_bmi08x_interrupt+0xa8>)
 80020ec:	f7ff f808 	bl	8001100 <bmi08a_set_int_config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	71fb      	strb	r3, [r7, #7]
			(const struct bmi08x_accel_int_channel_cfg*) &accel_int_config,
			&bmi08xdev);
	bmi08x_error_codes_print_result("bmi08a_set_int_config", rslt);
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	4619      	mov	r1, r3
 80020fa:	481d      	ldr	r0, [pc, #116]	; (8002170 <enable_bmi08x_interrupt+0xb0>)
 80020fc:	f000 fcf6 	bl	8002aec <bmi08x_error_codes_print_result>

	if (rslt == BMI08X_OK) {
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d128      	bne.n	800215a <enable_bmi08x_interrupt+0x9a>
		/* Set gyro interrupt pin configuration */
		gyro_int_config.int_channel = BMI08X_INT_CHANNEL_3;
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <enable_bmi08x_interrupt+0xb4>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
		gyro_int_config.int_type = BMI08X_GYRO_INT_DATA_RDY;
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <enable_bmi08x_interrupt+0xb4>)
 8002110:	2200      	movs	r2, #0
 8002112:	705a      	strb	r2, [r3, #1]
		gyro_int_config.int_pin_cfg.output_mode = BMI08X_INT_MODE_PUSH_PULL;
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <enable_bmi08x_interrupt+0xb4>)
 8002116:	2200      	movs	r2, #0
 8002118:	70da      	strb	r2, [r3, #3]
		gyro_int_config.int_pin_cfg.lvl = BMI08X_INT_ACTIVE_HIGH;
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <enable_bmi08x_interrupt+0xb4>)
 800211c:	2201      	movs	r2, #1
 800211e:	709a      	strb	r2, [r3, #2]
		gyro_int_config.int_pin_cfg.enable_int_pin = BMI08X_ENABLE;
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <enable_bmi08x_interrupt+0xb4>)
 8002122:	2201      	movs	r2, #1
 8002124:	711a      	strb	r2, [r3, #4]

		/* Enable gyro data ready interrupt channel */
		rslt = bmi08g_set_int_config(
 8002126:	4911      	ldr	r1, [pc, #68]	; (800216c <enable_bmi08x_interrupt+0xac>)
 8002128:	4812      	ldr	r0, [pc, #72]	; (8002174 <enable_bmi08x_interrupt+0xb4>)
 800212a:	f7ff fcd5 	bl	8001ad8 <bmi08g_set_int_config>
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
				(const struct bmi08x_gyro_int_channel_cfg*) &gyro_int_config,
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_set_int_config", rslt);
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	4619      	mov	r1, r3
 8002138:	480f      	ldr	r0, [pc, #60]	; (8002178 <enable_bmi08x_interrupt+0xb8>)
 800213a:	f000 fcd7 	bl	8002aec <bmi08x_error_codes_print_result>

		rslt = bmi08g_get_regs(BMI08X_REG_GYRO_INT3_INT4_IO_MAP, &data, 1,
 800213e:	1db9      	adds	r1, r7, #6
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <enable_bmi08x_interrupt+0xac>)
 8002142:	2201      	movs	r2, #1
 8002144:	2018      	movs	r0, #24
 8002146:	f7ff fb29 	bl	800179c <bmi08g_get_regs>
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
				&bmi08xdev);
		bmi08x_error_codes_print_result("bmi08g_get_regs", rslt);
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	4619      	mov	r1, r3
 8002154:	4809      	ldr	r0, [pc, #36]	; (800217c <enable_bmi08x_interrupt+0xbc>)
 8002156:	f000 fcc9 	bl	8002aec <bmi08x_error_codes_print_result>
	}

	return rslt;
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000334 	.word	0x20000334
 800216c:	20000304 	.word	0x20000304
 8002170:	0800a924 	.word	0x0800a924
 8002174:	2000033c 	.word	0x2000033c
 8002178:	0800a93c 	.word	0x0800a93c
 800217c:	0800a954 	.word	0x0800a954

08002180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002184:	b08f      	sub	sp, #60	; 0x3c
 8002186:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002188:	f000 ffd1 	bl	800312e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800218c:	f000 f9a4 	bl	80024d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002190:	f000 fab4 	bl	80026fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002194:	f000 fa8e 	bl	80026b4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8002198:	f000 fa00 	bl	800259c <MX_SPI1_Init>
  MX_TIM2_Init();
 800219c:	f000 fa3c 	bl	8002618 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	int8_t rslt;
	float x = 0.0, y = 0.0, z = 0.0;
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
	int times_to_read = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
	int status = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	603b      	str	r3, [r7, #0]
	 *           For SPI : BMI08X_SPI_INTF
	 * Sensor variant given as parameter
	 *          For BMI085 : BMI085_VARIANT
	 *          For BMI088 : BMI088_VARIANT
	 */
	HAL_TIM_Base_Start(&htim2);
 80021ba:	48b0      	ldr	r0, [pc, #704]	; (800247c <main+0x2fc>)
 80021bc:	f003 ff1a 	bl	8005ff4 <HAL_TIM_Base_Start>
	//	HAL_GPIO_WritePin(GPIOB, LED_Pin, GPIO_PIN_SET);
	printf("Hello\n\r");
 80021c0:	48af      	ldr	r0, [pc, #700]	; (8002480 <main+0x300>)
 80021c2:	f005 fb47 	bl	8007854 <iprintf>
//  	init_handle(&bmi085_handle);

// This is where we would set the CS for accel/gyro, urrently have the .ioc just have the GPIO pins output high
	rslt = bmi08x_interface_init(&bmi08xdev, BMI08X_SPI_INTF, BMI088_VARIANT);
 80021c6:	2201      	movs	r2, #1
 80021c8:	2101      	movs	r1, #1
 80021ca:	48ae      	ldr	r0, [pc, #696]	; (8002484 <main+0x304>)
 80021cc:	f000 fc34 	bl	8002a38 <bmi08x_interface_init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("bmi08x_interface_init", rslt);
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	4619      	mov	r1, r3
 80021da:	48ab      	ldr	r0, [pc, #684]	; (8002488 <main+0x308>)
 80021dc:	f000 fc86 	bl	8002aec <bmi08x_error_codes_print_result>

//  	printf("Did we make it?\n\r");
	bmi08a_soft_reset(&bmi08xdev);
 80021e0:	48a8      	ldr	r0, [pc, #672]	; (8002484 <main+0x304>)
 80021e2:	f7fe fe14 	bl	8000e0e <bmi08a_soft_reset>
	/* Initialize the sensors */
	if(rslt == BMI08X_OK){

	}
	rslt = init_bmi08x_get_data(); // An API function that has very few edits from me, should just work if wired properly and spi read/write works
 80021e6:	f7ff fedb 	bl	8001fa0 <init_bmi08x_get_data>
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("init_bmi08x_get_data", rslt);
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	4619      	mov	r1, r3
 80021f4:	48a5      	ldr	r0, [pc, #660]	; (800248c <main+0x30c>)
 80021f6:	f000 fc79 	bl	8002aec <bmi08x_error_codes_print_result>
	/* Enable data ready interrupts */
	//	enable_bmi08x_data_synchronization_interrupt();
	//	uint32_t start_time = HAL_GetTick();
	rslt = enable_bmi08x_interrupt();
 80021fa:	f7ff ff61 	bl	80020c0 <enable_bmi08x_interrupt>
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
	bmi08x_error_codes_print_result("enable_bmi08x_interrupt", rslt);
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	4619      	mov	r1, r3
 8002208:	48a1      	ldr	r0, [pc, #644]	; (8002490 <main+0x310>)
 800220a:	f000 fc6f 	bl	8002aec <bmi08x_error_codes_print_result>

	printf("Accel data range : 16G for BMI085 and 24G for BMI088\n\r");
 800220e:	48a1      	ldr	r0, [pc, #644]	; (8002494 <main+0x314>)
 8002210:	f005 fb20 	bl	8007854 <iprintf>
	printf("Gyro data range : 250 dps for BMI085 and BMI088\n\n\r");
 8002214:	48a0      	ldr	r0, [pc, #640]	; (8002498 <main+0x318>)
 8002216:	f005 fb1d 	bl	8007854 <iprintf>

	if (rslt == BMI08X_OK) {
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f040 8125 	bne.w	800246e <main+0x2ee>
		if (bmi08xdev.accel_cfg.power == BMI08X_ACCEL_PM_ACTIVE) {
 8002224:	4b97      	ldr	r3, [pc, #604]	; (8002484 <main+0x304>)
 8002226:	7bdb      	ldrb	r3, [r3, #15]
 8002228:	2b00      	cmp	r3, #0
 800222a:	f040 80a0 	bne.w	800236e <main+0x1ee>
			printf("\nACCEL DATA\n\r");
 800222e:	489b      	ldr	r0, [pc, #620]	; (800249c <main+0x31c>)
 8002230:	f005 fb10 	bl	8007854 <iprintf>
			printf("Accel data in LSB units and Gravity data in m/s^2\n\r");
 8002234:	489a      	ldr	r0, [pc, #616]	; (80024a0 <main+0x320>)
 8002236:	f005 fb0d 	bl	8007854 <iprintf>
			printf("Accel data range : 16G for BMI085 and 24G for BMI088\n\n\r");
 800223a:	489a      	ldr	r0, [pc, #616]	; (80024a4 <main+0x324>)
 800223c:	f005 fb0a 	bl	8007854 <iprintf>

			printf(
 8002240:	4899      	ldr	r0, [pc, #612]	; (80024a8 <main+0x328>)
 8002242:	f005 fb07 	bl	8007854 <iprintf>
					"Sample_Count, Acc_Raw_X, Acc_Raw_Y, Acc_Raw_Z, Acc_ms2_X, Acc_ms2_Y, Acc_ms2_Z\n\r");

			while (1) {
				rslt = bmi08a_get_data_int_status(&status, &bmi08xdev);
 8002246:	463b      	mov	r3, r7
 8002248:	498e      	ldr	r1, [pc, #568]	; (8002484 <main+0x304>)
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe ffaa 	bl	80011a4 <bmi08a_get_data_int_status>
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]
				bmi08x_error_codes_print_result("bmi08a_get_data_int_status",
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	4619      	mov	r1, r3
 800225a:	4894      	ldr	r0, [pc, #592]	; (80024ac <main+0x32c>)
 800225c:	f000 fc46 	bl	8002aec <bmi08x_error_codes_print_result>
						rslt);

				if (status & BMI08X_ACCEL_DATA_READY_INT) {
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002266:	2b00      	cmp	r3, #0
 8002268:	d07b      	beq.n	8002362 <main+0x1e2>
					rslt = bmi08a_get_data(&bmi08x_accel, &bmi08xdev);
 800226a:	4986      	ldr	r1, [pc, #536]	; (8002484 <main+0x304>)
 800226c:	4890      	ldr	r0, [pc, #576]	; (80024b0 <main+0x330>)
 800226e:	f7fe feeb 	bl	8001048 <bmi08a_get_data>
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
					bmi08x_error_codes_print_result("bmi08a_get_data", rslt);
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	4619      	mov	r1, r3
 800227c:	488d      	ldr	r0, [pc, #564]	; (80024b4 <main+0x334>)
 800227e:	f000 fc35 	bl	8002aec <bmi08x_error_codes_print_result>

					if (bmi08xdev.variant == BMI085_VARIANT) {
 8002282:	4b80      	ldr	r3, [pc, #512]	; (8002484 <main+0x304>)
 8002284:	7b5b      	ldrb	r3, [r3, #13]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11e      	bne.n	80022c8 <main+0x148>
						/* Converting lsb to meter per second squared for 16 bit accelerometer at 16G range. */
						x = lsb_to_mps2(bmi08x_accel.x, 4, 16);
 800228a:	4b89      	ldr	r3, [pc, #548]	; (80024b0 <main+0x330>)
 800228c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002290:	2210      	movs	r2, #16
 8002292:	2104      	movs	r1, #4
 8002294:	4618      	mov	r0, r3
 8002296:	f000 faaf 	bl	80027f8 <lsb_to_mps2>
 800229a:	ed87 0a05 	vstr	s0, [r7, #20]
						y = lsb_to_mps2(bmi08x_accel.y, 4, 16);
 800229e:	4b84      	ldr	r3, [pc, #528]	; (80024b0 <main+0x330>)
 80022a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022a4:	2210      	movs	r2, #16
 80022a6:	2104      	movs	r1, #4
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 faa5 	bl	80027f8 <lsb_to_mps2>
 80022ae:	ed87 0a04 	vstr	s0, [r7, #16]
						z = lsb_to_mps2(bmi08x_accel.z, 4, 16);
 80022b2:	4b7f      	ldr	r3, [pc, #508]	; (80024b0 <main+0x330>)
 80022b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022b8:	2210      	movs	r2, #16
 80022ba:	2104      	movs	r1, #4
 80022bc:	4618      	mov	r0, r3
 80022be:	f000 fa9b 	bl	80027f8 <lsb_to_mps2>
 80022c2:	ed87 0a03 	vstr	s0, [r7, #12]
 80022c6:	e021      	b.n	800230c <main+0x18c>
					} else if (bmi08xdev.variant == BMI088_VARIANT) {
 80022c8:	4b6e      	ldr	r3, [pc, #440]	; (8002484 <main+0x304>)
 80022ca:	7b5b      	ldrb	r3, [r3, #13]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d11d      	bne.n	800230c <main+0x18c>
						/* Converting lsb to meter per second squared for 16 bit accelerometer at 24G range. */
						x = lsb_to_mps2(bmi08x_accel.x, 24, 16);
 80022d0:	4b77      	ldr	r3, [pc, #476]	; (80024b0 <main+0x330>)
 80022d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d6:	2210      	movs	r2, #16
 80022d8:	2118      	movs	r1, #24
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fa8c 	bl	80027f8 <lsb_to_mps2>
 80022e0:	ed87 0a05 	vstr	s0, [r7, #20]
						y = lsb_to_mps2(bmi08x_accel.y, 24, 16);
 80022e4:	4b72      	ldr	r3, [pc, #456]	; (80024b0 <main+0x330>)
 80022e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022ea:	2210      	movs	r2, #16
 80022ec:	2118      	movs	r1, #24
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fa82 	bl	80027f8 <lsb_to_mps2>
 80022f4:	ed87 0a04 	vstr	s0, [r7, #16]
						z = lsb_to_mps2(bmi08x_accel.z, 24, 16);
 80022f8:	4b6d      	ldr	r3, [pc, #436]	; (80024b0 <main+0x330>)
 80022fa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80022fe:	2210      	movs	r2, #16
 8002300:	2118      	movs	r1, #24
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fa78 	bl	80027f8 <lsb_to_mps2>
 8002308:	ed87 0a03 	vstr	s0, [r7, #12]
					}

					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
							times_to_read, bmi08x_accel.x, bmi08x_accel.y,
 800230c:	4b68      	ldr	r3, [pc, #416]	; (80024b0 <main+0x330>)
 800230e:	f9b3 3000 	ldrsh.w	r3, [r3]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 8002312:	469a      	mov	sl, r3
							times_to_read, bmi08x_accel.x, bmi08x_accel.y,
 8002314:	4b66      	ldr	r3, [pc, #408]	; (80024b0 <main+0x330>)
 8002316:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 800231a:	469b      	mov	fp, r3
							bmi08x_accel.z, x, y, z);
 800231c:	4b64      	ldr	r3, [pc, #400]	; (80024b0 <main+0x330>)
 800231e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 8002322:	461e      	mov	r6, r3
 8002324:	6978      	ldr	r0, [r7, #20]
 8002326:	f7fe f90f 	bl	8000548 <__aeabi_f2d>
 800232a:	4604      	mov	r4, r0
 800232c:	460d      	mov	r5, r1
 800232e:	6938      	ldr	r0, [r7, #16]
 8002330:	f7fe f90a 	bl	8000548 <__aeabi_f2d>
 8002334:	4680      	mov	r8, r0
 8002336:	4689      	mov	r9, r1
 8002338:	68f8      	ldr	r0, [r7, #12]
 800233a:	f7fe f905 	bl	8000548 <__aeabi_f2d>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002346:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800234a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800234e:	9600      	str	r6, [sp, #0]
 8002350:	465b      	mov	r3, fp
 8002352:	4652      	mov	r2, sl
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	4858      	ldr	r0, [pc, #352]	; (80024b8 <main+0x338>)
 8002358:	f005 fa7c 	bl	8007854 <iprintf>

					times_to_read = times_to_read + 1;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	3301      	adds	r3, #1
 8002360:	60bb      	str	r3, [r7, #8]

				}
				bmi08x_delay_us(1000,0);
 8002362:	2100      	movs	r1, #0
 8002364:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002368:	f000 fb48 	bl	80029fc <bmi08x_delay_us>
				rslt = bmi08a_get_data_int_status(&status, &bmi08xdev);
 800236c:	e76b      	b.n	8002246 <main+0xc6>
			}
		}

		if (bmi08xdev.gyro_cfg.power == BMI08X_GYRO_PM_NORMAL) {
 800236e:	4b45      	ldr	r3, [pc, #276]	; (8002484 <main+0x304>)
 8002370:	7cdb      	ldrb	r3, [r3, #19]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d17b      	bne.n	800246e <main+0x2ee>
			times_to_read = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]

			printf("\n\nGYRO DATA\n");
 800237a:	4850      	ldr	r0, [pc, #320]	; (80024bc <main+0x33c>)
 800237c:	f005 fad0 	bl	8007920 <puts>
			printf("Gyro data in LSB units and degrees per second\n\r");
 8002380:	484f      	ldr	r0, [pc, #316]	; (80024c0 <main+0x340>)
 8002382:	f005 fa67 	bl	8007854 <iprintf>
			printf("Gyro data range : 250 dps for BMI085 and BMI088\n\n\r");
 8002386:	4844      	ldr	r0, [pc, #272]	; (8002498 <main+0x318>)
 8002388:	f005 fa64 	bl	8007854 <iprintf>

			printf(
 800238c:	484d      	ldr	r0, [pc, #308]	; (80024c4 <main+0x344>)
 800238e:	f005 fa61 	bl	8007854 <iprintf>
					"Sample_Count, Gyr_Raw_X, Gyr_Raw_Y, Gyr_Raw_Z, Gyr_DPS_X, Gyr_DPS_Y, Gyr_DPS_Z\n\r");

			while (times_to_read < 10) {
 8002392:	e069      	b.n	8002468 <main+0x2e8>
				rslt = bmi08g_get_data_int_status(&status, &bmi08xdev);
 8002394:	463b      	mov	r3, r7
 8002396:	493b      	ldr	r1, [pc, #236]	; (8002484 <main+0x304>)
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fbd2 	bl	8001b42 <bmi08g_get_data_int_status>
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
				bmi08x_error_codes_print_result("bmi08g_get_data_int_status",
 80023a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a6:	4619      	mov	r1, r3
 80023a8:	4847      	ldr	r0, [pc, #284]	; (80024c8 <main+0x348>)
 80023aa:	f000 fb9f 	bl	8002aec <bmi08x_error_codes_print_result>
						rslt);

				if (status & BMI08X_GYRO_DATA_READY_INT) {
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d057      	beq.n	8002468 <main+0x2e8>
					rslt = bmi08g_get_data(&bmi08x_gyro, &bmi08xdev);
 80023b8:	4932      	ldr	r1, [pc, #200]	; (8002484 <main+0x304>)
 80023ba:	4844      	ldr	r0, [pc, #272]	; (80024cc <main+0x34c>)
 80023bc:	f7ff fb31 	bl	8001a22 <bmi08g_get_data>
 80023c0:	4603      	mov	r3, r0
 80023c2:	71fb      	strb	r3, [r7, #7]
					bmi08x_error_codes_print_result("bmi08g_get_data", rslt);
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	4619      	mov	r1, r3
 80023ca:	4841      	ldr	r0, [pc, #260]	; (80024d0 <main+0x350>)
 80023cc:	f000 fb8e 	bl	8002aec <bmi08x_error_codes_print_result>

					/* Converting lsb to degree per second for 16 bit gyro at 250 dps range. */
					x = lsb_to_dps(bmi08x_gyro.x, (float) 250, 16);
 80023d0:	4b3e      	ldr	r3, [pc, #248]	; (80024cc <main+0x34c>)
 80023d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d6:	2110      	movs	r1, #16
 80023d8:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80024d4 <main+0x354>
 80023dc:	4618      	mov	r0, r3
 80023de:	f000 fa55 	bl	800288c <lsb_to_dps>
 80023e2:	ed87 0a05 	vstr	s0, [r7, #20]
					y = lsb_to_dps(bmi08x_gyro.y, (float) 250, 16);
 80023e6:	4b39      	ldr	r3, [pc, #228]	; (80024cc <main+0x34c>)
 80023e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023ec:	2110      	movs	r1, #16
 80023ee:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80024d4 <main+0x354>
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fa4a 	bl	800288c <lsb_to_dps>
 80023f8:	ed87 0a04 	vstr	s0, [r7, #16]
					z = lsb_to_dps(bmi08x_gyro.z, (float) 250, 16);
 80023fc:	4b33      	ldr	r3, [pc, #204]	; (80024cc <main+0x34c>)
 80023fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002402:	2110      	movs	r1, #16
 8002404:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80024d4 <main+0x354>
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fa3f 	bl	800288c <lsb_to_dps>
 800240e:	ed87 0a03 	vstr	s0, [r7, #12]

					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
							times_to_read, bmi08x_gyro.x, bmi08x_gyro.y,
 8002412:	4b2e      	ldr	r3, [pc, #184]	; (80024cc <main+0x34c>)
 8002414:	f9b3 3000 	ldrsh.w	r3, [r3]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 8002418:	469a      	mov	sl, r3
							times_to_read, bmi08x_gyro.x, bmi08x_gyro.y,
 800241a:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <main+0x34c>)
 800241c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 8002420:	469b      	mov	fp, r3
							bmi08x_gyro.z, x, y, z);
 8002422:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <main+0x34c>)
 8002424:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
					printf("%d, %5d, %5d, %5d, %4.2f, %4.2f, %4.2f\n\r",
 8002428:	461e      	mov	r6, r3
 800242a:	6978      	ldr	r0, [r7, #20]
 800242c:	f7fe f88c 	bl	8000548 <__aeabi_f2d>
 8002430:	4604      	mov	r4, r0
 8002432:	460d      	mov	r5, r1
 8002434:	6938      	ldr	r0, [r7, #16]
 8002436:	f7fe f887 	bl	8000548 <__aeabi_f2d>
 800243a:	4680      	mov	r8, r0
 800243c:	4689      	mov	r9, r1
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f7fe f882 	bl	8000548 <__aeabi_f2d>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800244c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002450:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8002454:	9600      	str	r6, [sp, #0]
 8002456:	465b      	mov	r3, fp
 8002458:	4652      	mov	r2, sl
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	4816      	ldr	r0, [pc, #88]	; (80024b8 <main+0x338>)
 800245e:	f005 f9f9 	bl	8007854 <iprintf>

					times_to_read = times_to_read + 1;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3301      	adds	r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
			while (times_to_read < 10) {
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b09      	cmp	r3, #9
 800246c:	dd92      	ble.n	8002394 <main+0x214>
				}
			}
		}
	}

	return 0;
 800246e:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */
////	 printf("Hello\n");
//  }
  /* USER CODE END 3 */
}
 8002470:	4618      	mov	r0, r3
 8002472:	371c      	adds	r7, #28
 8002474:	46bd      	mov	sp, r7
 8002476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800247a:	bf00      	nop
 800247c:	20000268 	.word	0x20000268
 8002480:	0800a984 	.word	0x0800a984
 8002484:	20000304 	.word	0x20000304
 8002488:	0800a98c 	.word	0x0800a98c
 800248c:	0800a9a4 	.word	0x0800a9a4
 8002490:	0800a9bc 	.word	0x0800a9bc
 8002494:	0800a9d4 	.word	0x0800a9d4
 8002498:	0800aa0c 	.word	0x0800aa0c
 800249c:	0800aa40 	.word	0x0800aa40
 80024a0:	0800aa50 	.word	0x0800aa50
 80024a4:	0800aa84 	.word	0x0800aa84
 80024a8:	0800aabc 	.word	0x0800aabc
 80024ac:	0800ab10 	.word	0x0800ab10
 80024b0:	20000344 	.word	0x20000344
 80024b4:	0800ab2c 	.word	0x0800ab2c
 80024b8:	0800ab3c 	.word	0x0800ab3c
 80024bc:	0800ab68 	.word	0x0800ab68
 80024c0:	0800ab74 	.word	0x0800ab74
 80024c4:	0800aba4 	.word	0x0800aba4
 80024c8:	0800abf8 	.word	0x0800abf8
 80024cc:	2000034c 	.word	0x2000034c
 80024d0:	0800ac14 	.word	0x0800ac14
 80024d4:	437a0000 	.word	0x437a0000

080024d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b096      	sub	sp, #88	; 0x58
 80024dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024de:	f107 0314 	add.w	r3, r7, #20
 80024e2:	2244      	movs	r2, #68	; 0x44
 80024e4:	2100      	movs	r1, #0
 80024e6:	4618      	mov	r0, r3
 80024e8:	f005 fafa 	bl	8007ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024ec:	463b      	mov	r3, r7
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
 80024f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80024fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024fe:	f001 f9bd 	bl	800387c <HAL_PWREx_ControlVoltageScaling>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002508:	f000 fb98 	bl	8002c3c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800250c:	f001 f998 	bl	8003840 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002510:	4b21      	ldr	r3, [pc, #132]	; (8002598 <SystemClock_Config+0xc0>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	4a20      	ldr	r2, [pc, #128]	; (8002598 <SystemClock_Config+0xc0>)
 8002518:	f023 0318 	bic.w	r3, r3, #24
 800251c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002520:	2314      	movs	r3, #20
 8002522:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002524:	2301      	movs	r3, #1
 8002526:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002528:	2301      	movs	r3, #1
 800252a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002530:	2360      	movs	r3, #96	; 0x60
 8002532:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002534:	2302      	movs	r3, #2
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002538:	2301      	movs	r3, #1
 800253a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800253c:	2301      	movs	r3, #1
 800253e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002540:	2310      	movs	r3, #16
 8002542:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002544:	2302      	movs	r3, #2
 8002546:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002548:	2302      	movs	r3, #2
 800254a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	4618      	mov	r0, r3
 8002552:	f001 f9e9 	bl	8003928 <HAL_RCC_OscConfig>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800255c:	f000 fb6e 	bl	8002c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002560:	230f      	movs	r3, #15
 8002562:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002564:	2303      	movs	r3, #3
 8002566:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800256c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002570:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002576:	463b      	mov	r3, r7
 8002578:	2101      	movs	r1, #1
 800257a:	4618      	mov	r0, r3
 800257c:	f001 fdb0 	bl	80040e0 <HAL_RCC_ClockConfig>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8002586:	f000 fb59 	bl	8002c3c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800258a:	f002 fab7 	bl	8004afc <HAL_RCCEx_EnableMSIPLLMode>
}
 800258e:	bf00      	nop
 8002590:	3758      	adds	r7, #88	; 0x58
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000

0800259c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025a0:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <MX_SPI1_Init+0x74>)
 80025a2:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <MX_SPI1_Init+0x78>)
 80025a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025a6:	4b1a      	ldr	r3, [pc, #104]	; (8002610 <MX_SPI1_Init+0x74>)
 80025a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <MX_SPI1_Init+0x74>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025b4:	4b16      	ldr	r3, [pc, #88]	; (8002610 <MX_SPI1_Init+0x74>)
 80025b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80025ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025bc:	4b14      	ldr	r3, [pc, #80]	; (8002610 <MX_SPI1_Init+0x74>)
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025c2:	4b13      	ldr	r3, [pc, #76]	; (8002610 <MX_SPI1_Init+0x74>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <MX_SPI1_Init+0x74>)
 80025ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025d0:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <MX_SPI1_Init+0x74>)
 80025d2:	2208      	movs	r2, #8
 80025d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <MX_SPI1_Init+0x74>)
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <MX_SPI1_Init+0x74>)
 80025de:	2200      	movs	r2, #0
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <MX_SPI1_Init+0x74>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <MX_SPI1_Init+0x74>)
 80025ea:	2207      	movs	r2, #7
 80025ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <MX_SPI1_Init+0x74>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <MX_SPI1_Init+0x74>)
 80025f6:	2208      	movs	r2, #8
 80025f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025fa:	4805      	ldr	r0, [pc, #20]	; (8002610 <MX_SPI1_Init+0x74>)
 80025fc:	f002 fc60 	bl	8004ec0 <HAL_SPI_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002606:	f000 fb19 	bl	8002c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000204 	.word	0x20000204
 8002614:	40013000 	.word	0x40013000

08002618 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800261e:	f107 0310 	add.w	r3, r7, #16
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
 8002634:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002636:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <MX_TIM2_Init+0x98>)
 8002638:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800263c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <MX_TIM2_Init+0x98>)
 8002640:	2207      	movs	r2, #7
 8002642:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002644:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <MX_TIM2_Init+0x98>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff-1;
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <MX_TIM2_Init+0x98>)
 800264c:	f06f 0201 	mvn.w	r2, #1
 8002650:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002652:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <MX_TIM2_Init+0x98>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002658:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <MX_TIM2_Init+0x98>)
 800265a:	2200      	movs	r2, #0
 800265c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800265e:	4814      	ldr	r0, [pc, #80]	; (80026b0 <MX_TIM2_Init+0x98>)
 8002660:	f003 fc70 	bl	8005f44 <HAL_TIM_Base_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800266a:	f000 fae7 	bl	8002c3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800266e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002672:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002674:	f107 0310 	add.w	r3, r7, #16
 8002678:	4619      	mov	r1, r3
 800267a:	480d      	ldr	r0, [pc, #52]	; (80026b0 <MX_TIM2_Init+0x98>)
 800267c:	f003 fe24 	bl	80062c8 <HAL_TIM_ConfigClockSource>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002686:	f000 fad9 	bl	8002c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	4619      	mov	r1, r3
 8002696:	4806      	ldr	r0, [pc, #24]	; (80026b0 <MX_TIM2_Init+0x98>)
 8002698:	f004 f846 	bl	8006728 <HAL_TIMEx_MasterConfigSynchronization>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80026a2:	f000 facb 	bl	8002c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80026a6:	bf00      	nop
 80026a8:	3720      	adds	r7, #32
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000268 	.word	0x20000268

080026b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <MX_USART2_UART_Init+0x40>)
 80026ba:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <MX_USART2_UART_Init+0x44>)
 80026bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <MX_USART2_UART_Init+0x40>)
 80026c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = USART_WORDLENGTH_8B;
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <MX_USART2_UART_Init+0x40>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = USART_STOPBITS_1;
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MX_USART2_UART_Init+0x40>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = USART_PARITY_NONE;
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <MX_USART2_UART_Init+0x40>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = USART_MODE_TX_RX;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_USART2_UART_Init+0x40>)
 80026da:	220c      	movs	r2, #12
 80026dc:	615a      	str	r2, [r3, #20]
//  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
//  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
//  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
//  huart2.AdvancedInit.AdvFeatureInit = USART_ADVFEATURE_NO_INIT;
  if (HAL_USART_Init(&huart2) != HAL_OK)
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <MX_USART2_UART_Init+0x40>)
 80026e0:	f004 f8c8 	bl	8006874 <HAL_USART_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_USART2_UART_Init+0x3a>
  {
    Error_Handler();
 80026ea:	f000 faa7 	bl	8002c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	200002b4 	.word	0x200002b4
 80026f8:	40004400 	.word	0x40004400

080026fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002702:	f107 0314 	add.w	r3, r7, #20
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002712:	4b36      	ldr	r3, [pc, #216]	; (80027ec <MX_GPIO_Init+0xf0>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	4a35      	ldr	r2, [pc, #212]	; (80027ec <MX_GPIO_Init+0xf0>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800271e:	4b33      	ldr	r3, [pc, #204]	; (80027ec <MX_GPIO_Init+0xf0>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800272a:	4b30      	ldr	r3, [pc, #192]	; (80027ec <MX_GPIO_Init+0xf0>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	4a2f      	ldr	r2, [pc, #188]	; (80027ec <MX_GPIO_Init+0xf0>)
 8002730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002736:	4b2d      	ldr	r3, [pc, #180]	; (80027ec <MX_GPIO_Init+0xf0>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002742:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <MX_GPIO_Init+0xf0>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	4a29      	ldr	r2, [pc, #164]	; (80027ec <MX_GPIO_Init+0xf0>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274e:	4b27      	ldr	r3, [pc, #156]	; (80027ec <MX_GPIO_Init+0xf0>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	4b24      	ldr	r3, [pc, #144]	; (80027ec <MX_GPIO_Init+0xf0>)
 800275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275e:	4a23      	ldr	r2, [pc, #140]	; (80027ec <MX_GPIO_Init+0xf0>)
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002766:	4b21      	ldr	r3, [pc, #132]	; (80027ec <MX_GPIO_Init+0xf0>)
 8002768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002772:	2200      	movs	r2, #0
 8002774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002778:	481d      	ldr	r0, [pc, #116]	; (80027f0 <MX_GPIO_Init+0xf4>)
 800277a:	f001 f849 	bl	8003810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BMI085_NSSg_Pin|BMI085_NSSa_Pin, GPIO_PIN_SET);
 800277e:	2201      	movs	r2, #1
 8002780:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002784:	481b      	ldr	r0, [pc, #108]	; (80027f4 <MX_GPIO_Init+0xf8>)
 8002786:	f001 f843 	bl	8003810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800278a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800278e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002790:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4619      	mov	r1, r3
 80027a0:	4814      	ldr	r0, [pc, #80]	; (80027f4 <MX_GPIO_Init+0xf8>)
 80027a2:	f000 fe8b 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80027a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ac:	2301      	movs	r3, #1
 80027ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	2300      	movs	r3, #0
 80027b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	480c      	ldr	r0, [pc, #48]	; (80027f0 <MX_GPIO_Init+0xf4>)
 80027c0:	f000 fe7c 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pins : BMI085_NSSg_Pin BMI085_NSSa_Pin */
  GPIO_InitStruct.Pin = BMI085_NSSg_Pin|BMI085_NSSa_Pin;
 80027c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ca:	2301      	movs	r3, #1
 80027cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d2:	2300      	movs	r3, #0
 80027d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	4805      	ldr	r0, [pc, #20]	; (80027f4 <MX_GPIO_Init+0xf8>)
 80027de:	f000 fe6d 	bl	80034bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027e2:	bf00      	nop
 80027e4:	3728      	adds	r7, #40	; 0x28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	48000400 	.word	0x48000400
 80027f4:	48000800 	.word	0x48000800

080027f8 <lsb_to_mps2>:
/*!
 * @brief This function converts lsb to meter per second squared for 16 bit accelerometer at
 * range 2G, 4G, 8G or 16G.
 */
static float lsb_to_mps2(int16_t val, int8_t g_range, uint8_t bit_width)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	80fb      	strh	r3, [r7, #6]
 8002802:	460b      	mov	r3, r1
 8002804:	717b      	strb	r3, [r7, #5]
 8002806:	4613      	mov	r3, r2
 8002808:	713b      	strb	r3, [r7, #4]
    double power = 2;
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002812:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 8002816:	793b      	ldrb	r3, [r7, #4]
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd fe73 	bl	8000504 <__aeabi_ui2d>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	ec43 2b11 	vmov	d1, r2, r3
 8002826:	ed97 0b04 	vldr	d0, [r7, #16]
 800282a:	f007 f815 	bl	8009858 <pow>
 800282e:	ec51 0b10 	vmov	r0, r1, d0
 8002832:	f04f 0200 	mov.w	r2, #0
 8002836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800283a:	f7fe f807 	bl	800084c <__aeabi_ddiv>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	f7fe f9af 	bl	8000ba8 <__aeabi_d2f>
 800284a:	4603      	mov	r3, r0
 800284c:	60fb      	str	r3, [r7, #12]

    return (GRAVITY_EARTH * val * g_range) / half_scale;
 800284e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002852:	ee07 3a90 	vmov	s15, r3
 8002856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800285a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002888 <lsb_to_mps2+0x90>
 800285e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002862:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002866:	ee07 3a90 	vmov	s15, r3
 800286a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800286e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002872:	edd7 7a03 	vldr	s15, [r7, #12]
 8002876:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800287a:	eef0 7a66 	vmov.f32	s15, s13
}
 800287e:	eeb0 0a67 	vmov.f32	s0, s15
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	411ce80a 	.word	0x411ce80a

0800288c <lsb_to_dps>:
/*!
 * @brief This function converts lsb to degree per second for 16 bit gyro at
 * range 125, 250, 500, 1000 or 2000dps.
 */
static float lsb_to_dps(int16_t val, float dps, uint8_t bit_width)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	ed87 0a00 	vstr	s0, [r7]
 8002898:	460a      	mov	r2, r1
 800289a:	80fb      	strh	r3, [r7, #6]
 800289c:	4613      	mov	r3, r2
 800289e:	717b      	strb	r3, [r7, #5]
    double power = 2;
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028a8:	e9c7 2304 	strd	r2, r3, [r7, #16]

    float half_scale = (float)((pow((double)power, (double)bit_width) / 2.0f));
 80028ac:	797b      	ldrb	r3, [r7, #5]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd fe28 	bl	8000504 <__aeabi_ui2d>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	ec43 2b11 	vmov	d1, r2, r3
 80028bc:	ed97 0b04 	vldr	d0, [r7, #16]
 80028c0:	f006 ffca 	bl	8009858 <pow>
 80028c4:	ec51 0b10 	vmov	r0, r1, d0
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80028d0:	f7fd ffbc 	bl	800084c <__aeabi_ddiv>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	f7fe f964 	bl	8000ba8 <__aeabi_d2f>
 80028e0:	4603      	mov	r3, r0
 80028e2:	60fb      	str	r3, [r7, #12]

    return (dps / (half_scale)) * (val);
 80028e4:	edd7 6a00 	vldr	s13, [r7]
 80028e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80028ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fc:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002900:	eeb0 0a67 	vmov.f32	s0, s15
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <bmi08x_spi_read>:

// These functions are the only ones that really need to be implemented
BMI08X_INTF_RET_TYPE bmi08x_spi_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60b9      	str	r1, [r7, #8]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	4603      	mov	r3, r0
 800291a:	73fb      	strb	r3, [r7, #15]

	uint16_t dev_addr = *(uint16_t*) intf_ptr;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	82fb      	strh	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_RESET);
 8002922:	8afb      	ldrh	r3, [r7, #22]
 8002924:	2200      	movs	r2, #0
 8002926:	4619      	mov	r1, r3
 8002928:	4814      	ldr	r0, [pc, #80]	; (800297c <bmi08x_spi_read+0x70>)
 800292a:	f000 ff71 	bl	8003810 <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 50) != HAL_OK) {
 800292e:	f107 010f 	add.w	r1, r7, #15
 8002932:	2332      	movs	r3, #50	; 0x32
 8002934:	2201      	movs	r2, #1
 8002936:	4812      	ldr	r0, [pc, #72]	; (8002980 <bmi08x_spi_read+0x74>)
 8002938:	f002 fb65 	bl	8005006 <HAL_SPI_Transmit>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <bmi08x_spi_read+0x3a>
		return 1;
 8002942:	2301      	movs	r3, #1
 8002944:	e016      	b.n	8002974 <bmi08x_spi_read+0x68>
	}
	if (HAL_SPI_Receive(&hspi1, reg_data, len, 50) != HAL_OK) {
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	b29a      	uxth	r2, r3
 800294a:	2332      	movs	r3, #50	; 0x32
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	480c      	ldr	r0, [pc, #48]	; (8002980 <bmi08x_spi_read+0x74>)
 8002950:	f002 fcce 	bl	80052f0 <HAL_SPI_Receive>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <bmi08x_spi_read+0x52>
		return 1;
 800295a:	2301      	movs	r3, #1
 800295c:	e00a      	b.n	8002974 <bmi08x_spi_read+0x68>
	}

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_SET);
 800295e:	8afb      	ldrh	r3, [r7, #22]
 8002960:	2201      	movs	r2, #1
 8002962:	4619      	mov	r1, r3
 8002964:	4805      	ldr	r0, [pc, #20]	; (800297c <bmi08x_spi_read+0x70>)
 8002966:	f000 ff53 	bl	8003810 <HAL_GPIO_WritePin>
	bmi08x_delay_us(100, 0);
 800296a:	2100      	movs	r1, #0
 800296c:	2064      	movs	r0, #100	; 0x64
 800296e:	f000 f845 	bl	80029fc <bmi08x_delay_us>
	return 0;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	48000800 	.word	0x48000800
 8002980:	20000204 	.word	0x20000204

08002984 <bmi08x_spi_write>:

BMI08X_INTF_RET_TYPE bmi08x_spi_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	4603      	mov	r3, r0
 8002992:	73fb      	strb	r3, [r7, #15]

	uint16_t dev_addr = *(uint16_t*) intf_ptr;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	82fb      	strh	r3, [r7, #22]

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_RESET);
 800299a:	8afb      	ldrh	r3, [r7, #22]
 800299c:	2200      	movs	r2, #0
 800299e:	4619      	mov	r1, r3
 80029a0:	4814      	ldr	r0, [pc, #80]	; (80029f4 <bmi08x_spi_write+0x70>)
 80029a2:	f000 ff35 	bl	8003810 <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(&hspi1, &reg_addr, 1, 50) != HAL_OK) {
 80029a6:	f107 010f 	add.w	r1, r7, #15
 80029aa:	2332      	movs	r3, #50	; 0x32
 80029ac:	2201      	movs	r2, #1
 80029ae:	4812      	ldr	r0, [pc, #72]	; (80029f8 <bmi08x_spi_write+0x74>)
 80029b0:	f002 fb29 	bl	8005006 <HAL_SPI_Transmit>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <bmi08x_spi_write+0x3a>
		return 1;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e015      	b.n	80029ea <bmi08x_spi_write+0x66>
	}
	if (HAL_SPI_Transmit(&hspi1, reg_data, 1, 5) != HAL_OK) {
 80029be:	2305      	movs	r3, #5
 80029c0:	2201      	movs	r2, #1
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	480c      	ldr	r0, [pc, #48]	; (80029f8 <bmi08x_spi_write+0x74>)
 80029c6:	f002 fb1e 	bl	8005006 <HAL_SPI_Transmit>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <bmi08x_spi_write+0x50>
		return 1;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e00a      	b.n	80029ea <bmi08x_spi_write+0x66>
	}

	HAL_GPIO_WritePin(GPIOC, dev_addr, GPIO_PIN_SET);
 80029d4:	8afb      	ldrh	r3, [r7, #22]
 80029d6:	2201      	movs	r2, #1
 80029d8:	4619      	mov	r1, r3
 80029da:	4806      	ldr	r0, [pc, #24]	; (80029f4 <bmi08x_spi_write+0x70>)
 80029dc:	f000 ff18 	bl	8003810 <HAL_GPIO_WritePin>

	bmi08x_delay_us(100, 0);
 80029e0:	2100      	movs	r1, #0
 80029e2:	2064      	movs	r0, #100	; 0x64
 80029e4:	f000 f80a 	bl	80029fc <bmi08x_delay_us>
	return 0;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	48000800 	.word	0x48000800
 80029f8:	20000204 	.word	0x20000204

080029fc <bmi08x_delay_us>:

void bmi08x_delay_us(uint32_t period, void *intf_ptr) {
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
//    coines_delay_usec(period);
	__HAL_TIM_SET_COUNTER(&htim2, 0);  // set the counter value a 0
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <bmi08x_delay_us+0x38>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < period * 10)
 8002a0e:	bf00      	nop
 8002a10:	4b08      	ldr	r3, [pc, #32]	; (8002a34 <bmi08x_delay_us+0x38>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4299      	cmp	r1, r3
 8002a22:	d3f5      	bcc.n	8002a10 <bmi08x_delay_us+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000268 	.word	0x20000268

08002a38 <bmi08x_interface_init>:
/*!
 *  @brief Function to select the interface between SPI and I2C.
 *  Also to initialize coines platform
 */
int8_t bmi08x_interface_init(struct bmi08x_dev *bmi08x, uint8_t intf,
		uint8_t variant) {
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	70fb      	strb	r3, [r7, #3]
 8002a44:	4613      	mov	r3, r2
 8002a46:	70bb      	strb	r3, [r7, #2]
	int8_t rslt = BMI08X_OK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]
//    struct coines_board_info board_info;

	if (bmi08x != NULL) {
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d03a      	beq.n	8002ac8 <bmi08x_interface_init+0x90>

#if defined(PC)
        setbuf(stdout, NULL);
#endif

		bmi08x_delay_us(1000, 0);
 8002a52:	2100      	movs	r1, #0
 8002a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a58:	f7ff ffd0 	bl	80029fc <bmi08x_delay_us>

		/* Bus configuration : I2C */
		if (intf == BMI08X_I2C_INTF) {
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d018      	beq.n	8002a94 <bmi08x_interface_init+0x5c>
//            /* PS pin is made high for selecting I2C protocol (gyroscope)*/
//            coines_set_pin_config(COINES_SHUTTLE_PIN_9, COINES_PIN_DIRECTION_OUT, COINES_PIN_VALUE_HIGH);
		}
		/* Bus configuration : SPI */
		// BMI085a_NSS_Pin|BMI085g_NSS_Pin|BMI085_PS_Pin
		else if (intf == BMI08X_SPI_INTF) {
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d115      	bne.n	8002a94 <bmi08x_interface_init+0x5c>

			bmi08x->intf = BMI08X_SPI_INTF;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	731a      	strb	r2, [r3, #12]
			bmi08x->read = bmi08x_spi_read;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <bmi08x_interface_init+0xa0>)
 8002a72:	621a      	str	r2, [r3, #32]
			bmi08x->write = bmi08x_spi_write;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a19      	ldr	r2, [pc, #100]	; (8002adc <bmi08x_interface_init+0xa4>)
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

			/* SPI chip select pin for Accel (CSB1_A) */
			acc_dev_add = BMI085_NSSa_Pin;
 8002a7a:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <bmi08x_interface_init+0xa8>)
 8002a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a80:	801a      	strh	r2, [r3, #0]

			/* SPI chip select pin for Gyro (CSB2_G) */
			gyro_dev_add = BMI085_NSSg_Pin;
 8002a82:	4b18      	ldr	r3, [pc, #96]	; (8002ae4 <bmi08x_interface_init+0xac>)
 8002a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a88:	801a      	strh	r2, [r3, #0]

			/* CSB1 pin is made high for selecting SPI protocol (accelerometer)*/
			// Done through STM32CubeIDE
			//HAL_GPIO_WritePin(GPIOC, BMI085_NSSa_Pin, GPIO_PIN_SET);
			bmi08x_delay_us(1000, 00);
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a90:	f7ff ffb4 	bl	80029fc <bmi08x_delay_us>
//			HAL_Delay(10);
//            coines_config_spi_bus(COINES_SPI_BUS_0, COINES_SPI_SPEED_5_MHZ, COINES_SPI_MODE3);
		}

		/* Selection of bmi085 or bmi088 sensor variant */
		bmi08x->variant = variant;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	78ba      	ldrb	r2, [r7, #2]
 8002a98:	735a      	strb	r2, [r3, #13]

		/* Assign accel device address to accel interface pointer */
		bmi08x->intf_ptr_accel = &acc_dev_add;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a10      	ldr	r2, [pc, #64]	; (8002ae0 <bmi08x_interface_init+0xa8>)
 8002a9e:	605a      	str	r2, [r3, #4]

		/* Assign gyro device address to gyro interface pointer */
		bmi08x->intf_ptr_gyro = &gyro_dev_add;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a10      	ldr	r2, [pc, #64]	; (8002ae4 <bmi08x_interface_init+0xac>)
 8002aa4:	609a      	str	r2, [r3, #8]

		/* Configure delay in microseconds */
		bmi08x->delay_us = bmi08x_delay_us;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <bmi08x_interface_init+0xb0>)
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28

		/* Configure max read/write length (in bytes) ( Supported length depends on target machine) */
		bmi08x->read_write_len = BMI08X_READ_WRITE_LEN;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	222e      	movs	r2, #46	; 0x2e
 8002ab0:	771a      	strb	r2, [r3, #28]

//        coines_delay_usec(10000);
		bmi08x_delay_us(1000, 0);
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ab8:	f7ff ffa0 	bl	80029fc <bmi08x_delay_us>

//        coines_set_shuttleboard_vdd_vddio_config(3300, 3300);

//        coines_delay_usec(10000);
		bmi08x_delay_us(1000, 0);
 8002abc:	2100      	movs	r1, #0
 8002abe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ac2:	f7ff ff9b 	bl	80029fc <bmi08x_delay_us>
 8002ac6:	e001      	b.n	8002acc <bmi08x_interface_init+0x94>
	} else {
		rslt = BMI08X_E_NULL_PTR;
 8002ac8:	23ff      	movs	r3, #255	; 0xff
 8002aca:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002acc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	0800290d 	.word	0x0800290d
 8002adc:	08002985 	.word	0x08002985
 8002ae0:	20000352 	.word	0x20000352
 8002ae4:	20000354 	.word	0x20000354
 8002ae8:	080029fd 	.word	0x080029fd

08002aec <bmi08x_error_codes_print_result>:

/*!
 *  @brief Prints the execution status of the APIs.
 */
void bmi08x_error_codes_print_result(const char api_name[], int8_t rslt) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	460b      	mov	r3, r1
 8002af6:	70fb      	strb	r3, [r7, #3]
	if (rslt != BMI08X_OK) {
 8002af8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 8081 	beq.w	8002c04 <bmi08x_error_codes_print_result+0x118>
		printf("%s\t", api_name);
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4841      	ldr	r0, [pc, #260]	; (8002c0c <bmi08x_error_codes_print_result+0x120>)
 8002b06:	f004 fea5 	bl	8007854 <iprintf>
		if (rslt == BMI08X_E_NULL_PTR) {
 8002b0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b12:	d106      	bne.n	8002b22 <bmi08x_error_codes_print_result+0x36>
			printf("Error [%d] : Null pointer\r\n", rslt);
 8002b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b18:	4619      	mov	r1, r3
 8002b1a:	483d      	ldr	r0, [pc, #244]	; (8002c10 <bmi08x_error_codes_print_result+0x124>)
 8002b1c:	f004 fe9a 	bl	8007854 <iprintf>
		} else {
			printf("Error [%d] : Unknown error code\r\n", rslt);
		}
	}

}
 8002b20:	e070      	b.n	8002c04 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_COM_FAIL) {
 8002b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b26:	f113 0f02 	cmn.w	r3, #2
 8002b2a:	d106      	bne.n	8002b3a <bmi08x_error_codes_print_result+0x4e>
			printf("Error [%d] : Communication failure\r\n", rslt);
 8002b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b30:	4619      	mov	r1, r3
 8002b32:	4838      	ldr	r0, [pc, #224]	; (8002c14 <bmi08x_error_codes_print_result+0x128>)
 8002b34:	f004 fe8e 	bl	8007854 <iprintf>
}
 8002b38:	e064      	b.n	8002c04 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_DEV_NOT_FOUND) {
 8002b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b3e:	f113 0f03 	cmn.w	r3, #3
 8002b42:	d106      	bne.n	8002b52 <bmi08x_error_codes_print_result+0x66>
			printf("Error [%d] : Device not found\r\n", rslt);
 8002b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4833      	ldr	r0, [pc, #204]	; (8002c18 <bmi08x_error_codes_print_result+0x12c>)
 8002b4c:	f004 fe82 	bl	8007854 <iprintf>
}
 8002b50:	e058      	b.n	8002c04 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_OUT_OF_RANGE) {
 8002b52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b56:	f113 0f04 	cmn.w	r3, #4
 8002b5a:	d106      	bne.n	8002b6a <bmi08x_error_codes_print_result+0x7e>
			printf("Error [%d] : Out of Range\r\n", rslt);
 8002b5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b60:	4619      	mov	r1, r3
 8002b62:	482e      	ldr	r0, [pc, #184]	; (8002c1c <bmi08x_error_codes_print_result+0x130>)
 8002b64:	f004 fe76 	bl	8007854 <iprintf>
}
 8002b68:	e04c      	b.n	8002c04 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_INVALID_INPUT) {
 8002b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b6e:	f113 0f05 	cmn.w	r3, #5
 8002b72:	d106      	bne.n	8002b82 <bmi08x_error_codes_print_result+0x96>
			printf("Error [%d] : Invalid input\r\n", rslt);
 8002b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4829      	ldr	r0, [pc, #164]	; (8002c20 <bmi08x_error_codes_print_result+0x134>)
 8002b7c:	f004 fe6a 	bl	8007854 <iprintf>
}
 8002b80:	e040      	b.n	8002c04 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_CONFIG_STREAM_ERROR) {
 8002b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b86:	f113 0f06 	cmn.w	r3, #6
 8002b8a:	d106      	bne.n	8002b9a <bmi08x_error_codes_print_result+0xae>
			printf("Error [%d] : Config stream error\r\n", rslt);
 8002b8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b90:	4619      	mov	r1, r3
 8002b92:	4824      	ldr	r0, [pc, #144]	; (8002c24 <bmi08x_error_codes_print_result+0x138>)
 8002b94:	f004 fe5e 	bl	8007854 <iprintf>
}
 8002b98:	e034      	b.n	8002c04 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_RD_WR_LENGTH_INVALID) {
 8002b9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b9e:	f113 0f07 	cmn.w	r3, #7
 8002ba2:	d106      	bne.n	8002bb2 <bmi08x_error_codes_print_result+0xc6>
			printf("Error [%d] : Invalid Read write length\r\n", rslt);
 8002ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	481f      	ldr	r0, [pc, #124]	; (8002c28 <bmi08x_error_codes_print_result+0x13c>)
 8002bac:	f004 fe52 	bl	8007854 <iprintf>
}
 8002bb0:	e028      	b.n	8002c04 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_INVALID_CONFIG) {
 8002bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb6:	f113 0f08 	cmn.w	r3, #8
 8002bba:	d106      	bne.n	8002bca <bmi08x_error_codes_print_result+0xde>
			printf("Error [%d] : Invalid config\r\n", rslt);
 8002bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	481a      	ldr	r0, [pc, #104]	; (8002c2c <bmi08x_error_codes_print_result+0x140>)
 8002bc4:	f004 fe46 	bl	8007854 <iprintf>
}
 8002bc8:	e01c      	b.n	8002c04 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_E_FEATURE_NOT_SUPPORTED) {
 8002bca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bce:	f113 0f09 	cmn.w	r3, #9
 8002bd2:	d106      	bne.n	8002be2 <bmi08x_error_codes_print_result+0xf6>
			printf("Error [%d] : Feature not supported\r\n", rslt);
 8002bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4815      	ldr	r0, [pc, #84]	; (8002c30 <bmi08x_error_codes_print_result+0x144>)
 8002bdc:	f004 fe3a 	bl	8007854 <iprintf>
}
 8002be0:	e010      	b.n	8002c04 <bmi08x_error_codes_print_result+0x118>
		} else if (rslt == BMI08X_W_FIFO_EMPTY) {
 8002be2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d106      	bne.n	8002bf8 <bmi08x_error_codes_print_result+0x10c>
			printf("Warning [%d] : FIFO empty\r\n", rslt);
 8002bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4810      	ldr	r0, [pc, #64]	; (8002c34 <bmi08x_error_codes_print_result+0x148>)
 8002bf2:	f004 fe2f 	bl	8007854 <iprintf>
}
 8002bf6:	e005      	b.n	8002c04 <bmi08x_error_codes_print_result+0x118>
			printf("Error [%d] : Unknown error code\r\n", rslt);
 8002bf8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	480e      	ldr	r0, [pc, #56]	; (8002c38 <bmi08x_error_codes_print_result+0x14c>)
 8002c00:	f004 fe28 	bl	8007854 <iprintf>
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	0800ac24 	.word	0x0800ac24
 8002c10:	0800ac28 	.word	0x0800ac28
 8002c14:	0800ac44 	.word	0x0800ac44
 8002c18:	0800ac6c 	.word	0x0800ac6c
 8002c1c:	0800ac8c 	.word	0x0800ac8c
 8002c20:	0800aca8 	.word	0x0800aca8
 8002c24:	0800acc8 	.word	0x0800acc8
 8002c28:	0800acec 	.word	0x0800acec
 8002c2c:	0800ad18 	.word	0x0800ad18
 8002c30:	0800ad38 	.word	0x0800ad38
 8002c34:	0800ad60 	.word	0x0800ad60
 8002c38:	0800ad7c 	.word	0x0800ad7c

08002c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c40:	b672      	cpsid	i
}
 8002c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c44:	e7fe      	b.n	8002c44 <Error_Handler+0x8>
	...

08002c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4e:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_MspInit+0x44>)
 8002c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c52:	4a0e      	ldr	r2, [pc, #56]	; (8002c8c <HAL_MspInit+0x44>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6613      	str	r3, [r2, #96]	; 0x60
 8002c5a:	4b0c      	ldr	r3, [pc, #48]	; (8002c8c <HAL_MspInit+0x44>)
 8002c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_MspInit+0x44>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <HAL_MspInit+0x44>)
 8002c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c70:	6593      	str	r3, [r2, #88]	; 0x58
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_MspInit+0x44>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7a:	603b      	str	r3, [r7, #0]
 8002c7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000

08002c90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]
 8002ca6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a1b      	ldr	r2, [pc, #108]	; (8002d1c <HAL_SPI_MspInit+0x8c>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d130      	bne.n	8002d14 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <HAL_SPI_MspInit+0x90>)
 8002cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb6:	4a1a      	ldr	r2, [pc, #104]	; (8002d20 <HAL_SPI_MspInit+0x90>)
 8002cb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cbc:	6613      	str	r3, [r2, #96]	; 0x60
 8002cbe:	4b18      	ldr	r3, [pc, #96]	; (8002d20 <HAL_SPI_MspInit+0x90>)
 8002cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_SPI_MspInit+0x90>)
 8002ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cce:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <HAL_SPI_MspInit+0x90>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <HAL_SPI_MspInit+0x90>)
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ce2:	23e0      	movs	r3, #224	; 0xe0
 8002ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cf2:	2305      	movs	r3, #5
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf6:	f107 0314 	add.w	r3, r7, #20
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d00:	f000 fbdc 	bl	80034bc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002d04:	2200      	movs	r2, #0
 8002d06:	2100      	movs	r1, #0
 8002d08:	2023      	movs	r0, #35	; 0x23
 8002d0a:	f000 fb60 	bl	80033ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002d0e:	2023      	movs	r0, #35	; 0x23
 8002d10:	f000 fb79 	bl	8003406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d14:	bf00      	nop
 8002d16:	3728      	adds	r7, #40	; 0x28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40013000 	.word	0x40013000
 8002d20:	40021000 	.word	0x40021000

08002d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d34:	d113      	bne.n	8002d5e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d36:	4b0c      	ldr	r3, [pc, #48]	; (8002d68 <HAL_TIM_Base_MspInit+0x44>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	4a0b      	ldr	r2, [pc, #44]	; (8002d68 <HAL_TIM_Base_MspInit+0x44>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6593      	str	r3, [r2, #88]	; 0x58
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <HAL_TIM_Base_MspInit+0x44>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2100      	movs	r1, #0
 8002d52:	201c      	movs	r0, #28
 8002d54:	f000 fb3b 	bl	80033ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d58:	201c      	movs	r0, #28
 8002d5a:	f000 fb54 	bl	8003406 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d5e:	bf00      	nop
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000

08002d6c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b0ae      	sub	sp, #184	; 0xb8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d84:	f107 031c 	add.w	r3, r7, #28
 8002d88:	2288      	movs	r2, #136	; 0x88
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f004 fea7 	bl	8007ae0 <memset>
  if(husart->Instance==USART1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a43      	ldr	r2, [pc, #268]	; (8002ea4 <HAL_USART_MspInit+0x138>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d13d      	bne.n	8002e18 <HAL_USART_MspInit+0xac>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002da0:	2300      	movs	r3, #0
 8002da2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002da4:	f107 031c 	add.w	r3, r7, #28
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 fbbd 	bl	8004528 <HAL_RCCEx_PeriphCLKConfig>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_USART_MspInit+0x4c>
    {
      Error_Handler();
 8002db4:	f7ff ff42 	bl	8002c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002db8:	4b3b      	ldr	r3, [pc, #236]	; (8002ea8 <HAL_USART_MspInit+0x13c>)
 8002dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbc:	4a3a      	ldr	r2, [pc, #232]	; (8002ea8 <HAL_USART_MspInit+0x13c>)
 8002dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc2:	6613      	str	r3, [r2, #96]	; 0x60
 8002dc4:	4b38      	ldr	r3, [pc, #224]	; (8002ea8 <HAL_USART_MspInit+0x13c>)
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd0:	4b35      	ldr	r3, [pc, #212]	; (8002ea8 <HAL_USART_MspInit+0x13c>)
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd4:	4a34      	ldr	r2, [pc, #208]	; (8002ea8 <HAL_USART_MspInit+0x13c>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ddc:	4b32      	ldr	r3, [pc, #200]	; (8002ea8 <HAL_USART_MspInit+0x13c>)
 8002dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002de8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002dec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e02:	2307      	movs	r3, #7
 8002e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e12:	f000 fb53 	bl	80034bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e16:	e040      	b.n	8002e9a <HAL_USART_MspInit+0x12e>
  else if(husart->Instance==USART2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a23      	ldr	r2, [pc, #140]	; (8002eac <HAL_USART_MspInit+0x140>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d13b      	bne.n	8002e9a <HAL_USART_MspInit+0x12e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e22:	2302      	movs	r3, #2
 8002e24:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e26:	2300      	movs	r3, #0
 8002e28:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e2a:	f107 031c 	add.w	r3, r7, #28
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 fb7a 	bl	8004528 <HAL_RCCEx_PeriphCLKConfig>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_USART_MspInit+0xd2>
      Error_Handler();
 8002e3a:	f7ff feff 	bl	8002c3c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <HAL_USART_MspInit+0x13c>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e42:	4a19      	ldr	r2, [pc, #100]	; (8002ea8 <HAL_USART_MspInit+0x13c>)
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e48:	6593      	str	r3, [r2, #88]	; 0x58
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <HAL_USART_MspInit+0x13c>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e56:	4b14      	ldr	r3, [pc, #80]	; (8002ea8 <HAL_USART_MspInit+0x13c>)
 8002e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e5a:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <HAL_USART_MspInit+0x13c>)
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e62:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <HAL_USART_MspInit+0x13c>)
 8002e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002e6e:	231c      	movs	r3, #28
 8002e70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e80:	2303      	movs	r3, #3
 8002e82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e86:	2307      	movs	r3, #7
 8002e88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002e90:	4619      	mov	r1, r3
 8002e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e96:	f000 fb11 	bl	80034bc <HAL_GPIO_Init>
}
 8002e9a:	bf00      	nop
 8002e9c:	37b8      	adds	r7, #184	; 0xb8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40013800 	.word	0x40013800
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40004400 	.word	0x40004400

08002eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002eb4:	e7fe      	b.n	8002eb4 <NMI_Handler+0x4>

08002eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eba:	e7fe      	b.n	8002eba <HardFault_Handler+0x4>

08002ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ec0:	e7fe      	b.n	8002ec0 <MemManage_Handler+0x4>

08002ec2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ec6:	e7fe      	b.n	8002ec6 <BusFault_Handler+0x4>

08002ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ecc:	e7fe      	b.n	8002ecc <UsageFault_Handler+0x4>

08002ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ee0:	bf00      	nop
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002efc:	f000 f96c 	bl	80031d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f00:	bf00      	nop
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f08:	4802      	ldr	r0, [pc, #8]	; (8002f14 <TIM2_IRQHandler+0x10>)
 8002f0a:	f003 f8db 	bl	80060c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000268 	.word	0x20000268

08002f18 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002f1c:	4802      	ldr	r0, [pc, #8]	; (8002f28 <SPI1_IRQHandler+0x10>)
 8002f1e:	f002 fd41 	bl	80059a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	20000204 	.word	0x20000204

08002f2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return 1;
 8002f30:	2301      	movs	r3, #1
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <_kill>:

int _kill(int pid, int sig)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f46:	f004 fe1d 	bl	8007b84 <__errno>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2216      	movs	r2, #22
 8002f4e:	601a      	str	r2, [r3, #0]
  return -1;
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <_exit>:

void _exit (int status)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f64:	f04f 31ff 	mov.w	r1, #4294967295
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ffe7 	bl	8002f3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f6e:	e7fe      	b.n	8002f6e <_exit+0x12>

08002f70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]
 8002f80:	e00a      	b.n	8002f98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f82:	f3af 8000 	nop.w
 8002f86:	4601      	mov	r1, r0
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	1c5a      	adds	r2, r3, #1
 8002f8c:	60ba      	str	r2, [r7, #8]
 8002f8e:	b2ca      	uxtb	r2, r1
 8002f90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	3301      	adds	r3, #1
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	dbf0      	blt.n	8002f82 <_read+0x12>
  }

  return len;
 8002fa0:	687b      	ldr	r3, [r7, #4]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
 8002fba:	e009      	b.n	8002fd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	60ba      	str	r2, [r7, #8]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe ffd9 	bl	8001f7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	dbf1      	blt.n	8002fbc <_write+0x12>
  }
  return len;
 8002fd8:	687b      	ldr	r3, [r7, #4]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <_close>:

int _close(int file)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
 8003002:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800300a:	605a      	str	r2, [r3, #4]
  return 0;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <_isatty>:

int _isatty(int file)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003022:	2301      	movs	r3, #1
}
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003054:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <_sbrk+0x5c>)
 8003056:	4b15      	ldr	r3, [pc, #84]	; (80030ac <_sbrk+0x60>)
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003060:	4b13      	ldr	r3, [pc, #76]	; (80030b0 <_sbrk+0x64>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d102      	bne.n	800306e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003068:	4b11      	ldr	r3, [pc, #68]	; (80030b0 <_sbrk+0x64>)
 800306a:	4a12      	ldr	r2, [pc, #72]	; (80030b4 <_sbrk+0x68>)
 800306c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800306e:	4b10      	ldr	r3, [pc, #64]	; (80030b0 <_sbrk+0x64>)
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	429a      	cmp	r2, r3
 800307a:	d207      	bcs.n	800308c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800307c:	f004 fd82 	bl	8007b84 <__errno>
 8003080:	4603      	mov	r3, r0
 8003082:	220c      	movs	r2, #12
 8003084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	e009      	b.n	80030a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <_sbrk+0x64>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003092:	4b07      	ldr	r3, [pc, #28]	; (80030b0 <_sbrk+0x64>)
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4413      	add	r3, r2
 800309a:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <_sbrk+0x64>)
 800309c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800309e:	68fb      	ldr	r3, [r7, #12]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	20018000 	.word	0x20018000
 80030ac:	00000400 	.word	0x00000400
 80030b0:	20000358 	.word	0x20000358
 80030b4:	200004b0 	.word	0x200004b0

080030b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <SystemInit+0x20>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c2:	4a05      	ldr	r2, [pc, #20]	; (80030d8 <SystemInit+0x20>)
 80030c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80030dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003114 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80030e0:	f7ff ffea 	bl	80030b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030e4:	480c      	ldr	r0, [pc, #48]	; (8003118 <LoopForever+0x6>)
  ldr r1, =_edata
 80030e6:	490d      	ldr	r1, [pc, #52]	; (800311c <LoopForever+0xa>)
  ldr r2, =_sidata
 80030e8:	4a0d      	ldr	r2, [pc, #52]	; (8003120 <LoopForever+0xe>)
  movs r3, #0
 80030ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030ec:	e002      	b.n	80030f4 <LoopCopyDataInit>

080030ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030f2:	3304      	adds	r3, #4

080030f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f8:	d3f9      	bcc.n	80030ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030fa:	4a0a      	ldr	r2, [pc, #40]	; (8003124 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030fc:	4c0a      	ldr	r4, [pc, #40]	; (8003128 <LoopForever+0x16>)
  movs r3, #0
 80030fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003100:	e001      	b.n	8003106 <LoopFillZerobss>

08003102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003104:	3204      	adds	r2, #4

08003106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003108:	d3fb      	bcc.n	8003102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800310a:	f004 fd41 	bl	8007b90 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800310e:	f7ff f837 	bl	8002180 <main>

08003112 <LoopForever>:

LoopForever:
    b LoopForever
 8003112:	e7fe      	b.n	8003112 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003114:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800311c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003120:	0800b198 	.word	0x0800b198
  ldr r2, =_sbss
 8003124:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003128:	200004ac 	.word	0x200004ac

0800312c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800312c:	e7fe      	b.n	800312c <ADC1_2_IRQHandler>

0800312e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003134:	2300      	movs	r3, #0
 8003136:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003138:	2003      	movs	r0, #3
 800313a:	f000 f93d 	bl	80033b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800313e:	200f      	movs	r0, #15
 8003140:	f000 f80e 	bl	8003160 <HAL_InitTick>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	71fb      	strb	r3, [r7, #7]
 800314e:	e001      	b.n	8003154 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003150:	f7ff fd7a 	bl	8002c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003154:	79fb      	ldrb	r3, [r7, #7]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800316c:	4b17      	ldr	r3, [pc, #92]	; (80031cc <HAL_InitTick+0x6c>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d023      	beq.n	80031bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003174:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <HAL_InitTick+0x70>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b14      	ldr	r3, [pc, #80]	; (80031cc <HAL_InitTick+0x6c>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	4619      	mov	r1, r3
 800317e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003182:	fbb3 f3f1 	udiv	r3, r3, r1
 8003186:	fbb2 f3f3 	udiv	r3, r2, r3
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f949 	bl	8003422 <HAL_SYSTICK_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10f      	bne.n	80031b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b0f      	cmp	r3, #15
 800319a:	d809      	bhi.n	80031b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800319c:	2200      	movs	r2, #0
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295
 80031a4:	f000 f913 	bl	80033ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031a8:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HAL_InitTick+0x74>)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6013      	str	r3, [r2, #0]
 80031ae:	e007      	b.n	80031c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	e004      	b.n	80031c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
 80031ba:	e001      	b.n	80031c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000008 	.word	0x20000008
 80031d0:	20000000 	.word	0x20000000
 80031d4:	20000004 	.word	0x20000004

080031d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_IncTick+0x20>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_IncTick+0x24>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4413      	add	r3, r2
 80031e8:	4a04      	ldr	r2, [pc, #16]	; (80031fc <HAL_IncTick+0x24>)
 80031ea:	6013      	str	r3, [r2, #0]
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	20000008 	.word	0x20000008
 80031fc:	2000035c 	.word	0x2000035c

08003200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  return uwTick;
 8003204:	4b03      	ldr	r3, [pc, #12]	; (8003214 <HAL_GetTick+0x14>)
 8003206:	681b      	ldr	r3, [r3, #0]
}
 8003208:	4618      	mov	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	2000035c 	.word	0x2000035c

08003218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003228:	4b0c      	ldr	r3, [pc, #48]	; (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003234:	4013      	ands	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800324a:	4a04      	ldr	r2, [pc, #16]	; (800325c <__NVIC_SetPriorityGrouping+0x44>)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	60d3      	str	r3, [r2, #12]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <__NVIC_GetPriorityGrouping+0x18>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 0307 	and.w	r3, r3, #7
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	2b00      	cmp	r3, #0
 800328c:	db0b      	blt.n	80032a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	f003 021f 	and.w	r2, r3, #31
 8003294:	4907      	ldr	r1, [pc, #28]	; (80032b4 <__NVIC_EnableIRQ+0x38>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2001      	movs	r0, #1
 800329e:	fa00 f202 	lsl.w	r2, r0, r2
 80032a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000e100 	.word	0xe000e100

080032b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db0a      	blt.n	80032e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	490c      	ldr	r1, [pc, #48]	; (8003304 <__NVIC_SetPriority+0x4c>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	0112      	lsls	r2, r2, #4
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	440b      	add	r3, r1
 80032dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e0:	e00a      	b.n	80032f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4908      	ldr	r1, [pc, #32]	; (8003308 <__NVIC_SetPriority+0x50>)
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	3b04      	subs	r3, #4
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	440b      	add	r3, r1
 80032f6:	761a      	strb	r2, [r3, #24]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000e100 	.word	0xe000e100
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f1c3 0307 	rsb	r3, r3, #7
 8003326:	2b04      	cmp	r3, #4
 8003328:	bf28      	it	cs
 800332a:	2304      	movcs	r3, #4
 800332c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3304      	adds	r3, #4
 8003332:	2b06      	cmp	r3, #6
 8003334:	d902      	bls.n	800333c <NVIC_EncodePriority+0x30>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3b03      	subs	r3, #3
 800333a:	e000      	b.n	800333e <NVIC_EncodePriority+0x32>
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	f04f 32ff 	mov.w	r2, #4294967295
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	401a      	ands	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003354:	f04f 31ff 	mov.w	r1, #4294967295
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43d9      	mvns	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	4313      	orrs	r3, r2
         );
}
 8003366:	4618      	mov	r0, r3
 8003368:	3724      	adds	r7, #36	; 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003384:	d301      	bcc.n	800338a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003386:	2301      	movs	r3, #1
 8003388:	e00f      	b.n	80033aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <SysTick_Config+0x40>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	3b01      	subs	r3, #1
 8003390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003392:	210f      	movs	r1, #15
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	f7ff ff8e 	bl	80032b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <SysTick_Config+0x40>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033a2:	4b04      	ldr	r3, [pc, #16]	; (80033b4 <SysTick_Config+0x40>)
 80033a4:	2207      	movs	r2, #7
 80033a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	e000e010 	.word	0xe000e010

080033b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff ff29 	bl	8003218 <__NVIC_SetPriorityGrouping>
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	4603      	mov	r3, r0
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033e0:	f7ff ff3e 	bl	8003260 <__NVIC_GetPriorityGrouping>
 80033e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	6978      	ldr	r0, [r7, #20]
 80033ec:	f7ff ff8e 	bl	800330c <NVIC_EncodePriority>
 80033f0:	4602      	mov	r2, r0
 80033f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff5d 	bl	80032b8 <__NVIC_SetPriority>
}
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	4603      	mov	r3, r0
 800340e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff ff31 	bl	800327c <__NVIC_EnableIRQ>
}
 800341a:	bf00      	nop
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ffa2 	bl	8003374 <SysTick_Config>
 8003430:	4603      	mov	r3, r0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d005      	beq.n	800345e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2204      	movs	r2, #4
 8003456:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	73fb      	strb	r3, [r7, #15]
 800345c:	e029      	b.n	80034b2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 020e 	bic.w	r2, r2, #14
 800346c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0201 	bic.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	f003 021c 	and.w	r2, r3, #28
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2101      	movs	r1, #1
 800348c:	fa01 f202 	lsl.w	r2, r1, r2
 8003490:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
    }
  }
  return status;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034bc:	b480      	push	{r7}
 80034be:	b087      	sub	sp, #28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ca:	e17f      	b.n	80037cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	2101      	movs	r1, #1
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	fa01 f303 	lsl.w	r3, r1, r3
 80034d8:	4013      	ands	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8171 	beq.w	80037c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0303 	and.w	r3, r3, #3
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d005      	beq.n	80034fc <HAL_GPIO_Init+0x40>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d130      	bne.n	800355e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	2203      	movs	r2, #3
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003532:	2201      	movs	r2, #1
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4013      	ands	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	f003 0201 	and.w	r2, r3, #1
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	2b03      	cmp	r3, #3
 8003568:	d118      	bne.n	800359c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003570:	2201      	movs	r2, #1
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4013      	ands	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	08db      	lsrs	r3, r3, #3
 8003586:	f003 0201 	and.w	r2, r3, #1
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	fa02 f303 	lsl.w	r3, r2, r3
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 0303 	and.w	r3, r3, #3
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d017      	beq.n	80035d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	2203      	movs	r2, #3
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	43db      	mvns	r3, r3
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4013      	ands	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	fa02 f303 	lsl.w	r3, r2, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d123      	bne.n	800362c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	08da      	lsrs	r2, r3, #3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3208      	adds	r2, #8
 80035ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	220f      	movs	r2, #15
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4013      	ands	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f003 0307 	and.w	r3, r3, #7
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	08da      	lsrs	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3208      	adds	r2, #8
 8003626:	6939      	ldr	r1, [r7, #16]
 8003628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	2203      	movs	r2, #3
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4013      	ands	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 0203 	and.w	r2, r3, #3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 80ac 	beq.w	80037c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366e:	4b5f      	ldr	r3, [pc, #380]	; (80037ec <HAL_GPIO_Init+0x330>)
 8003670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003672:	4a5e      	ldr	r2, [pc, #376]	; (80037ec <HAL_GPIO_Init+0x330>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6613      	str	r3, [r2, #96]	; 0x60
 800367a:	4b5c      	ldr	r3, [pc, #368]	; (80037ec <HAL_GPIO_Init+0x330>)
 800367c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003686:	4a5a      	ldr	r2, [pc, #360]	; (80037f0 <HAL_GPIO_Init+0x334>)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	3302      	adds	r3, #2
 800368e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003692:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	220f      	movs	r2, #15
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036b0:	d025      	beq.n	80036fe <HAL_GPIO_Init+0x242>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a4f      	ldr	r2, [pc, #316]	; (80037f4 <HAL_GPIO_Init+0x338>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01f      	beq.n	80036fa <HAL_GPIO_Init+0x23e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a4e      	ldr	r2, [pc, #312]	; (80037f8 <HAL_GPIO_Init+0x33c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d019      	beq.n	80036f6 <HAL_GPIO_Init+0x23a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a4d      	ldr	r2, [pc, #308]	; (80037fc <HAL_GPIO_Init+0x340>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d013      	beq.n	80036f2 <HAL_GPIO_Init+0x236>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a4c      	ldr	r2, [pc, #304]	; (8003800 <HAL_GPIO_Init+0x344>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00d      	beq.n	80036ee <HAL_GPIO_Init+0x232>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a4b      	ldr	r2, [pc, #300]	; (8003804 <HAL_GPIO_Init+0x348>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d007      	beq.n	80036ea <HAL_GPIO_Init+0x22e>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a4a      	ldr	r2, [pc, #296]	; (8003808 <HAL_GPIO_Init+0x34c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_GPIO_Init+0x22a>
 80036e2:	2306      	movs	r3, #6
 80036e4:	e00c      	b.n	8003700 <HAL_GPIO_Init+0x244>
 80036e6:	2307      	movs	r3, #7
 80036e8:	e00a      	b.n	8003700 <HAL_GPIO_Init+0x244>
 80036ea:	2305      	movs	r3, #5
 80036ec:	e008      	b.n	8003700 <HAL_GPIO_Init+0x244>
 80036ee:	2304      	movs	r3, #4
 80036f0:	e006      	b.n	8003700 <HAL_GPIO_Init+0x244>
 80036f2:	2303      	movs	r3, #3
 80036f4:	e004      	b.n	8003700 <HAL_GPIO_Init+0x244>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e002      	b.n	8003700 <HAL_GPIO_Init+0x244>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_GPIO_Init+0x244>
 80036fe:	2300      	movs	r3, #0
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	f002 0203 	and.w	r2, r2, #3
 8003706:	0092      	lsls	r2, r2, #2
 8003708:	4093      	lsls	r3, r2
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4313      	orrs	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003710:	4937      	ldr	r1, [pc, #220]	; (80037f0 <HAL_GPIO_Init+0x334>)
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	089b      	lsrs	r3, r3, #2
 8003716:	3302      	adds	r3, #2
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800371e:	4b3b      	ldr	r3, [pc, #236]	; (800380c <HAL_GPIO_Init+0x350>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	43db      	mvns	r3, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003742:	4a32      	ldr	r2, [pc, #200]	; (800380c <HAL_GPIO_Init+0x350>)
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003748:	4b30      	ldr	r3, [pc, #192]	; (800380c <HAL_GPIO_Init+0x350>)
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	43db      	mvns	r3, r3
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4013      	ands	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800376c:	4a27      	ldr	r2, [pc, #156]	; (800380c <HAL_GPIO_Init+0x350>)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003772:	4b26      	ldr	r3, [pc, #152]	; (800380c <HAL_GPIO_Init+0x350>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	43db      	mvns	r3, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003796:	4a1d      	ldr	r2, [pc, #116]	; (800380c <HAL_GPIO_Init+0x350>)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800379c:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_GPIO_Init+0x350>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4013      	ands	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037c0:	4a12      	ldr	r2, [pc, #72]	; (800380c <HAL_GPIO_Init+0x350>)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	3301      	adds	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	fa22 f303 	lsr.w	r3, r2, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f47f ae78 	bne.w	80034cc <HAL_GPIO_Init+0x10>
  }
}
 80037dc:	bf00      	nop
 80037de:	bf00      	nop
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40010000 	.word	0x40010000
 80037f4:	48000400 	.word	0x48000400
 80037f8:	48000800 	.word	0x48000800
 80037fc:	48000c00 	.word	0x48000c00
 8003800:	48001000 	.word	0x48001000
 8003804:	48001400 	.word	0x48001400
 8003808:	48001800 	.word	0x48001800
 800380c:	40010400 	.word	0x40010400

08003810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	807b      	strh	r3, [r7, #2]
 800381c:	4613      	mov	r3, r2
 800381e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003820:	787b      	ldrb	r3, [r7, #1]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d003      	beq.n	800382e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003826:	887a      	ldrh	r2, [r7, #2]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800382c:	e002      	b.n	8003834 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800382e:	887a      	ldrh	r2, [r7, #2]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a04      	ldr	r2, [pc, #16]	; (800385c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800384a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384e:	6013      	str	r3, [r2, #0]
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40007000 	.word	0x40007000

08003860 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <HAL_PWREx_GetVoltageRange+0x18>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40007000 	.word	0x40007000

0800387c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388a:	d130      	bne.n	80038ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800388c:	4b23      	ldr	r3, [pc, #140]	; (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003898:	d038      	beq.n	800390c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800389a:	4b20      	ldr	r3, [pc, #128]	; (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038a2:	4a1e      	ldr	r2, [pc, #120]	; (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038a8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038aa:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2232      	movs	r2, #50	; 0x32
 80038b0:	fb02 f303 	mul.w	r3, r2, r3
 80038b4:	4a1b      	ldr	r2, [pc, #108]	; (8003924 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0c9b      	lsrs	r3, r3, #18
 80038bc:	3301      	adds	r3, #1
 80038be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038c0:	e002      	b.n	80038c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038c8:	4b14      	ldr	r3, [pc, #80]	; (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038d4:	d102      	bne.n	80038dc <HAL_PWREx_ControlVoltageScaling+0x60>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1f2      	bne.n	80038c2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038dc:	4b0f      	ldr	r3, [pc, #60]	; (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e8:	d110      	bne.n	800390c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e00f      	b.n	800390e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fa:	d007      	beq.n	800390c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80038fc:	4b07      	ldr	r3, [pc, #28]	; (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003904:	4a05      	ldr	r2, [pc, #20]	; (800391c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800390a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3714      	adds	r7, #20
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	40007000 	.word	0x40007000
 8003920:	20000000 	.word	0x20000000
 8003924:	431bde83 	.word	0x431bde83

08003928 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e3ca      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800393a:	4b97      	ldr	r3, [pc, #604]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003944:	4b94      	ldr	r3, [pc, #592]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f003 0303 	and.w	r3, r3, #3
 800394c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0310 	and.w	r3, r3, #16
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80e4 	beq.w	8003b24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d007      	beq.n	8003972 <HAL_RCC_OscConfig+0x4a>
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b0c      	cmp	r3, #12
 8003966:	f040 808b 	bne.w	8003a80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2b01      	cmp	r3, #1
 800396e:	f040 8087 	bne.w	8003a80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003972:	4b89      	ldr	r3, [pc, #548]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d005      	beq.n	800398a <HAL_RCC_OscConfig+0x62>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e3a2      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1a      	ldr	r2, [r3, #32]
 800398e:	4b82      	ldr	r3, [pc, #520]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <HAL_RCC_OscConfig+0x7c>
 800399a:	4b7f      	ldr	r3, [pc, #508]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a2:	e005      	b.n	80039b0 <HAL_RCC_OscConfig+0x88>
 80039a4:	4b7c      	ldr	r3, [pc, #496]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d223      	bcs.n	80039fc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fd55 	bl	8004468 <RCC_SetFlashLatencyFromMSIRange>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e383      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039c8:	4b73      	ldr	r3, [pc, #460]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a72      	ldr	r2, [pc, #456]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039ce:	f043 0308 	orr.w	r3, r3, #8
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	4b70      	ldr	r3, [pc, #448]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	496d      	ldr	r1, [pc, #436]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039e6:	4b6c      	ldr	r3, [pc, #432]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	4968      	ldr	r1, [pc, #416]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	604b      	str	r3, [r1, #4]
 80039fa:	e025      	b.n	8003a48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039fc:	4b66      	ldr	r3, [pc, #408]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a65      	ldr	r2, [pc, #404]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a02:	f043 0308 	orr.w	r3, r3, #8
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	4b63      	ldr	r3, [pc, #396]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	4960      	ldr	r1, [pc, #384]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a1a:	4b5f      	ldr	r3, [pc, #380]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	021b      	lsls	r3, r3, #8
 8003a28:	495b      	ldr	r1, [pc, #364]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d109      	bne.n	8003a48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 fd15 	bl	8004468 <RCC_SetFlashLatencyFromMSIRange>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e343      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a48:	f000 fc4a 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	4b52      	ldr	r3, [pc, #328]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	091b      	lsrs	r3, r3, #4
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	4950      	ldr	r1, [pc, #320]	; (8003b9c <HAL_RCC_OscConfig+0x274>)
 8003a5a:	5ccb      	ldrb	r3, [r1, r3]
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
 8003a64:	4a4e      	ldr	r2, [pc, #312]	; (8003ba0 <HAL_RCC_OscConfig+0x278>)
 8003a66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a68:	4b4e      	ldr	r3, [pc, #312]	; (8003ba4 <HAL_RCC_OscConfig+0x27c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff fb77 	bl	8003160 <HAL_InitTick>
 8003a72:	4603      	mov	r3, r0
 8003a74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d052      	beq.n	8003b22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	e327      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d032      	beq.n	8003aee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a88:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a42      	ldr	r2, [pc, #264]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	f043 0301 	orr.w	r3, r3, #1
 8003a92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003a94:	f7ff fbb4 	bl	8003200 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a9c:	f7ff fbb0 	bl	8003200 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e310      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aae:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0f0      	beq.n	8003a9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aba:	4b37      	ldr	r3, [pc, #220]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a36      	ldr	r2, [pc, #216]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003ac0:	f043 0308 	orr.w	r3, r3, #8
 8003ac4:	6013      	str	r3, [r2, #0]
 8003ac6:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	4931      	ldr	r1, [pc, #196]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ad8:	4b2f      	ldr	r3, [pc, #188]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	492c      	ldr	r1, [pc, #176]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	604b      	str	r3, [r1, #4]
 8003aec:	e01a      	b.n	8003b24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003aee:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a29      	ldr	r2, [pc, #164]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003afa:	f7ff fb81 	bl	8003200 <HAL_GetTick>
 8003afe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b00:	e008      	b.n	8003b14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b02:	f7ff fb7d 	bl	8003200 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e2dd      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b14:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f0      	bne.n	8003b02 <HAL_RCC_OscConfig+0x1da>
 8003b20:	e000      	b.n	8003b24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d074      	beq.n	8003c1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d005      	beq.n	8003b42 <HAL_RCC_OscConfig+0x21a>
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	2b0c      	cmp	r3, #12
 8003b3a:	d10e      	bne.n	8003b5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d10b      	bne.n	8003b5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d064      	beq.n	8003c18 <HAL_RCC_OscConfig+0x2f0>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d160      	bne.n	8003c18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e2ba      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b62:	d106      	bne.n	8003b72 <HAL_RCC_OscConfig+0x24a>
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	e026      	b.n	8003bc0 <HAL_RCC_OscConfig+0x298>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b7a:	d115      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x280>
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a05      	ldr	r2, [pc, #20]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b86:	6013      	str	r3, [r2, #0]
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a02      	ldr	r2, [pc, #8]	; (8003b98 <HAL_RCC_OscConfig+0x270>)
 8003b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	e014      	b.n	8003bc0 <HAL_RCC_OscConfig+0x298>
 8003b96:	bf00      	nop
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	0800ada0 	.word	0x0800ada0
 8003ba0:	20000000 	.word	0x20000000
 8003ba4:	20000004 	.word	0x20000004
 8003ba8:	4ba0      	ldr	r3, [pc, #640]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a9f      	ldr	r2, [pc, #636]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	4b9d      	ldr	r3, [pc, #628]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a9c      	ldr	r2, [pc, #624]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7ff fb1a 	bl	8003200 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7ff fb16 	bl	8003200 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e276      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be2:	4b92      	ldr	r3, [pc, #584]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x2a8>
 8003bee:	e014      	b.n	8003c1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7ff fb06 	bl	8003200 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7ff fb02 	bl	8003200 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e262      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c0a:	4b88      	ldr	r3, [pc, #544]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x2d0>
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d060      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_OscConfig+0x310>
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b0c      	cmp	r3, #12
 8003c30:	d119      	bne.n	8003c66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d116      	bne.n	8003c66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c38:	4b7c      	ldr	r3, [pc, #496]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_OscConfig+0x328>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e23f      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c50:	4b76      	ldr	r3, [pc, #472]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	4973      	ldr	r1, [pc, #460]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c64:	e040      	b.n	8003ce8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d023      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c6e:	4b6f      	ldr	r3, [pc, #444]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a6e      	ldr	r2, [pc, #440]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7a:	f7ff fac1 	bl	8003200 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c82:	f7ff fabd 	bl	8003200 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e21d      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c94:	4b65      	ldr	r3, [pc, #404]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca0:	4b62      	ldr	r3, [pc, #392]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	495f      	ldr	r1, [pc, #380]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
 8003cb4:	e018      	b.n	8003ce8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cb6:	4b5d      	ldr	r3, [pc, #372]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a5c      	ldr	r2, [pc, #368]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc2:	f7ff fa9d 	bl	8003200 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cca:	f7ff fa99 	bl	8003200 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e1f9      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cdc:	4b53      	ldr	r3, [pc, #332]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1f0      	bne.n	8003cca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d03c      	beq.n	8003d6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01c      	beq.n	8003d36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfc:	4b4b      	ldr	r3, [pc, #300]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d02:	4a4a      	ldr	r2, [pc, #296]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0c:	f7ff fa78 	bl	8003200 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d12:	e008      	b.n	8003d26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d14:	f7ff fa74 	bl	8003200 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e1d4      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d26:	4b41      	ldr	r3, [pc, #260]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0ef      	beq.n	8003d14 <HAL_RCC_OscConfig+0x3ec>
 8003d34:	e01b      	b.n	8003d6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d36:	4b3d      	ldr	r3, [pc, #244]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d3c:	4a3b      	ldr	r2, [pc, #236]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d3e:	f023 0301 	bic.w	r3, r3, #1
 8003d42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d46:	f7ff fa5b 	bl	8003200 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4e:	f7ff fa57 	bl	8003200 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e1b7      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d60:	4b32      	ldr	r3, [pc, #200]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1ef      	bne.n	8003d4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80a6 	beq.w	8003ec8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d80:	4b2a      	ldr	r3, [pc, #168]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10d      	bne.n	8003da8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8c:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d90:	4a26      	ldr	r2, [pc, #152]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d96:	6593      	str	r3, [r2, #88]	; 0x58
 8003d98:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da4:	2301      	movs	r3, #1
 8003da6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da8:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <HAL_RCC_OscConfig+0x508>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d118      	bne.n	8003de6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db4:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <HAL_RCC_OscConfig+0x508>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1d      	ldr	r2, [pc, #116]	; (8003e30 <HAL_RCC_OscConfig+0x508>)
 8003dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc0:	f7ff fa1e 	bl	8003200 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc8:	f7ff fa1a 	bl	8003200 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e17a      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dda:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <HAL_RCC_OscConfig+0x508>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d108      	bne.n	8003e00 <HAL_RCC_OscConfig+0x4d8>
 8003dee:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df4:	4a0d      	ldr	r2, [pc, #52]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003dfe:	e029      	b.n	8003e54 <HAL_RCC_OscConfig+0x52c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b05      	cmp	r3, #5
 8003e06:	d115      	bne.n	8003e34 <HAL_RCC_OscConfig+0x50c>
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0e:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003e10:	f043 0304 	orr.w	r3, r3, #4
 8003e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e18:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	4a03      	ldr	r2, [pc, #12]	; (8003e2c <HAL_RCC_OscConfig+0x504>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e28:	e014      	b.n	8003e54 <HAL_RCC_OscConfig+0x52c>
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40007000 	.word	0x40007000
 8003e34:	4b9c      	ldr	r3, [pc, #624]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	4a9b      	ldr	r2, [pc, #620]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003e3c:	f023 0301 	bic.w	r3, r3, #1
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e44:	4b98      	ldr	r3, [pc, #608]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	4a97      	ldr	r2, [pc, #604]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003e4c:	f023 0304 	bic.w	r3, r3, #4
 8003e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d016      	beq.n	8003e8a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5c:	f7ff f9d0 	bl	8003200 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e62:	e00a      	b.n	8003e7a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e64:	f7ff f9cc 	bl	8003200 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e12a      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e7a:	4b8b      	ldr	r3, [pc, #556]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d0ed      	beq.n	8003e64 <HAL_RCC_OscConfig+0x53c>
 8003e88:	e015      	b.n	8003eb6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8a:	f7ff f9b9 	bl	8003200 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e90:	e00a      	b.n	8003ea8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e92:	f7ff f9b5 	bl	8003200 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e113      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ea8:	4b7f      	ldr	r3, [pc, #508]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1ed      	bne.n	8003e92 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eb6:	7ffb      	ldrb	r3, [r7, #31]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d105      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ebc:	4b7a      	ldr	r3, [pc, #488]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec0:	4a79      	ldr	r2, [pc, #484]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80fe 	beq.w	80040ce <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	f040 80d0 	bne.w	800407c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003edc:	4b72      	ldr	r3, [pc, #456]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0203 	and.w	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d130      	bne.n	8003f52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	3b01      	subs	r3, #1
 8003efc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d127      	bne.n	8003f52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d11f      	bne.n	8003f52 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f1c:	2a07      	cmp	r2, #7
 8003f1e:	bf14      	ite	ne
 8003f20:	2201      	movne	r2, #1
 8003f22:	2200      	moveq	r2, #0
 8003f24:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d113      	bne.n	8003f52 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	3b01      	subs	r3, #1
 8003f38:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d109      	bne.n	8003f52 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d06e      	beq.n	8004030 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	2b0c      	cmp	r3, #12
 8003f56:	d069      	beq.n	800402c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f58:	4b53      	ldr	r3, [pc, #332]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d105      	bne.n	8003f70 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f64:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e0ad      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f74:	4b4c      	ldr	r3, [pc, #304]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a4b      	ldr	r2, [pc, #300]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003f7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f7e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f80:	f7ff f93e 	bl	8003200 <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f88:	f7ff f93a 	bl	8003200 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e09a      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f9a:	4b43      	ldr	r3, [pc, #268]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa6:	4b40      	ldr	r3, [pc, #256]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	4b40      	ldr	r3, [pc, #256]	; (80040ac <HAL_RCC_OscConfig+0x784>)
 8003fac:	4013      	ands	r3, r2
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fb6:	3a01      	subs	r2, #1
 8003fb8:	0112      	lsls	r2, r2, #4
 8003fba:	4311      	orrs	r1, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fc0:	0212      	lsls	r2, r2, #8
 8003fc2:	4311      	orrs	r1, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fc8:	0852      	lsrs	r2, r2, #1
 8003fca:	3a01      	subs	r2, #1
 8003fcc:	0552      	lsls	r2, r2, #21
 8003fce:	4311      	orrs	r1, r2
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fd4:	0852      	lsrs	r2, r2, #1
 8003fd6:	3a01      	subs	r2, #1
 8003fd8:	0652      	lsls	r2, r2, #25
 8003fda:	4311      	orrs	r1, r2
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003fe0:	0912      	lsrs	r2, r2, #4
 8003fe2:	0452      	lsls	r2, r2, #17
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	4930      	ldr	r1, [pc, #192]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003fec:	4b2e      	ldr	r3, [pc, #184]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2d      	ldr	r2, [pc, #180]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ff8:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	4a2a      	ldr	r2, [pc, #168]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8003ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004002:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004004:	f7ff f8fc 	bl	8003200 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400c:	f7ff f8f8 	bl	8003200 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e058      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401e:	4b22      	ldr	r3, [pc, #136]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800402a:	e050      	b.n	80040ce <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e04f      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d148      	bne.n	80040ce <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a19      	ldr	r2, [pc, #100]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8004042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004046:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004048:	4b17      	ldr	r3, [pc, #92]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	4a16      	ldr	r2, [pc, #88]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 800404e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004052:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004054:	f7ff f8d4 	bl	8003200 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405c:	f7ff f8d0 	bl	8003200 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e030      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406e:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0x734>
 800407a:	e028      	b.n	80040ce <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b0c      	cmp	r3, #12
 8004080:	d023      	beq.n	80040ca <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004082:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <HAL_RCC_OscConfig+0x780>)
 8004088:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7ff f8b7 	bl	8003200 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004094:	e00c      	b.n	80040b0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004096:	f7ff f8b3 	bl	8003200 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d905      	bls.n	80040b0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e013      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
 80040a8:	40021000 	.word	0x40021000
 80040ac:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b0:	4b09      	ldr	r3, [pc, #36]	; (80040d8 <HAL_RCC_OscConfig+0x7b0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1ec      	bne.n	8004096 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040bc:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_RCC_OscConfig+0x7b0>)
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	4905      	ldr	r1, [pc, #20]	; (80040d8 <HAL_RCC_OscConfig+0x7b0>)
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_RCC_OscConfig+0x7b4>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	60cb      	str	r3, [r1, #12]
 80040c8:	e001      	b.n	80040ce <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e000      	b.n	80040d0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3720      	adds	r7, #32
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40021000 	.word	0x40021000
 80040dc:	feeefffc 	.word	0xfeeefffc

080040e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0e7      	b.n	80042c4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040f4:	4b75      	ldr	r3, [pc, #468]	; (80042cc <HAL_RCC_ClockConfig+0x1ec>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d910      	bls.n	8004124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b72      	ldr	r3, [pc, #456]	; (80042cc <HAL_RCC_ClockConfig+0x1ec>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 0207 	bic.w	r2, r3, #7
 800410a:	4970      	ldr	r1, [pc, #448]	; (80042cc <HAL_RCC_ClockConfig+0x1ec>)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b6e      	ldr	r3, [pc, #440]	; (80042cc <HAL_RCC_ClockConfig+0x1ec>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0cf      	b.n	80042c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d010      	beq.n	8004152 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689a      	ldr	r2, [r3, #8]
 8004134:	4b66      	ldr	r3, [pc, #408]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800413c:	429a      	cmp	r2, r3
 800413e:	d908      	bls.n	8004152 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004140:	4b63      	ldr	r3, [pc, #396]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4960      	ldr	r1, [pc, #384]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d04c      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004166:	4b5a      	ldr	r3, [pc, #360]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d121      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e0a6      	b.n	80042c4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d107      	bne.n	800418e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800417e:	4b54      	ldr	r3, [pc, #336]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d115      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e09a      	b.n	80042c4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d107      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004196:	4b4e      	ldr	r3, [pc, #312]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d109      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e08e      	b.n	80042c4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041a6:	4b4a      	ldr	r3, [pc, #296]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e086      	b.n	80042c4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041b6:	4b46      	ldr	r3, [pc, #280]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f023 0203 	bic.w	r2, r3, #3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	4943      	ldr	r1, [pc, #268]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041c8:	f7ff f81a 	bl	8003200 <HAL_GetTick>
 80041cc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041d0:	f7ff f816 	bl	8003200 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	; 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e06e      	b.n	80042c4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e6:	4b3a      	ldr	r3, [pc, #232]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 020c 	and.w	r2, r3, #12
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d1eb      	bne.n	80041d0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d010      	beq.n	8004226 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	4b31      	ldr	r3, [pc, #196]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004210:	429a      	cmp	r2, r3
 8004212:	d208      	bcs.n	8004226 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004214:	4b2e      	ldr	r3, [pc, #184]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	492b      	ldr	r1, [pc, #172]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004226:	4b29      	ldr	r3, [pc, #164]	; (80042cc <HAL_RCC_ClockConfig+0x1ec>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0307 	and.w	r3, r3, #7
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d210      	bcs.n	8004256 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004234:	4b25      	ldr	r3, [pc, #148]	; (80042cc <HAL_RCC_ClockConfig+0x1ec>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 0207 	bic.w	r2, r3, #7
 800423c:	4923      	ldr	r1, [pc, #140]	; (80042cc <HAL_RCC_ClockConfig+0x1ec>)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	4313      	orrs	r3, r2
 8004242:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004244:	4b21      	ldr	r3, [pc, #132]	; (80042cc <HAL_RCC_ClockConfig+0x1ec>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d001      	beq.n	8004256 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e036      	b.n	80042c4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b00      	cmp	r3, #0
 8004260:	d008      	beq.n	8004274 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004262:	4b1b      	ldr	r3, [pc, #108]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	4918      	ldr	r1, [pc, #96]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004270:	4313      	orrs	r3, r2
 8004272:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d009      	beq.n	8004294 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004280:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	4910      	ldr	r1, [pc, #64]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 8004290:	4313      	orrs	r3, r2
 8004292:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004294:	f000 f824 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 8004298:	4602      	mov	r2, r0
 800429a:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <HAL_RCC_ClockConfig+0x1f0>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	091b      	lsrs	r3, r3, #4
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	490b      	ldr	r1, [pc, #44]	; (80042d4 <HAL_RCC_ClockConfig+0x1f4>)
 80042a6:	5ccb      	ldrb	r3, [r1, r3]
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
 80042b0:	4a09      	ldr	r2, [pc, #36]	; (80042d8 <HAL_RCC_ClockConfig+0x1f8>)
 80042b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042b4:	4b09      	ldr	r3, [pc, #36]	; (80042dc <HAL_RCC_ClockConfig+0x1fc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fe ff51 	bl	8003160 <HAL_InitTick>
 80042be:	4603      	mov	r3, r0
 80042c0:	72fb      	strb	r3, [r7, #11]

  return status;
 80042c2:	7afb      	ldrb	r3, [r7, #11]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40022000 	.word	0x40022000
 80042d0:	40021000 	.word	0x40021000
 80042d4:	0800ada0 	.word	0x0800ada0
 80042d8:	20000000 	.word	0x20000000
 80042dc:	20000004 	.word	0x20000004

080042e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b089      	sub	sp, #36	; 0x24
 80042e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ee:	4b3e      	ldr	r3, [pc, #248]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
 80042f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042f8:	4b3b      	ldr	r3, [pc, #236]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d005      	beq.n	8004314 <HAL_RCC_GetSysClockFreq+0x34>
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b0c      	cmp	r3, #12
 800430c:	d121      	bne.n	8004352 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d11e      	bne.n	8004352 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004314:	4b34      	ldr	r3, [pc, #208]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004320:	4b31      	ldr	r3, [pc, #196]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	61fb      	str	r3, [r7, #28]
 800432e:	e005      	b.n	800433c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004330:	4b2d      	ldr	r3, [pc, #180]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	091b      	lsrs	r3, r3, #4
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800433c:	4a2b      	ldr	r2, [pc, #172]	; (80043ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004344:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10d      	bne.n	8004368 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004350:	e00a      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b04      	cmp	r3, #4
 8004356:	d102      	bne.n	800435e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004358:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	e004      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	2b08      	cmp	r3, #8
 8004362:	d101      	bne.n	8004368 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004364:	4b23      	ldr	r3, [pc, #140]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004366:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	2b0c      	cmp	r3, #12
 800436c:	d134      	bne.n	80043d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800436e:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b02      	cmp	r3, #2
 800437c:	d003      	beq.n	8004386 <HAL_RCC_GetSysClockFreq+0xa6>
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2b03      	cmp	r3, #3
 8004382:	d003      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0xac>
 8004384:	e005      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004386:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004388:	617b      	str	r3, [r7, #20]
      break;
 800438a:	e005      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800438e:	617b      	str	r3, [r7, #20]
      break;
 8004390:	e002      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	617b      	str	r3, [r7, #20]
      break;
 8004396:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004398:	4b13      	ldr	r3, [pc, #76]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	091b      	lsrs	r3, r3, #4
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	3301      	adds	r3, #1
 80043a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	0a1b      	lsrs	r3, r3, #8
 80043ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	fb03 f202 	mul.w	r2, r3, r2
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043be:	4b0a      	ldr	r3, [pc, #40]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	0e5b      	lsrs	r3, r3, #25
 80043c4:	f003 0303 	and.w	r3, r3, #3
 80043c8:	3301      	adds	r3, #1
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043d8:	69bb      	ldr	r3, [r7, #24]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3724      	adds	r7, #36	; 0x24
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40021000 	.word	0x40021000
 80043ec:	0800adb8 	.word	0x0800adb8
 80043f0:	00f42400 	.word	0x00f42400
 80043f4:	007a1200 	.word	0x007a1200

080043f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043fc:	4b03      	ldr	r3, [pc, #12]	; (800440c <HAL_RCC_GetHCLKFreq+0x14>)
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	20000000 	.word	0x20000000

08004410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004414:	f7ff fff0 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 8004418:	4602      	mov	r2, r0
 800441a:	4b06      	ldr	r3, [pc, #24]	; (8004434 <HAL_RCC_GetPCLK1Freq+0x24>)
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	4904      	ldr	r1, [pc, #16]	; (8004438 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004426:	5ccb      	ldrb	r3, [r1, r3]
 8004428:	f003 031f 	and.w	r3, r3, #31
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000
 8004438:	0800adb0 	.word	0x0800adb0

0800443c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004440:	f7ff ffda 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 8004444:	4602      	mov	r2, r0
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	0adb      	lsrs	r3, r3, #11
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	4904      	ldr	r1, [pc, #16]	; (8004464 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004452:	5ccb      	ldrb	r3, [r1, r3]
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800445c:	4618      	mov	r0, r3
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40021000 	.word	0x40021000
 8004464:	0800adb0 	.word	0x0800adb0

08004468 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004470:	2300      	movs	r3, #0
 8004472:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004474:	4b2a      	ldr	r3, [pc, #168]	; (8004520 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004480:	f7ff f9ee 	bl	8003860 <HAL_PWREx_GetVoltageRange>
 8004484:	6178      	str	r0, [r7, #20]
 8004486:	e014      	b.n	80044b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004488:	4b25      	ldr	r3, [pc, #148]	; (8004520 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800448a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448c:	4a24      	ldr	r2, [pc, #144]	; (8004520 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800448e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004492:	6593      	str	r3, [r2, #88]	; 0x58
 8004494:	4b22      	ldr	r3, [pc, #136]	; (8004520 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449c:	60fb      	str	r3, [r7, #12]
 800449e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044a0:	f7ff f9de 	bl	8003860 <HAL_PWREx_GetVoltageRange>
 80044a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044a6:	4b1e      	ldr	r3, [pc, #120]	; (8004520 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044aa:	4a1d      	ldr	r2, [pc, #116]	; (8004520 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044b8:	d10b      	bne.n	80044d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b80      	cmp	r3, #128	; 0x80
 80044be:	d919      	bls.n	80044f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2ba0      	cmp	r3, #160	; 0xa0
 80044c4:	d902      	bls.n	80044cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044c6:	2302      	movs	r3, #2
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	e013      	b.n	80044f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044cc:	2301      	movs	r3, #1
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	e010      	b.n	80044f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b80      	cmp	r3, #128	; 0x80
 80044d6:	d902      	bls.n	80044de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044d8:	2303      	movs	r3, #3
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	e00a      	b.n	80044f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b80      	cmp	r3, #128	; 0x80
 80044e2:	d102      	bne.n	80044ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044e4:	2302      	movs	r3, #2
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	e004      	b.n	80044f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2b70      	cmp	r3, #112	; 0x70
 80044ee:	d101      	bne.n	80044f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044f0:	2301      	movs	r3, #1
 80044f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80044f4:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 0207 	bic.w	r2, r3, #7
 80044fc:	4909      	ldr	r1, [pc, #36]	; (8004524 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4313      	orrs	r3, r2
 8004502:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	429a      	cmp	r2, r3
 8004510:	d001      	beq.n	8004516 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e000      	b.n	8004518 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40021000 	.word	0x40021000
 8004524:	40022000 	.word	0x40022000

08004528 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004530:	2300      	movs	r3, #0
 8004532:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004534:	2300      	movs	r3, #0
 8004536:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004540:	2b00      	cmp	r3, #0
 8004542:	d041      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004548:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800454c:	d02a      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800454e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004552:	d824      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004554:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004558:	d008      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800455a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800455e:	d81e      	bhi.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004568:	d010      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800456a:	e018      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800456c:	4b86      	ldr	r3, [pc, #536]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4a85      	ldr	r2, [pc, #532]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004576:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004578:	e015      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3304      	adds	r3, #4
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f000 facb 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800458a:	e00c      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3320      	adds	r3, #32
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fbb6 	bl	8004d04 <RCCEx_PLLSAI2_Config>
 8004598:	4603      	mov	r3, r0
 800459a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800459c:	e003      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	74fb      	strb	r3, [r7, #19]
      break;
 80045a2:	e000      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045a6:	7cfb      	ldrb	r3, [r7, #19]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10b      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045ac:	4b76      	ldr	r3, [pc, #472]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ba:	4973      	ldr	r1, [pc, #460]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045c2:	e001      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d041      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045dc:	d02a      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045e2:	d824      	bhi.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045e8:	d008      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045ee:	d81e      	bhi.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80045f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045f8:	d010      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80045fa:	e018      	b.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045fc:	4b62      	ldr	r3, [pc, #392]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	4a61      	ldr	r2, [pc, #388]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004606:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004608:	e015      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3304      	adds	r3, #4
 800460e:	2100      	movs	r1, #0
 8004610:	4618      	mov	r0, r3
 8004612:	f000 fa83 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 8004616:	4603      	mov	r3, r0
 8004618:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800461a:	e00c      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3320      	adds	r3, #32
 8004620:	2100      	movs	r1, #0
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fb6e 	bl	8004d04 <RCCEx_PLLSAI2_Config>
 8004628:	4603      	mov	r3, r0
 800462a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800462c:	e003      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	74fb      	strb	r3, [r7, #19]
      break;
 8004632:	e000      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004636:	7cfb      	ldrb	r3, [r7, #19]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10b      	bne.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800463c:	4b52      	ldr	r3, [pc, #328]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004642:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800464a:	494f      	ldr	r1, [pc, #316]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004652:	e001      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004654:	7cfb      	ldrb	r3, [r7, #19]
 8004656:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004660:	2b00      	cmp	r3, #0
 8004662:	f000 80a0 	beq.w	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004666:	2300      	movs	r3, #0
 8004668:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800466a:	4b47      	ldr	r3, [pc, #284]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004676:	2301      	movs	r3, #1
 8004678:	e000      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800467a:	2300      	movs	r3, #0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00d      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004680:	4b41      	ldr	r3, [pc, #260]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004684:	4a40      	ldr	r2, [pc, #256]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468a:	6593      	str	r3, [r2, #88]	; 0x58
 800468c:	4b3e      	ldr	r3, [pc, #248]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004698:	2301      	movs	r3, #1
 800469a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800469c:	4b3b      	ldr	r3, [pc, #236]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a3a      	ldr	r2, [pc, #232]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046a8:	f7fe fdaa 	bl	8003200 <HAL_GetTick>
 80046ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046ae:	e009      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b0:	f7fe fda6 	bl	8003200 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d902      	bls.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	74fb      	strb	r3, [r7, #19]
        break;
 80046c2:	e005      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046c4:	4b31      	ldr	r3, [pc, #196]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ef      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80046d0:	7cfb      	ldrb	r3, [r7, #19]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d15c      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046d6:	4b2c      	ldr	r3, [pc, #176]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01f      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d019      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046f4:	4b24      	ldr	r3, [pc, #144]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004700:	4b21      	ldr	r3, [pc, #132]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004706:	4a20      	ldr	r2, [pc, #128]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800470c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004710:	4b1d      	ldr	r3, [pc, #116]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004716:	4a1c      	ldr	r2, [pc, #112]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800471c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004720:	4a19      	ldr	r2, [pc, #100]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d016      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004732:	f7fe fd65 	bl	8003200 <HAL_GetTick>
 8004736:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004738:	e00b      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fe fd61 	bl	8003200 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f241 3288 	movw	r2, #5000	; 0x1388
 8004748:	4293      	cmp	r3, r2
 800474a:	d902      	bls.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	74fb      	strb	r3, [r7, #19]
            break;
 8004750:	e006      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004752:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ec      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10c      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004766:	4b08      	ldr	r3, [pc, #32]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004776:	4904      	ldr	r1, [pc, #16]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800477e:	e009      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	74bb      	strb	r3, [r7, #18]
 8004784:	e006      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
 800478c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004790:	7cfb      	ldrb	r3, [r7, #19]
 8004792:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004794:	7c7b      	ldrb	r3, [r7, #17]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d105      	bne.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800479a:	4b9e      	ldr	r3, [pc, #632]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479e:	4a9d      	ldr	r2, [pc, #628]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047b2:	4b98      	ldr	r3, [pc, #608]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	f023 0203 	bic.w	r2, r3, #3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c0:	4994      	ldr	r1, [pc, #592]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047d4:	4b8f      	ldr	r3, [pc, #572]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f023 020c 	bic.w	r2, r3, #12
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e2:	498c      	ldr	r1, [pc, #560]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047f6:	4b87      	ldr	r3, [pc, #540]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	4983      	ldr	r1, [pc, #524]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0308 	and.w	r3, r3, #8
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004818:	4b7e      	ldr	r3, [pc, #504]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	497b      	ldr	r1, [pc, #492]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800483a:	4b76      	ldr	r3, [pc, #472]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004848:	4972      	ldr	r1, [pc, #456]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0320 	and.w	r3, r3, #32
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800485c:	4b6d      	ldr	r3, [pc, #436]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004862:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486a:	496a      	ldr	r1, [pc, #424]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00a      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800487e:	4b65      	ldr	r3, [pc, #404]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800488c:	4961      	ldr	r1, [pc, #388]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048a0:	4b5c      	ldr	r3, [pc, #368]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ae:	4959      	ldr	r1, [pc, #356]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048c2:	4b54      	ldr	r3, [pc, #336]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d0:	4950      	ldr	r1, [pc, #320]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048e4:	4b4b      	ldr	r3, [pc, #300]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f2:	4948      	ldr	r1, [pc, #288]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004906:	4b43      	ldr	r3, [pc, #268]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004914:	493f      	ldr	r1, [pc, #252]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d028      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004928:	4b3a      	ldr	r3, [pc, #232]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004936:	4937      	ldr	r1, [pc, #220]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004942:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004946:	d106      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004948:	4b32      	ldr	r3, [pc, #200]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	4a31      	ldr	r2, [pc, #196]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004952:	60d3      	str	r3, [r2, #12]
 8004954:	e011      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800495e:	d10c      	bne.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	2101      	movs	r1, #1
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f8d8 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004970:	7cfb      	ldrb	r3, [r7, #19]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004976:	7cfb      	ldrb	r3, [r7, #19]
 8004978:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d028      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004986:	4b23      	ldr	r3, [pc, #140]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	491f      	ldr	r1, [pc, #124]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049a4:	d106      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049a6:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	4a1a      	ldr	r2, [pc, #104]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049b0:	60d3      	str	r3, [r2, #12]
 80049b2:	e011      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049bc:	d10c      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3304      	adds	r3, #4
 80049c2:	2101      	movs	r1, #1
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 f8a9 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 80049ca:	4603      	mov	r3, r0
 80049cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049ce:	7cfb      	ldrb	r3, [r7, #19]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049d4:	7cfb      	ldrb	r3, [r7, #19]
 80049d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d02b      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049f2:	4908      	ldr	r1, [pc, #32]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a02:	d109      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a04:	4b03      	ldr	r3, [pc, #12]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	4a02      	ldr	r2, [pc, #8]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a0e:	60d3      	str	r3, [r2, #12]
 8004a10:	e014      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a20:	d10c      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3304      	adds	r3, #4
 8004a26:	2101      	movs	r1, #1
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 f877 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a32:	7cfb      	ldrb	r3, [r7, #19]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a38:	7cfb      	ldrb	r3, [r7, #19]
 8004a3a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d02f      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a48:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a56:	4928      	ldr	r1, [pc, #160]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a66:	d10d      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f854 	bl	8004b1c <RCCEx_PLLSAI1_Config>
 8004a74:	4603      	mov	r3, r0
 8004a76:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a78:	7cfb      	ldrb	r3, [r7, #19]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d014      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a7e:	7cfb      	ldrb	r3, [r7, #19]
 8004a80:	74bb      	strb	r3, [r7, #18]
 8004a82:	e011      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3320      	adds	r3, #32
 8004a92:	2102      	movs	r1, #2
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 f935 	bl	8004d04 <RCCEx_PLLSAI2_Config>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a9e:	7cfb      	ldrb	r3, [r7, #19]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ab4:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac2:	490d      	ldr	r1, [pc, #52]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ad6:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004adc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ae6:	4904      	ldr	r1, [pc, #16]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004aee:	7cbb      	ldrb	r3, [r7, #18]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3718      	adds	r7, #24
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40021000 	.word	0x40021000

08004afc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004afc:	b480      	push	{r7}
 8004afe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a04      	ldr	r2, [pc, #16]	; (8004b18 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004b06:	f043 0304 	orr.w	r3, r3, #4
 8004b0a:	6013      	str	r3, [r2, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40021000 	.word	0x40021000

08004b1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b26:	2300      	movs	r3, #0
 8004b28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b2a:	4b75      	ldr	r3, [pc, #468]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d018      	beq.n	8004b68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b36:	4b72      	ldr	r3, [pc, #456]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	f003 0203 	and.w	r2, r3, #3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d10d      	bne.n	8004b62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
       ||
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b4e:	4b6c      	ldr	r3, [pc, #432]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	091b      	lsrs	r3, r3, #4
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
       ||
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d047      	beq.n	8004bf2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	73fb      	strb	r3, [r7, #15]
 8004b66:	e044      	b.n	8004bf2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d018      	beq.n	8004ba2 <RCCEx_PLLSAI1_Config+0x86>
 8004b70:	2b03      	cmp	r3, #3
 8004b72:	d825      	bhi.n	8004bc0 <RCCEx_PLLSAI1_Config+0xa4>
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d002      	beq.n	8004b7e <RCCEx_PLLSAI1_Config+0x62>
 8004b78:	2b02      	cmp	r3, #2
 8004b7a:	d009      	beq.n	8004b90 <RCCEx_PLLSAI1_Config+0x74>
 8004b7c:	e020      	b.n	8004bc0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b7e:	4b60      	ldr	r3, [pc, #384]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d11d      	bne.n	8004bc6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b8e:	e01a      	b.n	8004bc6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b90:	4b5b      	ldr	r3, [pc, #364]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d116      	bne.n	8004bca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ba0:	e013      	b.n	8004bca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ba2:	4b57      	ldr	r3, [pc, #348]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10f      	bne.n	8004bce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bae:	4b54      	ldr	r3, [pc, #336]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bbe:	e006      	b.n	8004bce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc4:	e004      	b.n	8004bd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bc6:	bf00      	nop
 8004bc8:	e002      	b.n	8004bd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bca:	bf00      	nop
 8004bcc:	e000      	b.n	8004bd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bce:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bd0:	7bfb      	ldrb	r3, [r7, #15]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10d      	bne.n	8004bf2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bd6:	4b4a      	ldr	r3, [pc, #296]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6819      	ldr	r1, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	430b      	orrs	r3, r1
 8004bec:	4944      	ldr	r1, [pc, #272]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bf2:	7bfb      	ldrb	r3, [r7, #15]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d17d      	bne.n	8004cf4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bf8:	4b41      	ldr	r3, [pc, #260]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a40      	ldr	r2, [pc, #256]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c04:	f7fe fafc 	bl	8003200 <HAL_GetTick>
 8004c08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c0a:	e009      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c0c:	f7fe faf8 	bl	8003200 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d902      	bls.n	8004c20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c1e:	e005      	b.n	8004c2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c20:	4b37      	ldr	r3, [pc, #220]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1ef      	bne.n	8004c0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d160      	bne.n	8004cf4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d111      	bne.n	8004c5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c38:	4b31      	ldr	r3, [pc, #196]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6892      	ldr	r2, [r2, #8]
 8004c48:	0211      	lsls	r1, r2, #8
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	68d2      	ldr	r2, [r2, #12]
 8004c4e:	0912      	lsrs	r2, r2, #4
 8004c50:	0452      	lsls	r2, r2, #17
 8004c52:	430a      	orrs	r2, r1
 8004c54:	492a      	ldr	r1, [pc, #168]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	610b      	str	r3, [r1, #16]
 8004c5a:	e027      	b.n	8004cac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d112      	bne.n	8004c88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c62:	4b27      	ldr	r3, [pc, #156]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6892      	ldr	r2, [r2, #8]
 8004c72:	0211      	lsls	r1, r2, #8
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6912      	ldr	r2, [r2, #16]
 8004c78:	0852      	lsrs	r2, r2, #1
 8004c7a:	3a01      	subs	r2, #1
 8004c7c:	0552      	lsls	r2, r2, #21
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	491f      	ldr	r1, [pc, #124]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	610b      	str	r3, [r1, #16]
 8004c86:	e011      	b.n	8004cac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c88:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6892      	ldr	r2, [r2, #8]
 8004c98:	0211      	lsls	r1, r2, #8
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6952      	ldr	r2, [r2, #20]
 8004c9e:	0852      	lsrs	r2, r2, #1
 8004ca0:	3a01      	subs	r2, #1
 8004ca2:	0652      	lsls	r2, r2, #25
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	4916      	ldr	r1, [pc, #88]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004cac:	4b14      	ldr	r3, [pc, #80]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a13      	ldr	r2, [pc, #76]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb8:	f7fe faa2 	bl	8003200 <HAL_GetTick>
 8004cbc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cbe:	e009      	b.n	8004cd4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cc0:	f7fe fa9e 	bl	8003200 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d902      	bls.n	8004cd4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	73fb      	strb	r3, [r7, #15]
          break;
 8004cd2:	e005      	b.n	8004ce0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0ef      	beq.n	8004cc0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d106      	bne.n	8004cf4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ce6:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	4904      	ldr	r1, [pc, #16]	; (8004d00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	40021000 	.word	0x40021000

08004d04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d12:	4b6a      	ldr	r3, [pc, #424]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d018      	beq.n	8004d50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d1e:	4b67      	ldr	r3, [pc, #412]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f003 0203 	and.w	r2, r3, #3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d10d      	bne.n	8004d4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
       ||
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d36:	4b61      	ldr	r3, [pc, #388]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	091b      	lsrs	r3, r3, #4
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
       ||
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d047      	beq.n	8004dda <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
 8004d4e:	e044      	b.n	8004dda <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d018      	beq.n	8004d8a <RCCEx_PLLSAI2_Config+0x86>
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d825      	bhi.n	8004da8 <RCCEx_PLLSAI2_Config+0xa4>
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d002      	beq.n	8004d66 <RCCEx_PLLSAI2_Config+0x62>
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d009      	beq.n	8004d78 <RCCEx_PLLSAI2_Config+0x74>
 8004d64:	e020      	b.n	8004da8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d66:	4b55      	ldr	r3, [pc, #340]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d11d      	bne.n	8004dae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d76:	e01a      	b.n	8004dae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d78:	4b50      	ldr	r3, [pc, #320]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d116      	bne.n	8004db2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d88:	e013      	b.n	8004db2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d8a:	4b4c      	ldr	r3, [pc, #304]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10f      	bne.n	8004db6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d96:	4b49      	ldr	r3, [pc, #292]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d109      	bne.n	8004db6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004da6:	e006      	b.n	8004db6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dac:	e004      	b.n	8004db8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004dae:	bf00      	nop
 8004db0:	e002      	b.n	8004db8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004db2:	bf00      	nop
 8004db4:	e000      	b.n	8004db8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004db6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10d      	bne.n	8004dda <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dbe:	4b3f      	ldr	r3, [pc, #252]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	4939      	ldr	r1, [pc, #228]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d167      	bne.n	8004eb0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004de0:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a35      	ldr	r2, [pc, #212]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dec:	f7fe fa08 	bl	8003200 <HAL_GetTick>
 8004df0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004df2:	e009      	b.n	8004e08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004df4:	f7fe fa04 	bl	8003200 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d902      	bls.n	8004e08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	73fb      	strb	r3, [r7, #15]
        break;
 8004e06:	e005      	b.n	8004e14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e08:	4b2c      	ldr	r3, [pc, #176]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1ef      	bne.n	8004df4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d14a      	bne.n	8004eb0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d111      	bne.n	8004e44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e20:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6892      	ldr	r2, [r2, #8]
 8004e30:	0211      	lsls	r1, r2, #8
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	68d2      	ldr	r2, [r2, #12]
 8004e36:	0912      	lsrs	r2, r2, #4
 8004e38:	0452      	lsls	r2, r2, #17
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	491f      	ldr	r1, [pc, #124]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	614b      	str	r3, [r1, #20]
 8004e42:	e011      	b.n	8004e68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e44:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6892      	ldr	r2, [r2, #8]
 8004e54:	0211      	lsls	r1, r2, #8
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6912      	ldr	r2, [r2, #16]
 8004e5a:	0852      	lsrs	r2, r2, #1
 8004e5c:	3a01      	subs	r2, #1
 8004e5e:	0652      	lsls	r2, r2, #25
 8004e60:	430a      	orrs	r2, r1
 8004e62:	4916      	ldr	r1, [pc, #88]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e68:	4b14      	ldr	r3, [pc, #80]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a13      	ldr	r2, [pc, #76]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e74:	f7fe f9c4 	bl	8003200 <HAL_GetTick>
 8004e78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e7a:	e009      	b.n	8004e90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e7c:	f7fe f9c0 	bl	8003200 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d902      	bls.n	8004e90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	73fb      	strb	r3, [r7, #15]
          break;
 8004e8e:	e005      	b.n	8004e9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e90:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0ef      	beq.n	8004e7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ea2:	4b06      	ldr	r3, [pc, #24]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea4:	695a      	ldr	r2, [r3, #20]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	4904      	ldr	r1, [pc, #16]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000

08004ec0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e095      	b.n	8004ffe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d108      	bne.n	8004eec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ee2:	d009      	beq.n	8004ef8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	61da      	str	r2, [r3, #28]
 8004eea:	e005      	b.n	8004ef8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fd febc 	bl	8002c90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f38:	d902      	bls.n	8004f40 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e002      	b.n	8004f46 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f44:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f4e:	d007      	beq.n	8004f60 <HAL_SPI_Init+0xa0>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f58:	d002      	beq.n	8004f60 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f70:	431a      	orrs	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	ea42 0103 	orr.w	r1, r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004faa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	0c1b      	lsrs	r3, r3, #16
 8004fbc:	f003 0204 	and.w	r2, r3, #4
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004fdc:	ea42 0103 	orr.w	r1, r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b088      	sub	sp, #32
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	4613      	mov	r3, r2
 8005014:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_SPI_Transmit+0x22>
 8005024:	2302      	movs	r3, #2
 8005026:	e15f      	b.n	80052e8 <HAL_SPI_Transmit+0x2e2>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005030:	f7fe f8e6 	bl	8003200 <HAL_GetTick>
 8005034:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b01      	cmp	r3, #1
 8005044:	d002      	beq.n	800504c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005046:	2302      	movs	r3, #2
 8005048:	77fb      	strb	r3, [r7, #31]
    goto error;
 800504a:	e148      	b.n	80052de <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d002      	beq.n	8005058 <HAL_SPI_Transmit+0x52>
 8005052:	88fb      	ldrh	r3, [r7, #6]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d102      	bne.n	800505e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800505c:	e13f      	b.n	80052de <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2203      	movs	r2, #3
 8005062:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	88fa      	ldrh	r2, [r7, #6]
 8005076:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	88fa      	ldrh	r2, [r7, #6]
 800507c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2200      	movs	r2, #0
 8005082:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a8:	d10f      	bne.n	80050ca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d007      	beq.n	80050e8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050f0:	d94f      	bls.n	8005192 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_SPI_Transmit+0xfa>
 80050fa:	8afb      	ldrh	r3, [r7, #22]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d142      	bne.n	8005186 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	881a      	ldrh	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	1c9a      	adds	r2, r3, #2
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005124:	e02f      	b.n	8005186 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b02      	cmp	r3, #2
 8005132:	d112      	bne.n	800515a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	881a      	ldrh	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005144:	1c9a      	adds	r2, r3, #2
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005158:	e015      	b.n	8005186 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800515a:	f7fe f851 	bl	8003200 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d803      	bhi.n	8005172 <HAL_SPI_Transmit+0x16c>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005170:	d102      	bne.n	8005178 <HAL_SPI_Transmit+0x172>
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d106      	bne.n	8005186 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005184:	e0ab      	b.n	80052de <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800518a:	b29b      	uxth	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d1ca      	bne.n	8005126 <HAL_SPI_Transmit+0x120>
 8005190:	e080      	b.n	8005294 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_SPI_Transmit+0x19a>
 800519a:	8afb      	ldrh	r3, [r7, #22]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d174      	bne.n	800528a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d912      	bls.n	80051d0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ae:	881a      	ldrh	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	1c9a      	adds	r2, r3, #2
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b02      	subs	r3, #2
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051ce:	e05c      	b.n	800528a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	7812      	ldrb	r2, [r2, #0]
 80051dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80051f6:	e048      	b.n	800528a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b02      	cmp	r3, #2
 8005204:	d12b      	bne.n	800525e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b01      	cmp	r3, #1
 800520e:	d912      	bls.n	8005236 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	881a      	ldrh	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	1c9a      	adds	r2, r3, #2
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b02      	subs	r3, #2
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005234:	e029      	b.n	800528a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	330c      	adds	r3, #12
 8005240:	7812      	ldrb	r2, [r2, #0]
 8005242:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800525c:	e015      	b.n	800528a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800525e:	f7fd ffcf 	bl	8003200 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	683a      	ldr	r2, [r7, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d803      	bhi.n	8005276 <HAL_SPI_Transmit+0x270>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005274:	d102      	bne.n	800527c <HAL_SPI_Transmit+0x276>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d106      	bne.n	800528a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005288:	e029      	b.n	80052de <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800528e:	b29b      	uxth	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1b1      	bne.n	80051f8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005294:	69ba      	ldr	r2, [r7, #24]
 8005296:	6839      	ldr	r1, [r7, #0]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 fe0d 	bl	8005eb8 <SPI_EndRxTxTransaction>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052b2:	2300      	movs	r3, #0
 80052b4:	613b      	str	r3, [r7, #16]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	77fb      	strb	r3, [r7, #31]
 80052d4:	e003      	b.n	80052de <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af02      	add	r7, sp, #8
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	603b      	str	r3, [r7, #0]
 80052fc:	4613      	mov	r3, r2
 80052fe:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800530a:	b2db      	uxtb	r3, r3
 800530c:	2b01      	cmp	r3, #1
 800530e:	d002      	beq.n	8005316 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005310:	2302      	movs	r3, #2
 8005312:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005314:	e11a      	b.n	800554c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800531e:	d112      	bne.n	8005346 <HAL_SPI_Receive+0x56>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10e      	bne.n	8005346 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2204      	movs	r2, #4
 800532c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005330:	88fa      	ldrh	r2, [r7, #6]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	4613      	mov	r3, r2
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f000 f90e 	bl	800555e <HAL_SPI_TransmitReceive>
 8005342:	4603      	mov	r3, r0
 8005344:	e107      	b.n	8005556 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_SPI_Receive+0x64>
 8005350:	2302      	movs	r3, #2
 8005352:	e100      	b.n	8005556 <HAL_SPI_Receive+0x266>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800535c:	f7fd ff50 	bl	8003200 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d002      	beq.n	800536e <HAL_SPI_Receive+0x7e>
 8005368:	88fb      	ldrh	r3, [r7, #6]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d102      	bne.n	8005374 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005372:	e0eb      	b.n	800554c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2204      	movs	r2, #4
 8005378:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	88fa      	ldrh	r2, [r7, #6]
 800538c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	88fa      	ldrh	r2, [r7, #6]
 8005394:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053be:	d908      	bls.n	80053d2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053ce:	605a      	str	r2, [r3, #4]
 80053d0:	e007      	b.n	80053e2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053e0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053ea:	d10f      	bne.n	800540c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800540a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	d007      	beq.n	800542a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005428:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005432:	d86f      	bhi.n	8005514 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005434:	e034      	b.n	80054a0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b01      	cmp	r3, #1
 8005442:	d117      	bne.n	8005474 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f103 020c 	add.w	r2, r3, #12
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	7812      	ldrb	r2, [r2, #0]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005472:	e015      	b.n	80054a0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005474:	f7fd fec4 	bl	8003200 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d803      	bhi.n	800548c <HAL_SPI_Receive+0x19c>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548a:	d102      	bne.n	8005492 <HAL_SPI_Receive+0x1a2>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800549e:	e055      	b.n	800554c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1c4      	bne.n	8005436 <HAL_SPI_Receive+0x146>
 80054ac:	e038      	b.n	8005520 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d115      	bne.n	80054e8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c6:	b292      	uxth	r2, r2
 80054c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	1c9a      	adds	r2, r3, #2
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80054e6:	e015      	b.n	8005514 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054e8:	f7fd fe8a 	bl	8003200 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d803      	bhi.n	8005500 <HAL_SPI_Receive+0x210>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d102      	bne.n	8005506 <HAL_SPI_Receive+0x216>
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005512:	e01b      	b.n	800554c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1c6      	bne.n	80054ae <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 fc6f 	bl	8005e08 <SPI_EndRxTransaction>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	75fb      	strb	r3, [r7, #23]
 8005542:	e003      	b.n	800554c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005554:	7dfb      	ldrb	r3, [r7, #23]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b08a      	sub	sp, #40	; 0x28
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	607a      	str	r2, [r7, #4]
 800556a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800556c:	2301      	movs	r3, #1
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_SPI_TransmitReceive+0x26>
 8005580:	2302      	movs	r3, #2
 8005582:	e20a      	b.n	800599a <HAL_SPI_TransmitReceive+0x43c>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800558c:	f7fd fe38 	bl	8003200 <HAL_GetTick>
 8005590:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005598:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80055a0:	887b      	ldrh	r3, [r7, #2]
 80055a2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80055a4:	887b      	ldrh	r3, [r7, #2]
 80055a6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055a8:	7efb      	ldrb	r3, [r7, #27]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d00e      	beq.n	80055cc <HAL_SPI_TransmitReceive+0x6e>
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055b4:	d106      	bne.n	80055c4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d102      	bne.n	80055c4 <HAL_SPI_TransmitReceive+0x66>
 80055be:	7efb      	ldrb	r3, [r7, #27]
 80055c0:	2b04      	cmp	r3, #4
 80055c2:	d003      	beq.n	80055cc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80055c4:	2302      	movs	r3, #2
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80055ca:	e1e0      	b.n	800598e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_SPI_TransmitReceive+0x80>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <HAL_SPI_TransmitReceive+0x80>
 80055d8:	887b      	ldrh	r3, [r7, #2]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d103      	bne.n	80055e6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80055e4:	e1d3      	b.n	800598e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d003      	beq.n	80055fa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2205      	movs	r2, #5
 80055f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	887a      	ldrh	r2, [r7, #2]
 800560a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	887a      	ldrh	r2, [r7, #2]
 8005612:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	887a      	ldrh	r2, [r7, #2]
 8005620:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	887a      	ldrh	r2, [r7, #2]
 8005626:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800563c:	d802      	bhi.n	8005644 <HAL_SPI_TransmitReceive+0xe6>
 800563e:	8a3b      	ldrh	r3, [r7, #16]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d908      	bls.n	8005656 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005652:	605a      	str	r2, [r3, #4]
 8005654:	e007      	b.n	8005666 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005664:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	2b40      	cmp	r3, #64	; 0x40
 8005672:	d007      	beq.n	8005684 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005682:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800568c:	f240 8081 	bls.w	8005792 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_SPI_TransmitReceive+0x140>
 8005698:	8a7b      	ldrh	r3, [r7, #18]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d16d      	bne.n	800577a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	881a      	ldrh	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	1c9a      	adds	r2, r3, #2
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b29a      	uxth	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056c2:	e05a      	b.n	800577a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d11b      	bne.n	800570a <HAL_SPI_TransmitReceive+0x1ac>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d016      	beq.n	800570a <HAL_SPI_TransmitReceive+0x1ac>
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d113      	bne.n	800570a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	881a      	ldrh	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	1c9a      	adds	r2, r3, #2
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005706:	2300      	movs	r3, #0
 8005708:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b01      	cmp	r3, #1
 8005716:	d11c      	bne.n	8005752 <HAL_SPI_TransmitReceive+0x1f4>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d016      	beq.n	8005752 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	b292      	uxth	r2, r2
 8005730:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	1c9a      	adds	r2, r3, #2
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800574e:	2301      	movs	r3, #1
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005752:	f7fd fd55 	bl	8003200 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800575e:	429a      	cmp	r2, r3
 8005760:	d80b      	bhi.n	800577a <HAL_SPI_TransmitReceive+0x21c>
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d007      	beq.n	800577a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005778:	e109      	b.n	800598e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d19f      	bne.n	80056c4 <HAL_SPI_TransmitReceive+0x166>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d199      	bne.n	80056c4 <HAL_SPI_TransmitReceive+0x166>
 8005790:	e0e3      	b.n	800595a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_SPI_TransmitReceive+0x244>
 800579a:	8a7b      	ldrh	r3, [r7, #18]
 800579c:	2b01      	cmp	r3, #1
 800579e:	f040 80cf 	bne.w	8005940 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d912      	bls.n	80057d2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b0:	881a      	ldrh	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057bc:	1c9a      	adds	r2, r3, #2
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b02      	subs	r3, #2
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057d0:	e0b6      	b.n	8005940 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	330c      	adds	r3, #12
 80057dc:	7812      	ldrb	r2, [r2, #0]
 80057de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	1c5a      	adds	r2, r3, #1
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057f8:	e0a2      	b.n	8005940 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b02      	cmp	r3, #2
 8005806:	d134      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x314>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800580c:	b29b      	uxth	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d02f      	beq.n	8005872 <HAL_SPI_TransmitReceive+0x314>
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	2b01      	cmp	r3, #1
 8005816:	d12c      	bne.n	8005872 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b01      	cmp	r3, #1
 8005820:	d912      	bls.n	8005848 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005826:	881a      	ldrh	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005832:	1c9a      	adds	r2, r3, #2
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b02      	subs	r3, #2
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005846:	e012      	b.n	800586e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	330c      	adds	r3, #12
 8005852:	7812      	ldrb	r2, [r2, #0]
 8005854:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b01      	cmp	r3, #1
 800587e:	d148      	bne.n	8005912 <HAL_SPI_TransmitReceive+0x3b4>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d042      	beq.n	8005912 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b01      	cmp	r3, #1
 8005896:	d923      	bls.n	80058e0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68da      	ldr	r2, [r3, #12]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	b292      	uxth	r2, r2
 80058a4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058aa:	1c9a      	adds	r2, r3, #2
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b02      	subs	r3, #2
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d81f      	bhi.n	800590e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	e016      	b.n	800590e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f103 020c 	add.w	r2, r3, #12
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	7812      	ldrb	r2, [r2, #0]
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800590e:	2301      	movs	r3, #1
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005912:	f7fd fc75 	bl	8003200 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800591e:	429a      	cmp	r2, r3
 8005920:	d803      	bhi.n	800592a <HAL_SPI_TransmitReceive+0x3cc>
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d102      	bne.n	8005930 <HAL_SPI_TransmitReceive+0x3d2>
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	2b00      	cmp	r3, #0
 800592e:	d107      	bne.n	8005940 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800593e:	e026      	b.n	800598e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005944:	b29b      	uxth	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	f47f af57 	bne.w	80057fa <HAL_SPI_TransmitReceive+0x29c>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005952:	b29b      	uxth	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	f47f af50 	bne.w	80057fa <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800595a:	69fa      	ldr	r2, [r7, #28]
 800595c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f000 faaa 	bl	8005eb8 <SPI_EndRxTxTransaction>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d005      	beq.n	8005976 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005984:	e003      	b.n	800598e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005996:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800599a:	4618      	mov	r0, r3
 800599c:	3728      	adds	r7, #40	; 0x28
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10e      	bne.n	80059e4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d009      	beq.n	80059e4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d004      	beq.n	80059e4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	4798      	blx	r3
    return;
 80059e2:	e0ce      	b.n	8005b82 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d009      	beq.n	8005a02 <HAL_SPI_IRQHandler+0x5e>
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d004      	beq.n	8005a02 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	4798      	blx	r3
    return;
 8005a00:	e0bf      	b.n	8005b82 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	f003 0320 	and.w	r3, r3, #32
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <HAL_SPI_IRQHandler+0x7e>
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d105      	bne.n	8005a22 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80b0 	beq.w	8005b82 <HAL_SPI_IRQHandler+0x1de>
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80aa 	beq.w	8005b82 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d023      	beq.n	8005a80 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	d011      	beq.n	8005a68 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a48:	f043 0204 	orr.w	r2, r3, #4
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	617b      	str	r3, [r7, #20]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	e00b      	b.n	8005a80 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a68:	2300      	movs	r3, #0
 8005a6a:	613b      	str	r3, [r7, #16]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	613b      	str	r3, [r7, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	613b      	str	r3, [r7, #16]
 8005a7c:	693b      	ldr	r3, [r7, #16]
        return;
 8005a7e:	e080      	b.n	8005b82 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d014      	beq.n	8005ab4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a8e:	f043 0201 	orr.w	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00c      	beq.n	8005ad8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac2:	f043 0208 	orr.w	r2, r3, #8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005aca:	2300      	movs	r3, #0
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	60bb      	str	r3, [r7, #8]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d04f      	beq.n	8005b80 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005aee:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <HAL_SPI_IRQHandler+0x168>
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d034      	beq.n	8005b76 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0203 	bic.w	r2, r2, #3
 8005b1a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d011      	beq.n	8005b48 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b28:	4a17      	ldr	r2, [pc, #92]	; (8005b88 <HAL_SPI_IRQHandler+0x1e4>)
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fd fc82 	bl	800343a <HAL_DMA_Abort_IT>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d016      	beq.n	8005b7e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b54:	4a0c      	ldr	r2, [pc, #48]	; (8005b88 <HAL_SPI_IRQHandler+0x1e4>)
 8005b56:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fd fc6c 	bl	800343a <HAL_DMA_Abort_IT>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00a      	beq.n	8005b7e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005b74:	e003      	b.n	8005b7e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f808 	bl	8005b8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005b7c:	e000      	b.n	8005b80 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005b7e:	bf00      	nop
    return;
 8005b80:	bf00      	nop
  }
}
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	08005ba1 	.word	0x08005ba1

08005b8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b083      	sub	sp, #12
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff ffe5 	bl	8005b8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
	...

08005bcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005bdc:	f7fd fb10 	bl	8003200 <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be4:	1a9b      	subs	r3, r3, r2
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	4413      	add	r3, r2
 8005bea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bec:	f7fd fb08 	bl	8003200 <HAL_GetTick>
 8005bf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bf2:	4b39      	ldr	r3, [pc, #228]	; (8005cd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	015b      	lsls	r3, r3, #5
 8005bf8:	0d1b      	lsrs	r3, r3, #20
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	fb02 f303 	mul.w	r3, r2, r3
 8005c00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c02:	e054      	b.n	8005cae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d050      	beq.n	8005cae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c0c:	f7fd faf8 	bl	8003200 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d902      	bls.n	8005c22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d13d      	bne.n	8005c9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c3a:	d111      	bne.n	8005c60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c44:	d004      	beq.n	8005c50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4e:	d107      	bne.n	8005c60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c68:	d10f      	bne.n	8005c8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c78:	601a      	str	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e017      	b.n	8005cce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	689a      	ldr	r2, [r3, #8]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	bf0c      	ite	eq
 8005cbe:	2301      	moveq	r3, #1
 8005cc0:	2300      	movne	r3, #0
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d19b      	bne.n	8005c04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3720      	adds	r7, #32
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000000 	.word	0x20000000

08005cdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b08a      	sub	sp, #40	; 0x28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005cee:	f7fd fa87 	bl	8003200 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf6:	1a9b      	subs	r3, r3, r2
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005cfe:	f7fd fa7f 	bl	8003200 <HAL_GetTick>
 8005d02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005d0c:	4b3d      	ldr	r3, [pc, #244]	; (8005e04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	00da      	lsls	r2, r3, #3
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	0d1b      	lsrs	r3, r3, #20
 8005d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d1e:	fb02 f303 	mul.w	r3, r2, r3
 8005d22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005d24:	e060      	b.n	8005de8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d2c:	d107      	bne.n	8005d3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d104      	bne.n	8005d3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d44:	d050      	beq.n	8005de8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d46:	f7fd fa5b 	bl	8003200 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d902      	bls.n	8005d5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d13d      	bne.n	8005dd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685a      	ldr	r2, [r3, #4]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d74:	d111      	bne.n	8005d9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d7e:	d004      	beq.n	8005d8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d88:	d107      	bne.n	8005d9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da2:	d10f      	bne.n	8005dc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e010      	b.n	8005dfa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005dde:	2300      	movs	r3, #0
 8005de0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	4013      	ands	r3, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d196      	bne.n	8005d26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3728      	adds	r7, #40	; 0x28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20000000 	.word	0x20000000

08005e08 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e1c:	d111      	bne.n	8005e42 <SPI_EndRxTransaction+0x3a>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e26:	d004      	beq.n	8005e32 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e30:	d107      	bne.n	8005e42 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e40:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2180      	movs	r1, #128	; 0x80
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff febd 	bl	8005bcc <SPI_WaitFlagStateUntilTimeout>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d007      	beq.n	8005e68 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5c:	f043 0220 	orr.w	r2, r3, #32
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e64:	2303      	movs	r3, #3
 8005e66:	e023      	b.n	8005eb0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e70:	d11d      	bne.n	8005eae <SPI_EndRxTransaction+0xa6>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e7a:	d004      	beq.n	8005e86 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e84:	d113      	bne.n	8005eae <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff ff22 	bl	8005cdc <SPI_WaitFifoStateUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d007      	beq.n	8005eae <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea2:	f043 0220 	orr.w	r2, r3, #32
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e000      	b.n	8005eb0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7ff ff03 	bl	8005cdc <SPI_WaitFifoStateUntilTimeout>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee0:	f043 0220 	orr.w	r2, r3, #32
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	e027      	b.n	8005f3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	9300      	str	r3, [sp, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2180      	movs	r1, #128	; 0x80
 8005ef6:	68f8      	ldr	r0, [r7, #12]
 8005ef8:	f7ff fe68 	bl	8005bcc <SPI_WaitFlagStateUntilTimeout>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d007      	beq.n	8005f12 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f06:	f043 0220 	orr.w	r2, r3, #32
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e014      	b.n	8005f3c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f7ff fedc 	bl	8005cdc <SPI_WaitFifoStateUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d007      	beq.n	8005f3a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f2e:	f043 0220 	orr.w	r2, r3, #32
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e000      	b.n	8005f3c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d101      	bne.n	8005f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e049      	b.n	8005fea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fc feda 	bl	8002d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4619      	mov	r1, r3
 8005f82:	4610      	mov	r0, r2
 8005f84:	f000 fa9c 	bl	80064c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b01      	cmp	r3, #1
 8006006:	d001      	beq.n	800600c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e047      	b.n	800609c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a23      	ldr	r2, [pc, #140]	; (80060a8 <HAL_TIM_Base_Start+0xb4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d01d      	beq.n	800605a <HAL_TIM_Base_Start+0x66>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006026:	d018      	beq.n	800605a <HAL_TIM_Base_Start+0x66>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a1f      	ldr	r2, [pc, #124]	; (80060ac <HAL_TIM_Base_Start+0xb8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <HAL_TIM_Base_Start+0x66>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1e      	ldr	r2, [pc, #120]	; (80060b0 <HAL_TIM_Base_Start+0xbc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00e      	beq.n	800605a <HAL_TIM_Base_Start+0x66>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1c      	ldr	r2, [pc, #112]	; (80060b4 <HAL_TIM_Base_Start+0xc0>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d009      	beq.n	800605a <HAL_TIM_Base_Start+0x66>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1b      	ldr	r2, [pc, #108]	; (80060b8 <HAL_TIM_Base_Start+0xc4>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d004      	beq.n	800605a <HAL_TIM_Base_Start+0x66>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a19      	ldr	r2, [pc, #100]	; (80060bc <HAL_TIM_Base_Start+0xc8>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d115      	bne.n	8006086 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	4b17      	ldr	r3, [pc, #92]	; (80060c0 <HAL_TIM_Base_Start+0xcc>)
 8006062:	4013      	ands	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b06      	cmp	r3, #6
 800606a:	d015      	beq.n	8006098 <HAL_TIM_Base_Start+0xa4>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006072:	d011      	beq.n	8006098 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006084:	e008      	b.n	8006098 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0201 	orr.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	e000      	b.n	800609a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006098:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr
 80060a8:	40012c00 	.word	0x40012c00
 80060ac:	40000400 	.word	0x40000400
 80060b0:	40000800 	.word	0x40000800
 80060b4:	40000c00 	.word	0x40000c00
 80060b8:	40013400 	.word	0x40013400
 80060bc:	40014000 	.word	0x40014000
 80060c0:	00010007 	.word	0x00010007

080060c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d020      	beq.n	8006128 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01b      	beq.n	8006128 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f06f 0202 	mvn.w	r2, #2
 80060f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	f003 0303 	and.w	r3, r3, #3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f9b7 	bl	8006482 <HAL_TIM_IC_CaptureCallback>
 8006114:	e005      	b.n	8006122 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f9a9 	bl	800646e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f9ba 	bl	8006496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b00      	cmp	r3, #0
 8006130:	d020      	beq.n	8006174 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d01b      	beq.n	8006174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f06f 0204 	mvn.w	r2, #4
 8006144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2202      	movs	r2, #2
 800614a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f991 	bl	8006482 <HAL_TIM_IC_CaptureCallback>
 8006160:	e005      	b.n	800616e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f983 	bl	800646e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f994 	bl	8006496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f003 0308 	and.w	r3, r3, #8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d020      	beq.n	80061c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f003 0308 	and.w	r3, r3, #8
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01b      	beq.n	80061c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f06f 0208 	mvn.w	r2, #8
 8006190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2204      	movs	r2, #4
 8006196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	69db      	ldr	r3, [r3, #28]
 800619e:	f003 0303 	and.w	r3, r3, #3
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f96b 	bl	8006482 <HAL_TIM_IC_CaptureCallback>
 80061ac:	e005      	b.n	80061ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f95d 	bl	800646e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f96e 	bl	8006496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f003 0310 	and.w	r3, r3, #16
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d020      	beq.n	800620c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d01b      	beq.n	800620c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0210 	mvn.w	r2, #16
 80061dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2208      	movs	r2, #8
 80061e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f945 	bl	8006482 <HAL_TIM_IC_CaptureCallback>
 80061f8:	e005      	b.n	8006206 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f937 	bl	800646e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f948 	bl	8006496 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00c      	beq.n	8006230 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0201 	mvn.w	r2, #1
 8006228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f915 	bl	800645a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00c      	beq.n	8006254 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006240:	2b00      	cmp	r3, #0
 8006242:	d007      	beq.n	8006254 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800624c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fafc 	bl	800684c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00c      	beq.n	8006278 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 faf4 	bl	8006860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00c      	beq.n	800629c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	d007      	beq.n	800629c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f907 	bl	80064aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00c      	beq.n	80062c0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f003 0320 	and.w	r3, r3, #32
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d007      	beq.n	80062c0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f06f 0220 	mvn.w	r2, #32
 80062b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 fabc 	bl	8006838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062c0:	bf00      	nop
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d101      	bne.n	80062e4 <HAL_TIM_ConfigClockSource+0x1c>
 80062e0:	2302      	movs	r3, #2
 80062e2:	e0b6      	b.n	8006452 <HAL_TIM_ConfigClockSource+0x18a>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006302:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006306:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800630e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68ba      	ldr	r2, [r7, #8]
 8006316:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006320:	d03e      	beq.n	80063a0 <HAL_TIM_ConfigClockSource+0xd8>
 8006322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006326:	f200 8087 	bhi.w	8006438 <HAL_TIM_ConfigClockSource+0x170>
 800632a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800632e:	f000 8086 	beq.w	800643e <HAL_TIM_ConfigClockSource+0x176>
 8006332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006336:	d87f      	bhi.n	8006438 <HAL_TIM_ConfigClockSource+0x170>
 8006338:	2b70      	cmp	r3, #112	; 0x70
 800633a:	d01a      	beq.n	8006372 <HAL_TIM_ConfigClockSource+0xaa>
 800633c:	2b70      	cmp	r3, #112	; 0x70
 800633e:	d87b      	bhi.n	8006438 <HAL_TIM_ConfigClockSource+0x170>
 8006340:	2b60      	cmp	r3, #96	; 0x60
 8006342:	d050      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0x11e>
 8006344:	2b60      	cmp	r3, #96	; 0x60
 8006346:	d877      	bhi.n	8006438 <HAL_TIM_ConfigClockSource+0x170>
 8006348:	2b50      	cmp	r3, #80	; 0x50
 800634a:	d03c      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0xfe>
 800634c:	2b50      	cmp	r3, #80	; 0x50
 800634e:	d873      	bhi.n	8006438 <HAL_TIM_ConfigClockSource+0x170>
 8006350:	2b40      	cmp	r3, #64	; 0x40
 8006352:	d058      	beq.n	8006406 <HAL_TIM_ConfigClockSource+0x13e>
 8006354:	2b40      	cmp	r3, #64	; 0x40
 8006356:	d86f      	bhi.n	8006438 <HAL_TIM_ConfigClockSource+0x170>
 8006358:	2b30      	cmp	r3, #48	; 0x30
 800635a:	d064      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0x15e>
 800635c:	2b30      	cmp	r3, #48	; 0x30
 800635e:	d86b      	bhi.n	8006438 <HAL_TIM_ConfigClockSource+0x170>
 8006360:	2b20      	cmp	r3, #32
 8006362:	d060      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0x15e>
 8006364:	2b20      	cmp	r3, #32
 8006366:	d867      	bhi.n	8006438 <HAL_TIM_ConfigClockSource+0x170>
 8006368:	2b00      	cmp	r3, #0
 800636a:	d05c      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0x15e>
 800636c:	2b10      	cmp	r3, #16
 800636e:	d05a      	beq.n	8006426 <HAL_TIM_ConfigClockSource+0x15e>
 8006370:	e062      	b.n	8006438 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006382:	f000 f9b1 	bl	80066e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006394:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	609a      	str	r2, [r3, #8]
      break;
 800639e:	e04f      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063b0:	f000 f99a 	bl	80066e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063c2:	609a      	str	r2, [r3, #8]
      break;
 80063c4:	e03c      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d2:	461a      	mov	r2, r3
 80063d4:	f000 f90e 	bl	80065f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2150      	movs	r1, #80	; 0x50
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 f967 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 80063e4:	e02c      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063f2:	461a      	mov	r2, r3
 80063f4:	f000 f92d 	bl	8006652 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2160      	movs	r1, #96	; 0x60
 80063fe:	4618      	mov	r0, r3
 8006400:	f000 f957 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 8006404:	e01c      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006412:	461a      	mov	r2, r3
 8006414:	f000 f8ee 	bl	80065f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2140      	movs	r1, #64	; 0x40
 800641e:	4618      	mov	r0, r3
 8006420:	f000 f947 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 8006424:	e00c      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f000 f93e 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 8006436:	e003      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006438:	2301      	movs	r3, #1
 800643a:	73fb      	strb	r3, [r7, #15]
      break;
 800643c:	e000      	b.n	8006440 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800643e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006450:	7bfb      	ldrb	r3, [r7, #15]
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800646e:	b480      	push	{r7}
 8006470:	b083      	sub	sp, #12
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006476:	bf00      	nop
 8006478:	370c      	adds	r7, #12
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006496:	b480      	push	{r7}
 8006498:	b083      	sub	sp, #12
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064b2:	bf00      	nop
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a40      	ldr	r2, [pc, #256]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064de:	d00f      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a3d      	ldr	r2, [pc, #244]	; (80065d8 <TIM_Base_SetConfig+0x118>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00b      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a3c      	ldr	r2, [pc, #240]	; (80065dc <TIM_Base_SetConfig+0x11c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d007      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a3b      	ldr	r2, [pc, #236]	; (80065e0 <TIM_Base_SetConfig+0x120>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a3a      	ldr	r2, [pc, #232]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d108      	bne.n	8006512 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a2f      	ldr	r2, [pc, #188]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d01f      	beq.n	800655a <TIM_Base_SetConfig+0x9a>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006520:	d01b      	beq.n	800655a <TIM_Base_SetConfig+0x9a>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a2c      	ldr	r2, [pc, #176]	; (80065d8 <TIM_Base_SetConfig+0x118>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d017      	beq.n	800655a <TIM_Base_SetConfig+0x9a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a2b      	ldr	r2, [pc, #172]	; (80065dc <TIM_Base_SetConfig+0x11c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d013      	beq.n	800655a <TIM_Base_SetConfig+0x9a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a2a      	ldr	r2, [pc, #168]	; (80065e0 <TIM_Base_SetConfig+0x120>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00f      	beq.n	800655a <TIM_Base_SetConfig+0x9a>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a29      	ldr	r2, [pc, #164]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00b      	beq.n	800655a <TIM_Base_SetConfig+0x9a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a28      	ldr	r2, [pc, #160]	; (80065e8 <TIM_Base_SetConfig+0x128>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d007      	beq.n	800655a <TIM_Base_SetConfig+0x9a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a27      	ldr	r2, [pc, #156]	; (80065ec <TIM_Base_SetConfig+0x12c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d003      	beq.n	800655a <TIM_Base_SetConfig+0x9a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a26      	ldr	r2, [pc, #152]	; (80065f0 <TIM_Base_SetConfig+0x130>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d108      	bne.n	800656c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	4313      	orrs	r3, r2
 800656a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a10      	ldr	r2, [pc, #64]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d00f      	beq.n	80065b8 <TIM_Base_SetConfig+0xf8>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a12      	ldr	r2, [pc, #72]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00b      	beq.n	80065b8 <TIM_Base_SetConfig+0xf8>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a11      	ldr	r2, [pc, #68]	; (80065e8 <TIM_Base_SetConfig+0x128>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d007      	beq.n	80065b8 <TIM_Base_SetConfig+0xf8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a10      	ldr	r2, [pc, #64]	; (80065ec <TIM_Base_SetConfig+0x12c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <TIM_Base_SetConfig+0xf8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a0f      	ldr	r2, [pc, #60]	; (80065f0 <TIM_Base_SetConfig+0x130>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d103      	bne.n	80065c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	615a      	str	r2, [r3, #20]
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40012c00 	.word	0x40012c00
 80065d8:	40000400 	.word	0x40000400
 80065dc:	40000800 	.word	0x40000800
 80065e0:	40000c00 	.word	0x40000c00
 80065e4:	40013400 	.word	0x40013400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40014400 	.word	0x40014400
 80065f0:	40014800 	.word	0x40014800

080065f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	f023 0201 	bic.w	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800661e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f023 030a 	bic.w	r3, r3, #10
 8006630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	621a      	str	r2, [r3, #32]
}
 8006646:	bf00      	nop
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006652:	b480      	push	{r7}
 8006654:	b087      	sub	sp, #28
 8006656:	af00      	add	r7, sp, #0
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f023 0210 	bic.w	r2, r3, #16
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800667c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	031b      	lsls	r3, r3, #12
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800668e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	621a      	str	r2, [r3, #32]
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f043 0307 	orr.w	r3, r3, #7
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	609a      	str	r2, [r3, #8]
}
 80066dc:	bf00      	nop
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	021a      	lsls	r2, r3, #8
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	431a      	orrs	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4313      	orrs	r3, r2
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	609a      	str	r2, [r3, #8]
}
 800671c:	bf00      	nop
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800673c:	2302      	movs	r3, #2
 800673e:	e068      	b.n	8006812 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a2e      	ldr	r2, [pc, #184]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a2d      	ldr	r2, [pc, #180]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d108      	bne.n	8006786 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800677a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800678c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	4313      	orrs	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1e      	ldr	r2, [pc, #120]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d01d      	beq.n	80067e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b2:	d018      	beq.n	80067e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a1b      	ldr	r2, [pc, #108]	; (8006828 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d013      	beq.n	80067e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a1a      	ldr	r2, [pc, #104]	; (800682c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00e      	beq.n	80067e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a18      	ldr	r2, [pc, #96]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d009      	beq.n	80067e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a13      	ldr	r2, [pc, #76]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a14      	ldr	r2, [pc, #80]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d10c      	bne.n	8006800 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40012c00 	.word	0x40012c00
 8006824:	40013400 	.word	0x40013400
 8006828:	40000400 	.word	0x40000400
 800682c:	40000800 	.word	0x40000800
 8006830:	40000c00 	.word	0x40000c00
 8006834:	40014000 	.word	0x40014000

08006838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e03c      	b.n	8006900 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d106      	bne.n	80068a0 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fc fa66 	bl	8002d6c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2202      	movs	r2, #2
 80068a4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0201 	bic.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f000 f909 	bl	8006ad0 <USART_SetConfig>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d101      	bne.n	80068c8 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	e01b      	b.n	8006900 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068d6:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068e6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fa3f 	bl	8006d7c <USART_CheckIdleState>
 80068fe:	4603      	mov	r3, r0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_USART_Transmit>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, const uint8_t *pTxData, uint16_t Size,
                                     uint32_t Timeout)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af02      	add	r7, sp, #8
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	4613      	mov	r3, r2
 8006916:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *ptxdata8bits;
  const uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b01      	cmp	r3, #1
 8006922:	f040 809a 	bne.w	8006a5a <HAL_USART_Transmit+0x152>
  {
    if ((pTxData == NULL) || (Size == 0U))
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <HAL_USART_Transmit+0x2a>
 800692c:	88fb      	ldrh	r3, [r7, #6]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e092      	b.n	8006a5c <HAL_USART_Transmit+0x154>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800693c:	2b01      	cmp	r3, #1
 800693e:	d101      	bne.n	8006944 <HAL_USART_Transmit+0x3c>
 8006940:	2302      	movs	r3, #2
 8006942:	e08b      	b.n	8006a5c <HAL_USART_Transmit+0x154>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2212      	movs	r2, #18
 8006956:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800695a:	f7fc fc51 	bl	8003200 <HAL_GetTick>
 800695e:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	88fa      	ldrh	r2, [r7, #6]
 8006964:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	88fa      	ldrh	r2, [r7, #6]
 800696a:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006974:	d108      	bne.n	8006988 <HAL_USART_Transmit+0x80>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d104      	bne.n	8006988 <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 800697e:	2300      	movs	r3, #0
 8006980:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (const uint16_t *) pTxData;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	e003      	b.n	8006990 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 800698c:	2300      	movs	r3, #0
 800698e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 8006990:	e02b      	b.n	80069ea <HAL_USART_Transmit+0xe2>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	2200      	movs	r2, #0
 800699a:	2180      	movs	r1, #128	; 0x80
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f000 f861 	bl	8006a64 <USART_WaitOnFlagUntilTimeout>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e057      	b.n	8006a5c <HAL_USART_Transmit+0x154>
      }
      if (ptxdata8bits == NULL)
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10b      	bne.n	80069ca <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	881a      	ldrh	r2, [r3, #0]
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069be:	b292      	uxth	r2, r2
 80069c0:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	3302      	adds	r3, #2
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	e008      	b.n	80069dc <HAL_USART_Transmit+0xd4>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	781a      	ldrb	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	b292      	uxth	r2, r2
 80069d4:	851a      	strh	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	3301      	adds	r3, #1
 80069da:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1ce      	bne.n	8006992 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2200      	movs	r2, #0
 80069fc:	2140      	movs	r1, #64	; 0x40
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 f830 	bl	8006a64 <USART_WaitOnFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <HAL_USART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e026      	b.n	8006a5c <HAL_USART_Transmit+0x154>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2240      	movs	r2, #64	; 0x40
 8006a14:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2208      	movs	r2, #8
 8006a1c:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	8b1b      	ldrh	r3, [r3, #24]
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f042 0208 	orr.w	r2, r2, #8
 8006a2e:	b292      	uxth	r2, r2
 8006a30:	831a      	strh	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	8b1b      	ldrh	r3, [r3, #24]
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f042 0210 	orr.w	r2, r2, #16
 8006a42:	b292      	uxth	r2, r2
 8006a44:	831a      	strh	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	e000      	b.n	8006a5c <HAL_USART_Transmit+0x154>
  }
  else
  {
    return HAL_BUSY;
 8006a5a:	2302      	movs	r3, #2
  }
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3720      	adds	r7, #32
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	603b      	str	r3, [r7, #0]
 8006a70:	4613      	mov	r3, r2
 8006a72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8006a74:	e018      	b.n	8006aa8 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7c:	d014      	beq.n	8006aa8 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7e:	f7fc fbbf 	bl	8003200 <HAL_GetTick>
 8006a82:	4602      	mov	r2, r0
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d302      	bcc.n	8006a94 <USART_WaitOnFlagUntilTimeout+0x30>
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d109      	bne.n	8006aa8 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e00f      	b.n	8006ac8 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69da      	ldr	r2, [r3, #28]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	4013      	ands	r3, r2
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	bf0c      	ite	eq
 8006ab8:	2301      	moveq	r3, #1
 8006aba:	2300      	movne	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	461a      	mov	r2, r3
 8006ac0:	79fb      	ldrb	r3, [r7, #7]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d0d7      	beq.n	8006a76 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8006adc:	2300      	movs	r3, #0
 8006ade:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	431a      	orrs	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006af4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	4b9a      	ldr	r3, [pc, #616]	; (8006d68 <USART_SetConfig+0x298>)
 8006afe:	4013      	ands	r3, r2
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	6979      	ldr	r1, [r7, #20]
 8006b06:	430b      	orrs	r3, r1
 8006b08:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL STOP and SLVEN bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8006b0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b0e:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	699a      	ldr	r2, [r3, #24]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	605a      	str	r2, [r3, #4]
  MODIFY_REG(husart->Instance->PRESC, USART_PRESC_PRESCALER, husart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a87      	ldr	r2, [pc, #540]	; (8006d6c <USART_SetConfig+0x29c>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d121      	bne.n	8006b96 <USART_SetConfig+0xc6>
 8006b52:	4b87      	ldr	r3, [pc, #540]	; (8006d70 <USART_SetConfig+0x2a0>)
 8006b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b58:	f003 0303 	and.w	r3, r3, #3
 8006b5c:	2b03      	cmp	r3, #3
 8006b5e:	d817      	bhi.n	8006b90 <USART_SetConfig+0xc0>
 8006b60:	a201      	add	r2, pc, #4	; (adr r2, 8006b68 <USART_SetConfig+0x98>)
 8006b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b66:	bf00      	nop
 8006b68:	08006b79 	.word	0x08006b79
 8006b6c:	08006b85 	.word	0x08006b85
 8006b70:	08006b7f 	.word	0x08006b7f
 8006b74:	08006b8b 	.word	0x08006b8b
 8006b78:	2301      	movs	r3, #1
 8006b7a:	77fb      	strb	r3, [r7, #31]
 8006b7c:	e06b      	b.n	8006c56 <USART_SetConfig+0x186>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	77fb      	strb	r3, [r7, #31]
 8006b82:	e068      	b.n	8006c56 <USART_SetConfig+0x186>
 8006b84:	2304      	movs	r3, #4
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e065      	b.n	8006c56 <USART_SetConfig+0x186>
 8006b8a:	2308      	movs	r3, #8
 8006b8c:	77fb      	strb	r3, [r7, #31]
 8006b8e:	e062      	b.n	8006c56 <USART_SetConfig+0x186>
 8006b90:	2310      	movs	r3, #16
 8006b92:	77fb      	strb	r3, [r7, #31]
 8006b94:	e05f      	b.n	8006c56 <USART_SetConfig+0x186>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a76      	ldr	r2, [pc, #472]	; (8006d74 <USART_SetConfig+0x2a4>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d132      	bne.n	8006c06 <USART_SetConfig+0x136>
 8006ba0:	4b73      	ldr	r3, [pc, #460]	; (8006d70 <USART_SetConfig+0x2a0>)
 8006ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba6:	f003 030c 	and.w	r3, r3, #12
 8006baa:	2b0c      	cmp	r3, #12
 8006bac:	d828      	bhi.n	8006c00 <USART_SetConfig+0x130>
 8006bae:	a201      	add	r2, pc, #4	; (adr r2, 8006bb4 <USART_SetConfig+0xe4>)
 8006bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bb4:	08006be9 	.word	0x08006be9
 8006bb8:	08006c01 	.word	0x08006c01
 8006bbc:	08006c01 	.word	0x08006c01
 8006bc0:	08006c01 	.word	0x08006c01
 8006bc4:	08006bf5 	.word	0x08006bf5
 8006bc8:	08006c01 	.word	0x08006c01
 8006bcc:	08006c01 	.word	0x08006c01
 8006bd0:	08006c01 	.word	0x08006c01
 8006bd4:	08006bef 	.word	0x08006bef
 8006bd8:	08006c01 	.word	0x08006c01
 8006bdc:	08006c01 	.word	0x08006c01
 8006be0:	08006c01 	.word	0x08006c01
 8006be4:	08006bfb 	.word	0x08006bfb
 8006be8:	2300      	movs	r3, #0
 8006bea:	77fb      	strb	r3, [r7, #31]
 8006bec:	e033      	b.n	8006c56 <USART_SetConfig+0x186>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	77fb      	strb	r3, [r7, #31]
 8006bf2:	e030      	b.n	8006c56 <USART_SetConfig+0x186>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	77fb      	strb	r3, [r7, #31]
 8006bf8:	e02d      	b.n	8006c56 <USART_SetConfig+0x186>
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	77fb      	strb	r3, [r7, #31]
 8006bfe:	e02a      	b.n	8006c56 <USART_SetConfig+0x186>
 8006c00:	2310      	movs	r3, #16
 8006c02:	77fb      	strb	r3, [r7, #31]
 8006c04:	e027      	b.n	8006c56 <USART_SetConfig+0x186>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a5b      	ldr	r2, [pc, #364]	; (8006d78 <USART_SetConfig+0x2a8>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d120      	bne.n	8006c52 <USART_SetConfig+0x182>
 8006c10:	4b57      	ldr	r3, [pc, #348]	; (8006d70 <USART_SetConfig+0x2a0>)
 8006c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c1a:	2b30      	cmp	r3, #48	; 0x30
 8006c1c:	d013      	beq.n	8006c46 <USART_SetConfig+0x176>
 8006c1e:	2b30      	cmp	r3, #48	; 0x30
 8006c20:	d814      	bhi.n	8006c4c <USART_SetConfig+0x17c>
 8006c22:	2b20      	cmp	r3, #32
 8006c24:	d009      	beq.n	8006c3a <USART_SetConfig+0x16a>
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d810      	bhi.n	8006c4c <USART_SetConfig+0x17c>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <USART_SetConfig+0x164>
 8006c2e:	2b10      	cmp	r3, #16
 8006c30:	d006      	beq.n	8006c40 <USART_SetConfig+0x170>
 8006c32:	e00b      	b.n	8006c4c <USART_SetConfig+0x17c>
 8006c34:	2300      	movs	r3, #0
 8006c36:	77fb      	strb	r3, [r7, #31]
 8006c38:	e00d      	b.n	8006c56 <USART_SetConfig+0x186>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	77fb      	strb	r3, [r7, #31]
 8006c3e:	e00a      	b.n	8006c56 <USART_SetConfig+0x186>
 8006c40:	2304      	movs	r3, #4
 8006c42:	77fb      	strb	r3, [r7, #31]
 8006c44:	e007      	b.n	8006c56 <USART_SetConfig+0x186>
 8006c46:	2308      	movs	r3, #8
 8006c48:	77fb      	strb	r3, [r7, #31]
 8006c4a:	e004      	b.n	8006c56 <USART_SetConfig+0x186>
 8006c4c:	2310      	movs	r3, #16
 8006c4e:	77fb      	strb	r3, [r7, #31]
 8006c50:	e001      	b.n	8006c56 <USART_SetConfig+0x186>
 8006c52:	2310      	movs	r3, #16
 8006c54:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8006c56:	7ffb      	ldrb	r3, [r7, #31]
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d85a      	bhi.n	8006d12 <USART_SetConfig+0x242>
 8006c5c:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <USART_SetConfig+0x194>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c89 	.word	0x08006c89
 8006c68:	08006ca7 	.word	0x08006ca7
 8006c6c:	08006cc5 	.word	0x08006cc5
 8006c70:	08006d13 	.word	0x08006d13
 8006c74:	08006cdf 	.word	0x08006cdf
 8006c78:	08006d13 	.word	0x08006d13
 8006c7c:	08006d13 	.word	0x08006d13
 8006c80:	08006d13 	.word	0x08006d13
 8006c84:	08006cfd 	.word	0x08006cfd
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c88:	f7fd fbc2 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 8006c8c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	005a      	lsls	r2, r3, #1
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	441a      	add	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8006ca4:	e038      	b.n	8006d18 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ca6:	f7fd fbc9 	bl	800443c <HAL_RCC_GetPCLK2Freq>
 8006caa:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	005a      	lsls	r2, r3, #1
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	085b      	lsrs	r3, r3, #1
 8006cb6:	441a      	add	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cc0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8006cc2:	e029      	b.n	8006d18 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	085b      	lsrs	r3, r3, #1
 8006cca:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8006cce:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6852      	ldr	r2, [r2, #4]
 8006cd6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cda:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8006cdc:	e01c      	b.n	8006d18 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8006cde:	f7fd faff 	bl	80042e0 <HAL_RCC_GetSysClockFreq>
 8006ce2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	005a      	lsls	r2, r3, #1
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	085b      	lsrs	r3, r3, #1
 8006cee:	441a      	add	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8006cfa:	e00d      	b.n	8006d18 <USART_SetConfig+0x248>
    case USART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate, husart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	085b      	lsrs	r3, r3, #1
 8006d02:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      break;
 8006d10:	e002      	b.n	8006d18 <USART_SetConfig+0x248>
    default:
      ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	77bb      	strb	r3, [r7, #30]
      break;
 8006d16:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b0f      	cmp	r3, #15
 8006d1c:	d916      	bls.n	8006d4c <USART_SetConfig+0x27c>
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d24:	d212      	bcs.n	8006d4c <USART_SetConfig+0x27c>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f023 030f 	bic.w	r3, r3, #15
 8006d2e:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	085b      	lsrs	r3, r3, #1
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f003 0307 	and.w	r3, r3, #7
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	89fb      	ldrh	r3, [r7, #14]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	89fa      	ldrh	r2, [r7, #14]
 8006d48:	60da      	str	r2, [r3, #12]
 8006d4a:	e001      	b.n	8006d50 <USART_SetConfig+0x280>
  }
  else
  {
    ret = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	77bb      	strb	r3, [r7, #30]
  husart->NbTxDataToProcess = 1U;
  husart->NbRxDataToProcess = 1U;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8006d5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	efff69f3 	.word	0xefff69f3
 8006d6c:	40013800 	.word	0x40013800
 8006d70:	40021000 	.word	0x40021000
 8006d74:	40004400 	.word	0x40004400
 8006d78:	40004800 	.word	0x40004800

08006d7c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d8a:	f7fc fa39 	bl	8003200 <HAL_GetTick>
 8006d8e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0308 	and.w	r3, r3, #8
 8006d9a:	2b08      	cmp	r3, #8
 8006d9c:	d10e      	bne.n	8006dbc <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8006d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff fe59 	bl	8006a64 <USART_WaitOnFlagUntilTimeout>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e01e      	b.n	8006dfa <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0304 	and.w	r3, r3, #4
 8006dc6:	2b04      	cmp	r3, #4
 8006dc8:	d10e      	bne.n	8006de8 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8006dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f7ff fe43 	bl	8006a64 <USART_WaitOnFlagUntilTimeout>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e008      	b.n	8006dfa <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <__cvt>:
 8006e02:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e06:	ec55 4b10 	vmov	r4, r5, d0
 8006e0a:	2d00      	cmp	r5, #0
 8006e0c:	460e      	mov	r6, r1
 8006e0e:	4619      	mov	r1, r3
 8006e10:	462b      	mov	r3, r5
 8006e12:	bfbb      	ittet	lt
 8006e14:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e18:	461d      	movlt	r5, r3
 8006e1a:	2300      	movge	r3, #0
 8006e1c:	232d      	movlt	r3, #45	; 0x2d
 8006e1e:	700b      	strb	r3, [r1, #0]
 8006e20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e22:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e26:	4691      	mov	r9, r2
 8006e28:	f023 0820 	bic.w	r8, r3, #32
 8006e2c:	bfbc      	itt	lt
 8006e2e:	4622      	movlt	r2, r4
 8006e30:	4614      	movlt	r4, r2
 8006e32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e36:	d005      	beq.n	8006e44 <__cvt+0x42>
 8006e38:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e3c:	d100      	bne.n	8006e40 <__cvt+0x3e>
 8006e3e:	3601      	adds	r6, #1
 8006e40:	2102      	movs	r1, #2
 8006e42:	e000      	b.n	8006e46 <__cvt+0x44>
 8006e44:	2103      	movs	r1, #3
 8006e46:	ab03      	add	r3, sp, #12
 8006e48:	9301      	str	r3, [sp, #4]
 8006e4a:	ab02      	add	r3, sp, #8
 8006e4c:	9300      	str	r3, [sp, #0]
 8006e4e:	ec45 4b10 	vmov	d0, r4, r5
 8006e52:	4653      	mov	r3, sl
 8006e54:	4632      	mov	r2, r6
 8006e56:	f000 ff4b 	bl	8007cf0 <_dtoa_r>
 8006e5a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e5e:	4607      	mov	r7, r0
 8006e60:	d102      	bne.n	8006e68 <__cvt+0x66>
 8006e62:	f019 0f01 	tst.w	r9, #1
 8006e66:	d022      	beq.n	8006eae <__cvt+0xac>
 8006e68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e6c:	eb07 0906 	add.w	r9, r7, r6
 8006e70:	d110      	bne.n	8006e94 <__cvt+0x92>
 8006e72:	783b      	ldrb	r3, [r7, #0]
 8006e74:	2b30      	cmp	r3, #48	; 0x30
 8006e76:	d10a      	bne.n	8006e8e <__cvt+0x8c>
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	4629      	mov	r1, r5
 8006e80:	f7f9 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e84:	b918      	cbnz	r0, 8006e8e <__cvt+0x8c>
 8006e86:	f1c6 0601 	rsb	r6, r6, #1
 8006e8a:	f8ca 6000 	str.w	r6, [sl]
 8006e8e:	f8da 3000 	ldr.w	r3, [sl]
 8006e92:	4499      	add	r9, r3
 8006e94:	2200      	movs	r2, #0
 8006e96:	2300      	movs	r3, #0
 8006e98:	4620      	mov	r0, r4
 8006e9a:	4629      	mov	r1, r5
 8006e9c:	f7f9 fe14 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ea0:	b108      	cbz	r0, 8006ea6 <__cvt+0xa4>
 8006ea2:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ea6:	2230      	movs	r2, #48	; 0x30
 8006ea8:	9b03      	ldr	r3, [sp, #12]
 8006eaa:	454b      	cmp	r3, r9
 8006eac:	d307      	bcc.n	8006ebe <__cvt+0xbc>
 8006eae:	9b03      	ldr	r3, [sp, #12]
 8006eb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006eb2:	1bdb      	subs	r3, r3, r7
 8006eb4:	4638      	mov	r0, r7
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	b004      	add	sp, #16
 8006eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ebe:	1c59      	adds	r1, r3, #1
 8006ec0:	9103      	str	r1, [sp, #12]
 8006ec2:	701a      	strb	r2, [r3, #0]
 8006ec4:	e7f0      	b.n	8006ea8 <__cvt+0xa6>

08006ec6 <__exponent>:
 8006ec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2900      	cmp	r1, #0
 8006ecc:	bfb8      	it	lt
 8006ece:	4249      	neglt	r1, r1
 8006ed0:	f803 2b02 	strb.w	r2, [r3], #2
 8006ed4:	bfb4      	ite	lt
 8006ed6:	222d      	movlt	r2, #45	; 0x2d
 8006ed8:	222b      	movge	r2, #43	; 0x2b
 8006eda:	2909      	cmp	r1, #9
 8006edc:	7042      	strb	r2, [r0, #1]
 8006ede:	dd2a      	ble.n	8006f36 <__exponent+0x70>
 8006ee0:	f10d 0207 	add.w	r2, sp, #7
 8006ee4:	4617      	mov	r7, r2
 8006ee6:	260a      	movs	r6, #10
 8006ee8:	4694      	mov	ip, r2
 8006eea:	fb91 f5f6 	sdiv	r5, r1, r6
 8006eee:	fb06 1415 	mls	r4, r6, r5, r1
 8006ef2:	3430      	adds	r4, #48	; 0x30
 8006ef4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006ef8:	460c      	mov	r4, r1
 8006efa:	2c63      	cmp	r4, #99	; 0x63
 8006efc:	f102 32ff 	add.w	r2, r2, #4294967295
 8006f00:	4629      	mov	r1, r5
 8006f02:	dcf1      	bgt.n	8006ee8 <__exponent+0x22>
 8006f04:	3130      	adds	r1, #48	; 0x30
 8006f06:	f1ac 0402 	sub.w	r4, ip, #2
 8006f0a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006f0e:	1c41      	adds	r1, r0, #1
 8006f10:	4622      	mov	r2, r4
 8006f12:	42ba      	cmp	r2, r7
 8006f14:	d30a      	bcc.n	8006f2c <__exponent+0x66>
 8006f16:	f10d 0209 	add.w	r2, sp, #9
 8006f1a:	eba2 020c 	sub.w	r2, r2, ip
 8006f1e:	42bc      	cmp	r4, r7
 8006f20:	bf88      	it	hi
 8006f22:	2200      	movhi	r2, #0
 8006f24:	4413      	add	r3, r2
 8006f26:	1a18      	subs	r0, r3, r0
 8006f28:	b003      	add	sp, #12
 8006f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f2c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006f30:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006f34:	e7ed      	b.n	8006f12 <__exponent+0x4c>
 8006f36:	2330      	movs	r3, #48	; 0x30
 8006f38:	3130      	adds	r1, #48	; 0x30
 8006f3a:	7083      	strb	r3, [r0, #2]
 8006f3c:	70c1      	strb	r1, [r0, #3]
 8006f3e:	1d03      	adds	r3, r0, #4
 8006f40:	e7f1      	b.n	8006f26 <__exponent+0x60>
	...

08006f44 <_printf_float>:
 8006f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f48:	ed2d 8b02 	vpush	{d8}
 8006f4c:	b08d      	sub	sp, #52	; 0x34
 8006f4e:	460c      	mov	r4, r1
 8006f50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006f54:	4616      	mov	r6, r2
 8006f56:	461f      	mov	r7, r3
 8006f58:	4605      	mov	r5, r0
 8006f5a:	f000 fdc9 	bl	8007af0 <_localeconv_r>
 8006f5e:	f8d0 a000 	ldr.w	sl, [r0]
 8006f62:	4650      	mov	r0, sl
 8006f64:	f7f9 f984 	bl	8000270 <strlen>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	9305      	str	r3, [sp, #20]
 8006f70:	f8d8 3000 	ldr.w	r3, [r8]
 8006f74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f78:	3307      	adds	r3, #7
 8006f7a:	f023 0307 	bic.w	r3, r3, #7
 8006f7e:	f103 0208 	add.w	r2, r3, #8
 8006f82:	f8c8 2000 	str.w	r2, [r8]
 8006f86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f8e:	9307      	str	r3, [sp, #28]
 8006f90:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f94:	ee08 0a10 	vmov	s16, r0
 8006f98:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006f9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fa0:	4b9e      	ldr	r3, [pc, #632]	; (800721c <_printf_float+0x2d8>)
 8006fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa6:	f7f9 fdc1 	bl	8000b2c <__aeabi_dcmpun>
 8006faa:	bb88      	cbnz	r0, 8007010 <_printf_float+0xcc>
 8006fac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fb0:	4b9a      	ldr	r3, [pc, #616]	; (800721c <_printf_float+0x2d8>)
 8006fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb6:	f7f9 fd9b 	bl	8000af0 <__aeabi_dcmple>
 8006fba:	bb48      	cbnz	r0, 8007010 <_printf_float+0xcc>
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	4640      	mov	r0, r8
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	f7f9 fd8a 	bl	8000adc <__aeabi_dcmplt>
 8006fc8:	b110      	cbz	r0, 8006fd0 <_printf_float+0x8c>
 8006fca:	232d      	movs	r3, #45	; 0x2d
 8006fcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd0:	4a93      	ldr	r2, [pc, #588]	; (8007220 <_printf_float+0x2dc>)
 8006fd2:	4b94      	ldr	r3, [pc, #592]	; (8007224 <_printf_float+0x2e0>)
 8006fd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006fd8:	bf94      	ite	ls
 8006fda:	4690      	movls	r8, r2
 8006fdc:	4698      	movhi	r8, r3
 8006fde:	2303      	movs	r3, #3
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	9b05      	ldr	r3, [sp, #20]
 8006fe4:	f023 0304 	bic.w	r3, r3, #4
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	f04f 0900 	mov.w	r9, #0
 8006fee:	9700      	str	r7, [sp, #0]
 8006ff0:	4633      	mov	r3, r6
 8006ff2:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f000 f9da 	bl	80073b0 <_printf_common>
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	f040 8090 	bne.w	8007122 <_printf_float+0x1de>
 8007002:	f04f 30ff 	mov.w	r0, #4294967295
 8007006:	b00d      	add	sp, #52	; 0x34
 8007008:	ecbd 8b02 	vpop	{d8}
 800700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007010:	4642      	mov	r2, r8
 8007012:	464b      	mov	r3, r9
 8007014:	4640      	mov	r0, r8
 8007016:	4649      	mov	r1, r9
 8007018:	f7f9 fd88 	bl	8000b2c <__aeabi_dcmpun>
 800701c:	b140      	cbz	r0, 8007030 <_printf_float+0xec>
 800701e:	464b      	mov	r3, r9
 8007020:	2b00      	cmp	r3, #0
 8007022:	bfbc      	itt	lt
 8007024:	232d      	movlt	r3, #45	; 0x2d
 8007026:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800702a:	4a7f      	ldr	r2, [pc, #508]	; (8007228 <_printf_float+0x2e4>)
 800702c:	4b7f      	ldr	r3, [pc, #508]	; (800722c <_printf_float+0x2e8>)
 800702e:	e7d1      	b.n	8006fd4 <_printf_float+0x90>
 8007030:	6863      	ldr	r3, [r4, #4]
 8007032:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007036:	9206      	str	r2, [sp, #24]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	d13f      	bne.n	80070bc <_printf_float+0x178>
 800703c:	2306      	movs	r3, #6
 800703e:	6063      	str	r3, [r4, #4]
 8007040:	9b05      	ldr	r3, [sp, #20]
 8007042:	6861      	ldr	r1, [r4, #4]
 8007044:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007048:	2300      	movs	r3, #0
 800704a:	9303      	str	r3, [sp, #12]
 800704c:	ab0a      	add	r3, sp, #40	; 0x28
 800704e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007052:	ab09      	add	r3, sp, #36	; 0x24
 8007054:	ec49 8b10 	vmov	d0, r8, r9
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	6022      	str	r2, [r4, #0]
 800705c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007060:	4628      	mov	r0, r5
 8007062:	f7ff fece 	bl	8006e02 <__cvt>
 8007066:	9b06      	ldr	r3, [sp, #24]
 8007068:	9909      	ldr	r1, [sp, #36]	; 0x24
 800706a:	2b47      	cmp	r3, #71	; 0x47
 800706c:	4680      	mov	r8, r0
 800706e:	d108      	bne.n	8007082 <_printf_float+0x13e>
 8007070:	1cc8      	adds	r0, r1, #3
 8007072:	db02      	blt.n	800707a <_printf_float+0x136>
 8007074:	6863      	ldr	r3, [r4, #4]
 8007076:	4299      	cmp	r1, r3
 8007078:	dd41      	ble.n	80070fe <_printf_float+0x1ba>
 800707a:	f1ab 0302 	sub.w	r3, fp, #2
 800707e:	fa5f fb83 	uxtb.w	fp, r3
 8007082:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007086:	d820      	bhi.n	80070ca <_printf_float+0x186>
 8007088:	3901      	subs	r1, #1
 800708a:	465a      	mov	r2, fp
 800708c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007090:	9109      	str	r1, [sp, #36]	; 0x24
 8007092:	f7ff ff18 	bl	8006ec6 <__exponent>
 8007096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007098:	1813      	adds	r3, r2, r0
 800709a:	2a01      	cmp	r2, #1
 800709c:	4681      	mov	r9, r0
 800709e:	6123      	str	r3, [r4, #16]
 80070a0:	dc02      	bgt.n	80070a8 <_printf_float+0x164>
 80070a2:	6822      	ldr	r2, [r4, #0]
 80070a4:	07d2      	lsls	r2, r2, #31
 80070a6:	d501      	bpl.n	80070ac <_printf_float+0x168>
 80070a8:	3301      	adds	r3, #1
 80070aa:	6123      	str	r3, [r4, #16]
 80070ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d09c      	beq.n	8006fee <_printf_float+0xaa>
 80070b4:	232d      	movs	r3, #45	; 0x2d
 80070b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070ba:	e798      	b.n	8006fee <_printf_float+0xaa>
 80070bc:	9a06      	ldr	r2, [sp, #24]
 80070be:	2a47      	cmp	r2, #71	; 0x47
 80070c0:	d1be      	bne.n	8007040 <_printf_float+0xfc>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d1bc      	bne.n	8007040 <_printf_float+0xfc>
 80070c6:	2301      	movs	r3, #1
 80070c8:	e7b9      	b.n	800703e <_printf_float+0xfa>
 80070ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80070ce:	d118      	bne.n	8007102 <_printf_float+0x1be>
 80070d0:	2900      	cmp	r1, #0
 80070d2:	6863      	ldr	r3, [r4, #4]
 80070d4:	dd0b      	ble.n	80070ee <_printf_float+0x1aa>
 80070d6:	6121      	str	r1, [r4, #16]
 80070d8:	b913      	cbnz	r3, 80070e0 <_printf_float+0x19c>
 80070da:	6822      	ldr	r2, [r4, #0]
 80070dc:	07d0      	lsls	r0, r2, #31
 80070de:	d502      	bpl.n	80070e6 <_printf_float+0x1a2>
 80070e0:	3301      	adds	r3, #1
 80070e2:	440b      	add	r3, r1
 80070e4:	6123      	str	r3, [r4, #16]
 80070e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80070e8:	f04f 0900 	mov.w	r9, #0
 80070ec:	e7de      	b.n	80070ac <_printf_float+0x168>
 80070ee:	b913      	cbnz	r3, 80070f6 <_printf_float+0x1b2>
 80070f0:	6822      	ldr	r2, [r4, #0]
 80070f2:	07d2      	lsls	r2, r2, #31
 80070f4:	d501      	bpl.n	80070fa <_printf_float+0x1b6>
 80070f6:	3302      	adds	r3, #2
 80070f8:	e7f4      	b.n	80070e4 <_printf_float+0x1a0>
 80070fa:	2301      	movs	r3, #1
 80070fc:	e7f2      	b.n	80070e4 <_printf_float+0x1a0>
 80070fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007104:	4299      	cmp	r1, r3
 8007106:	db05      	blt.n	8007114 <_printf_float+0x1d0>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	6121      	str	r1, [r4, #16]
 800710c:	07d8      	lsls	r0, r3, #31
 800710e:	d5ea      	bpl.n	80070e6 <_printf_float+0x1a2>
 8007110:	1c4b      	adds	r3, r1, #1
 8007112:	e7e7      	b.n	80070e4 <_printf_float+0x1a0>
 8007114:	2900      	cmp	r1, #0
 8007116:	bfd4      	ite	le
 8007118:	f1c1 0202 	rsble	r2, r1, #2
 800711c:	2201      	movgt	r2, #1
 800711e:	4413      	add	r3, r2
 8007120:	e7e0      	b.n	80070e4 <_printf_float+0x1a0>
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	055a      	lsls	r2, r3, #21
 8007126:	d407      	bmi.n	8007138 <_printf_float+0x1f4>
 8007128:	6923      	ldr	r3, [r4, #16]
 800712a:	4642      	mov	r2, r8
 800712c:	4631      	mov	r1, r6
 800712e:	4628      	mov	r0, r5
 8007130:	47b8      	blx	r7
 8007132:	3001      	adds	r0, #1
 8007134:	d12c      	bne.n	8007190 <_printf_float+0x24c>
 8007136:	e764      	b.n	8007002 <_printf_float+0xbe>
 8007138:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800713c:	f240 80e0 	bls.w	8007300 <_printf_float+0x3bc>
 8007140:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007144:	2200      	movs	r2, #0
 8007146:	2300      	movs	r3, #0
 8007148:	f7f9 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800714c:	2800      	cmp	r0, #0
 800714e:	d034      	beq.n	80071ba <_printf_float+0x276>
 8007150:	4a37      	ldr	r2, [pc, #220]	; (8007230 <_printf_float+0x2ec>)
 8007152:	2301      	movs	r3, #1
 8007154:	4631      	mov	r1, r6
 8007156:	4628      	mov	r0, r5
 8007158:	47b8      	blx	r7
 800715a:	3001      	adds	r0, #1
 800715c:	f43f af51 	beq.w	8007002 <_printf_float+0xbe>
 8007160:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007164:	429a      	cmp	r2, r3
 8007166:	db02      	blt.n	800716e <_printf_float+0x22a>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	07d8      	lsls	r0, r3, #31
 800716c:	d510      	bpl.n	8007190 <_printf_float+0x24c>
 800716e:	ee18 3a10 	vmov	r3, s16
 8007172:	4652      	mov	r2, sl
 8007174:	4631      	mov	r1, r6
 8007176:	4628      	mov	r0, r5
 8007178:	47b8      	blx	r7
 800717a:	3001      	adds	r0, #1
 800717c:	f43f af41 	beq.w	8007002 <_printf_float+0xbe>
 8007180:	f04f 0800 	mov.w	r8, #0
 8007184:	f104 091a 	add.w	r9, r4, #26
 8007188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800718a:	3b01      	subs	r3, #1
 800718c:	4543      	cmp	r3, r8
 800718e:	dc09      	bgt.n	80071a4 <_printf_float+0x260>
 8007190:	6823      	ldr	r3, [r4, #0]
 8007192:	079b      	lsls	r3, r3, #30
 8007194:	f100 8107 	bmi.w	80073a6 <_printf_float+0x462>
 8007198:	68e0      	ldr	r0, [r4, #12]
 800719a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800719c:	4298      	cmp	r0, r3
 800719e:	bfb8      	it	lt
 80071a0:	4618      	movlt	r0, r3
 80071a2:	e730      	b.n	8007006 <_printf_float+0xc2>
 80071a4:	2301      	movs	r3, #1
 80071a6:	464a      	mov	r2, r9
 80071a8:	4631      	mov	r1, r6
 80071aa:	4628      	mov	r0, r5
 80071ac:	47b8      	blx	r7
 80071ae:	3001      	adds	r0, #1
 80071b0:	f43f af27 	beq.w	8007002 <_printf_float+0xbe>
 80071b4:	f108 0801 	add.w	r8, r8, #1
 80071b8:	e7e6      	b.n	8007188 <_printf_float+0x244>
 80071ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071bc:	2b00      	cmp	r3, #0
 80071be:	dc39      	bgt.n	8007234 <_printf_float+0x2f0>
 80071c0:	4a1b      	ldr	r2, [pc, #108]	; (8007230 <_printf_float+0x2ec>)
 80071c2:	2301      	movs	r3, #1
 80071c4:	4631      	mov	r1, r6
 80071c6:	4628      	mov	r0, r5
 80071c8:	47b8      	blx	r7
 80071ca:	3001      	adds	r0, #1
 80071cc:	f43f af19 	beq.w	8007002 <_printf_float+0xbe>
 80071d0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80071d4:	4313      	orrs	r3, r2
 80071d6:	d102      	bne.n	80071de <_printf_float+0x29a>
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	07d9      	lsls	r1, r3, #31
 80071dc:	d5d8      	bpl.n	8007190 <_printf_float+0x24c>
 80071de:	ee18 3a10 	vmov	r3, s16
 80071e2:	4652      	mov	r2, sl
 80071e4:	4631      	mov	r1, r6
 80071e6:	4628      	mov	r0, r5
 80071e8:	47b8      	blx	r7
 80071ea:	3001      	adds	r0, #1
 80071ec:	f43f af09 	beq.w	8007002 <_printf_float+0xbe>
 80071f0:	f04f 0900 	mov.w	r9, #0
 80071f4:	f104 0a1a 	add.w	sl, r4, #26
 80071f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071fa:	425b      	negs	r3, r3
 80071fc:	454b      	cmp	r3, r9
 80071fe:	dc01      	bgt.n	8007204 <_printf_float+0x2c0>
 8007200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007202:	e792      	b.n	800712a <_printf_float+0x1e6>
 8007204:	2301      	movs	r3, #1
 8007206:	4652      	mov	r2, sl
 8007208:	4631      	mov	r1, r6
 800720a:	4628      	mov	r0, r5
 800720c:	47b8      	blx	r7
 800720e:	3001      	adds	r0, #1
 8007210:	f43f aef7 	beq.w	8007002 <_printf_float+0xbe>
 8007214:	f109 0901 	add.w	r9, r9, #1
 8007218:	e7ee      	b.n	80071f8 <_printf_float+0x2b4>
 800721a:	bf00      	nop
 800721c:	7fefffff 	.word	0x7fefffff
 8007220:	0800ade8 	.word	0x0800ade8
 8007224:	0800adec 	.word	0x0800adec
 8007228:	0800adf0 	.word	0x0800adf0
 800722c:	0800adf4 	.word	0x0800adf4
 8007230:	0800adf8 	.word	0x0800adf8
 8007234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007236:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007238:	429a      	cmp	r2, r3
 800723a:	bfa8      	it	ge
 800723c:	461a      	movge	r2, r3
 800723e:	2a00      	cmp	r2, #0
 8007240:	4691      	mov	r9, r2
 8007242:	dc37      	bgt.n	80072b4 <_printf_float+0x370>
 8007244:	f04f 0b00 	mov.w	fp, #0
 8007248:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800724c:	f104 021a 	add.w	r2, r4, #26
 8007250:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007252:	9305      	str	r3, [sp, #20]
 8007254:	eba3 0309 	sub.w	r3, r3, r9
 8007258:	455b      	cmp	r3, fp
 800725a:	dc33      	bgt.n	80072c4 <_printf_float+0x380>
 800725c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007260:	429a      	cmp	r2, r3
 8007262:	db3b      	blt.n	80072dc <_printf_float+0x398>
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	07da      	lsls	r2, r3, #31
 8007268:	d438      	bmi.n	80072dc <_printf_float+0x398>
 800726a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800726e:	eba2 0903 	sub.w	r9, r2, r3
 8007272:	9b05      	ldr	r3, [sp, #20]
 8007274:	1ad2      	subs	r2, r2, r3
 8007276:	4591      	cmp	r9, r2
 8007278:	bfa8      	it	ge
 800727a:	4691      	movge	r9, r2
 800727c:	f1b9 0f00 	cmp.w	r9, #0
 8007280:	dc35      	bgt.n	80072ee <_printf_float+0x3aa>
 8007282:	f04f 0800 	mov.w	r8, #0
 8007286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800728a:	f104 0a1a 	add.w	sl, r4, #26
 800728e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	eba3 0309 	sub.w	r3, r3, r9
 8007298:	4543      	cmp	r3, r8
 800729a:	f77f af79 	ble.w	8007190 <_printf_float+0x24c>
 800729e:	2301      	movs	r3, #1
 80072a0:	4652      	mov	r2, sl
 80072a2:	4631      	mov	r1, r6
 80072a4:	4628      	mov	r0, r5
 80072a6:	47b8      	blx	r7
 80072a8:	3001      	adds	r0, #1
 80072aa:	f43f aeaa 	beq.w	8007002 <_printf_float+0xbe>
 80072ae:	f108 0801 	add.w	r8, r8, #1
 80072b2:	e7ec      	b.n	800728e <_printf_float+0x34a>
 80072b4:	4613      	mov	r3, r2
 80072b6:	4631      	mov	r1, r6
 80072b8:	4642      	mov	r2, r8
 80072ba:	4628      	mov	r0, r5
 80072bc:	47b8      	blx	r7
 80072be:	3001      	adds	r0, #1
 80072c0:	d1c0      	bne.n	8007244 <_printf_float+0x300>
 80072c2:	e69e      	b.n	8007002 <_printf_float+0xbe>
 80072c4:	2301      	movs	r3, #1
 80072c6:	4631      	mov	r1, r6
 80072c8:	4628      	mov	r0, r5
 80072ca:	9205      	str	r2, [sp, #20]
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	f43f ae97 	beq.w	8007002 <_printf_float+0xbe>
 80072d4:	9a05      	ldr	r2, [sp, #20]
 80072d6:	f10b 0b01 	add.w	fp, fp, #1
 80072da:	e7b9      	b.n	8007250 <_printf_float+0x30c>
 80072dc:	ee18 3a10 	vmov	r3, s16
 80072e0:	4652      	mov	r2, sl
 80072e2:	4631      	mov	r1, r6
 80072e4:	4628      	mov	r0, r5
 80072e6:	47b8      	blx	r7
 80072e8:	3001      	adds	r0, #1
 80072ea:	d1be      	bne.n	800726a <_printf_float+0x326>
 80072ec:	e689      	b.n	8007002 <_printf_float+0xbe>
 80072ee:	9a05      	ldr	r2, [sp, #20]
 80072f0:	464b      	mov	r3, r9
 80072f2:	4442      	add	r2, r8
 80072f4:	4631      	mov	r1, r6
 80072f6:	4628      	mov	r0, r5
 80072f8:	47b8      	blx	r7
 80072fa:	3001      	adds	r0, #1
 80072fc:	d1c1      	bne.n	8007282 <_printf_float+0x33e>
 80072fe:	e680      	b.n	8007002 <_printf_float+0xbe>
 8007300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007302:	2a01      	cmp	r2, #1
 8007304:	dc01      	bgt.n	800730a <_printf_float+0x3c6>
 8007306:	07db      	lsls	r3, r3, #31
 8007308:	d53a      	bpl.n	8007380 <_printf_float+0x43c>
 800730a:	2301      	movs	r3, #1
 800730c:	4642      	mov	r2, r8
 800730e:	4631      	mov	r1, r6
 8007310:	4628      	mov	r0, r5
 8007312:	47b8      	blx	r7
 8007314:	3001      	adds	r0, #1
 8007316:	f43f ae74 	beq.w	8007002 <_printf_float+0xbe>
 800731a:	ee18 3a10 	vmov	r3, s16
 800731e:	4652      	mov	r2, sl
 8007320:	4631      	mov	r1, r6
 8007322:	4628      	mov	r0, r5
 8007324:	47b8      	blx	r7
 8007326:	3001      	adds	r0, #1
 8007328:	f43f ae6b 	beq.w	8007002 <_printf_float+0xbe>
 800732c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007330:	2200      	movs	r2, #0
 8007332:	2300      	movs	r3, #0
 8007334:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007338:	f7f9 fbc6 	bl	8000ac8 <__aeabi_dcmpeq>
 800733c:	b9d8      	cbnz	r0, 8007376 <_printf_float+0x432>
 800733e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007342:	f108 0201 	add.w	r2, r8, #1
 8007346:	4631      	mov	r1, r6
 8007348:	4628      	mov	r0, r5
 800734a:	47b8      	blx	r7
 800734c:	3001      	adds	r0, #1
 800734e:	d10e      	bne.n	800736e <_printf_float+0x42a>
 8007350:	e657      	b.n	8007002 <_printf_float+0xbe>
 8007352:	2301      	movs	r3, #1
 8007354:	4652      	mov	r2, sl
 8007356:	4631      	mov	r1, r6
 8007358:	4628      	mov	r0, r5
 800735a:	47b8      	blx	r7
 800735c:	3001      	adds	r0, #1
 800735e:	f43f ae50 	beq.w	8007002 <_printf_float+0xbe>
 8007362:	f108 0801 	add.w	r8, r8, #1
 8007366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007368:	3b01      	subs	r3, #1
 800736a:	4543      	cmp	r3, r8
 800736c:	dcf1      	bgt.n	8007352 <_printf_float+0x40e>
 800736e:	464b      	mov	r3, r9
 8007370:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007374:	e6da      	b.n	800712c <_printf_float+0x1e8>
 8007376:	f04f 0800 	mov.w	r8, #0
 800737a:	f104 0a1a 	add.w	sl, r4, #26
 800737e:	e7f2      	b.n	8007366 <_printf_float+0x422>
 8007380:	2301      	movs	r3, #1
 8007382:	4642      	mov	r2, r8
 8007384:	e7df      	b.n	8007346 <_printf_float+0x402>
 8007386:	2301      	movs	r3, #1
 8007388:	464a      	mov	r2, r9
 800738a:	4631      	mov	r1, r6
 800738c:	4628      	mov	r0, r5
 800738e:	47b8      	blx	r7
 8007390:	3001      	adds	r0, #1
 8007392:	f43f ae36 	beq.w	8007002 <_printf_float+0xbe>
 8007396:	f108 0801 	add.w	r8, r8, #1
 800739a:	68e3      	ldr	r3, [r4, #12]
 800739c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800739e:	1a5b      	subs	r3, r3, r1
 80073a0:	4543      	cmp	r3, r8
 80073a2:	dcf0      	bgt.n	8007386 <_printf_float+0x442>
 80073a4:	e6f8      	b.n	8007198 <_printf_float+0x254>
 80073a6:	f04f 0800 	mov.w	r8, #0
 80073aa:	f104 0919 	add.w	r9, r4, #25
 80073ae:	e7f4      	b.n	800739a <_printf_float+0x456>

080073b0 <_printf_common>:
 80073b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b4:	4616      	mov	r6, r2
 80073b6:	4699      	mov	r9, r3
 80073b8:	688a      	ldr	r2, [r1, #8]
 80073ba:	690b      	ldr	r3, [r1, #16]
 80073bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073c0:	4293      	cmp	r3, r2
 80073c2:	bfb8      	it	lt
 80073c4:	4613      	movlt	r3, r2
 80073c6:	6033      	str	r3, [r6, #0]
 80073c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073cc:	4607      	mov	r7, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	b10a      	cbz	r2, 80073d6 <_printf_common+0x26>
 80073d2:	3301      	adds	r3, #1
 80073d4:	6033      	str	r3, [r6, #0]
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	0699      	lsls	r1, r3, #26
 80073da:	bf42      	ittt	mi
 80073dc:	6833      	ldrmi	r3, [r6, #0]
 80073de:	3302      	addmi	r3, #2
 80073e0:	6033      	strmi	r3, [r6, #0]
 80073e2:	6825      	ldr	r5, [r4, #0]
 80073e4:	f015 0506 	ands.w	r5, r5, #6
 80073e8:	d106      	bne.n	80073f8 <_printf_common+0x48>
 80073ea:	f104 0a19 	add.w	sl, r4, #25
 80073ee:	68e3      	ldr	r3, [r4, #12]
 80073f0:	6832      	ldr	r2, [r6, #0]
 80073f2:	1a9b      	subs	r3, r3, r2
 80073f4:	42ab      	cmp	r3, r5
 80073f6:	dc26      	bgt.n	8007446 <_printf_common+0x96>
 80073f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073fc:	1e13      	subs	r3, r2, #0
 80073fe:	6822      	ldr	r2, [r4, #0]
 8007400:	bf18      	it	ne
 8007402:	2301      	movne	r3, #1
 8007404:	0692      	lsls	r2, r2, #26
 8007406:	d42b      	bmi.n	8007460 <_printf_common+0xb0>
 8007408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800740c:	4649      	mov	r1, r9
 800740e:	4638      	mov	r0, r7
 8007410:	47c0      	blx	r8
 8007412:	3001      	adds	r0, #1
 8007414:	d01e      	beq.n	8007454 <_printf_common+0xa4>
 8007416:	6823      	ldr	r3, [r4, #0]
 8007418:	6922      	ldr	r2, [r4, #16]
 800741a:	f003 0306 	and.w	r3, r3, #6
 800741e:	2b04      	cmp	r3, #4
 8007420:	bf02      	ittt	eq
 8007422:	68e5      	ldreq	r5, [r4, #12]
 8007424:	6833      	ldreq	r3, [r6, #0]
 8007426:	1aed      	subeq	r5, r5, r3
 8007428:	68a3      	ldr	r3, [r4, #8]
 800742a:	bf0c      	ite	eq
 800742c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007430:	2500      	movne	r5, #0
 8007432:	4293      	cmp	r3, r2
 8007434:	bfc4      	itt	gt
 8007436:	1a9b      	subgt	r3, r3, r2
 8007438:	18ed      	addgt	r5, r5, r3
 800743a:	2600      	movs	r6, #0
 800743c:	341a      	adds	r4, #26
 800743e:	42b5      	cmp	r5, r6
 8007440:	d11a      	bne.n	8007478 <_printf_common+0xc8>
 8007442:	2000      	movs	r0, #0
 8007444:	e008      	b.n	8007458 <_printf_common+0xa8>
 8007446:	2301      	movs	r3, #1
 8007448:	4652      	mov	r2, sl
 800744a:	4649      	mov	r1, r9
 800744c:	4638      	mov	r0, r7
 800744e:	47c0      	blx	r8
 8007450:	3001      	adds	r0, #1
 8007452:	d103      	bne.n	800745c <_printf_common+0xac>
 8007454:	f04f 30ff 	mov.w	r0, #4294967295
 8007458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745c:	3501      	adds	r5, #1
 800745e:	e7c6      	b.n	80073ee <_printf_common+0x3e>
 8007460:	18e1      	adds	r1, r4, r3
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	2030      	movs	r0, #48	; 0x30
 8007466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800746a:	4422      	add	r2, r4
 800746c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007474:	3302      	adds	r3, #2
 8007476:	e7c7      	b.n	8007408 <_printf_common+0x58>
 8007478:	2301      	movs	r3, #1
 800747a:	4622      	mov	r2, r4
 800747c:	4649      	mov	r1, r9
 800747e:	4638      	mov	r0, r7
 8007480:	47c0      	blx	r8
 8007482:	3001      	adds	r0, #1
 8007484:	d0e6      	beq.n	8007454 <_printf_common+0xa4>
 8007486:	3601      	adds	r6, #1
 8007488:	e7d9      	b.n	800743e <_printf_common+0x8e>
	...

0800748c <_printf_i>:
 800748c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007490:	7e0f      	ldrb	r7, [r1, #24]
 8007492:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007494:	2f78      	cmp	r7, #120	; 0x78
 8007496:	4691      	mov	r9, r2
 8007498:	4680      	mov	r8, r0
 800749a:	460c      	mov	r4, r1
 800749c:	469a      	mov	sl, r3
 800749e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074a2:	d807      	bhi.n	80074b4 <_printf_i+0x28>
 80074a4:	2f62      	cmp	r7, #98	; 0x62
 80074a6:	d80a      	bhi.n	80074be <_printf_i+0x32>
 80074a8:	2f00      	cmp	r7, #0
 80074aa:	f000 80d4 	beq.w	8007656 <_printf_i+0x1ca>
 80074ae:	2f58      	cmp	r7, #88	; 0x58
 80074b0:	f000 80c0 	beq.w	8007634 <_printf_i+0x1a8>
 80074b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074bc:	e03a      	b.n	8007534 <_printf_i+0xa8>
 80074be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074c2:	2b15      	cmp	r3, #21
 80074c4:	d8f6      	bhi.n	80074b4 <_printf_i+0x28>
 80074c6:	a101      	add	r1, pc, #4	; (adr r1, 80074cc <_printf_i+0x40>)
 80074c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074cc:	08007525 	.word	0x08007525
 80074d0:	08007539 	.word	0x08007539
 80074d4:	080074b5 	.word	0x080074b5
 80074d8:	080074b5 	.word	0x080074b5
 80074dc:	080074b5 	.word	0x080074b5
 80074e0:	080074b5 	.word	0x080074b5
 80074e4:	08007539 	.word	0x08007539
 80074e8:	080074b5 	.word	0x080074b5
 80074ec:	080074b5 	.word	0x080074b5
 80074f0:	080074b5 	.word	0x080074b5
 80074f4:	080074b5 	.word	0x080074b5
 80074f8:	0800763d 	.word	0x0800763d
 80074fc:	08007565 	.word	0x08007565
 8007500:	080075f7 	.word	0x080075f7
 8007504:	080074b5 	.word	0x080074b5
 8007508:	080074b5 	.word	0x080074b5
 800750c:	0800765f 	.word	0x0800765f
 8007510:	080074b5 	.word	0x080074b5
 8007514:	08007565 	.word	0x08007565
 8007518:	080074b5 	.word	0x080074b5
 800751c:	080074b5 	.word	0x080074b5
 8007520:	080075ff 	.word	0x080075ff
 8007524:	682b      	ldr	r3, [r5, #0]
 8007526:	1d1a      	adds	r2, r3, #4
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	602a      	str	r2, [r5, #0]
 800752c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007534:	2301      	movs	r3, #1
 8007536:	e09f      	b.n	8007678 <_printf_i+0x1ec>
 8007538:	6820      	ldr	r0, [r4, #0]
 800753a:	682b      	ldr	r3, [r5, #0]
 800753c:	0607      	lsls	r7, r0, #24
 800753e:	f103 0104 	add.w	r1, r3, #4
 8007542:	6029      	str	r1, [r5, #0]
 8007544:	d501      	bpl.n	800754a <_printf_i+0xbe>
 8007546:	681e      	ldr	r6, [r3, #0]
 8007548:	e003      	b.n	8007552 <_printf_i+0xc6>
 800754a:	0646      	lsls	r6, r0, #25
 800754c:	d5fb      	bpl.n	8007546 <_printf_i+0xba>
 800754e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007552:	2e00      	cmp	r6, #0
 8007554:	da03      	bge.n	800755e <_printf_i+0xd2>
 8007556:	232d      	movs	r3, #45	; 0x2d
 8007558:	4276      	negs	r6, r6
 800755a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800755e:	485a      	ldr	r0, [pc, #360]	; (80076c8 <_printf_i+0x23c>)
 8007560:	230a      	movs	r3, #10
 8007562:	e012      	b.n	800758a <_printf_i+0xfe>
 8007564:	682b      	ldr	r3, [r5, #0]
 8007566:	6820      	ldr	r0, [r4, #0]
 8007568:	1d19      	adds	r1, r3, #4
 800756a:	6029      	str	r1, [r5, #0]
 800756c:	0605      	lsls	r5, r0, #24
 800756e:	d501      	bpl.n	8007574 <_printf_i+0xe8>
 8007570:	681e      	ldr	r6, [r3, #0]
 8007572:	e002      	b.n	800757a <_printf_i+0xee>
 8007574:	0641      	lsls	r1, r0, #25
 8007576:	d5fb      	bpl.n	8007570 <_printf_i+0xe4>
 8007578:	881e      	ldrh	r6, [r3, #0]
 800757a:	4853      	ldr	r0, [pc, #332]	; (80076c8 <_printf_i+0x23c>)
 800757c:	2f6f      	cmp	r7, #111	; 0x6f
 800757e:	bf0c      	ite	eq
 8007580:	2308      	moveq	r3, #8
 8007582:	230a      	movne	r3, #10
 8007584:	2100      	movs	r1, #0
 8007586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800758a:	6865      	ldr	r5, [r4, #4]
 800758c:	60a5      	str	r5, [r4, #8]
 800758e:	2d00      	cmp	r5, #0
 8007590:	bfa2      	ittt	ge
 8007592:	6821      	ldrge	r1, [r4, #0]
 8007594:	f021 0104 	bicge.w	r1, r1, #4
 8007598:	6021      	strge	r1, [r4, #0]
 800759a:	b90e      	cbnz	r6, 80075a0 <_printf_i+0x114>
 800759c:	2d00      	cmp	r5, #0
 800759e:	d04b      	beq.n	8007638 <_printf_i+0x1ac>
 80075a0:	4615      	mov	r5, r2
 80075a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80075a6:	fb03 6711 	mls	r7, r3, r1, r6
 80075aa:	5dc7      	ldrb	r7, [r0, r7]
 80075ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075b0:	4637      	mov	r7, r6
 80075b2:	42bb      	cmp	r3, r7
 80075b4:	460e      	mov	r6, r1
 80075b6:	d9f4      	bls.n	80075a2 <_printf_i+0x116>
 80075b8:	2b08      	cmp	r3, #8
 80075ba:	d10b      	bne.n	80075d4 <_printf_i+0x148>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	07de      	lsls	r6, r3, #31
 80075c0:	d508      	bpl.n	80075d4 <_printf_i+0x148>
 80075c2:	6923      	ldr	r3, [r4, #16]
 80075c4:	6861      	ldr	r1, [r4, #4]
 80075c6:	4299      	cmp	r1, r3
 80075c8:	bfde      	ittt	le
 80075ca:	2330      	movle	r3, #48	; 0x30
 80075cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80075d4:	1b52      	subs	r2, r2, r5
 80075d6:	6122      	str	r2, [r4, #16]
 80075d8:	f8cd a000 	str.w	sl, [sp]
 80075dc:	464b      	mov	r3, r9
 80075de:	aa03      	add	r2, sp, #12
 80075e0:	4621      	mov	r1, r4
 80075e2:	4640      	mov	r0, r8
 80075e4:	f7ff fee4 	bl	80073b0 <_printf_common>
 80075e8:	3001      	adds	r0, #1
 80075ea:	d14a      	bne.n	8007682 <_printf_i+0x1f6>
 80075ec:	f04f 30ff 	mov.w	r0, #4294967295
 80075f0:	b004      	add	sp, #16
 80075f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	f043 0320 	orr.w	r3, r3, #32
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	4833      	ldr	r0, [pc, #204]	; (80076cc <_printf_i+0x240>)
 8007600:	2778      	movs	r7, #120	; 0x78
 8007602:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007606:	6823      	ldr	r3, [r4, #0]
 8007608:	6829      	ldr	r1, [r5, #0]
 800760a:	061f      	lsls	r7, r3, #24
 800760c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007610:	d402      	bmi.n	8007618 <_printf_i+0x18c>
 8007612:	065f      	lsls	r7, r3, #25
 8007614:	bf48      	it	mi
 8007616:	b2b6      	uxthmi	r6, r6
 8007618:	07df      	lsls	r7, r3, #31
 800761a:	bf48      	it	mi
 800761c:	f043 0320 	orrmi.w	r3, r3, #32
 8007620:	6029      	str	r1, [r5, #0]
 8007622:	bf48      	it	mi
 8007624:	6023      	strmi	r3, [r4, #0]
 8007626:	b91e      	cbnz	r6, 8007630 <_printf_i+0x1a4>
 8007628:	6823      	ldr	r3, [r4, #0]
 800762a:	f023 0320 	bic.w	r3, r3, #32
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	2310      	movs	r3, #16
 8007632:	e7a7      	b.n	8007584 <_printf_i+0xf8>
 8007634:	4824      	ldr	r0, [pc, #144]	; (80076c8 <_printf_i+0x23c>)
 8007636:	e7e4      	b.n	8007602 <_printf_i+0x176>
 8007638:	4615      	mov	r5, r2
 800763a:	e7bd      	b.n	80075b8 <_printf_i+0x12c>
 800763c:	682b      	ldr	r3, [r5, #0]
 800763e:	6826      	ldr	r6, [r4, #0]
 8007640:	6961      	ldr	r1, [r4, #20]
 8007642:	1d18      	adds	r0, r3, #4
 8007644:	6028      	str	r0, [r5, #0]
 8007646:	0635      	lsls	r5, r6, #24
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	d501      	bpl.n	8007650 <_printf_i+0x1c4>
 800764c:	6019      	str	r1, [r3, #0]
 800764e:	e002      	b.n	8007656 <_printf_i+0x1ca>
 8007650:	0670      	lsls	r0, r6, #25
 8007652:	d5fb      	bpl.n	800764c <_printf_i+0x1c0>
 8007654:	8019      	strh	r1, [r3, #0]
 8007656:	2300      	movs	r3, #0
 8007658:	6123      	str	r3, [r4, #16]
 800765a:	4615      	mov	r5, r2
 800765c:	e7bc      	b.n	80075d8 <_printf_i+0x14c>
 800765e:	682b      	ldr	r3, [r5, #0]
 8007660:	1d1a      	adds	r2, r3, #4
 8007662:	602a      	str	r2, [r5, #0]
 8007664:	681d      	ldr	r5, [r3, #0]
 8007666:	6862      	ldr	r2, [r4, #4]
 8007668:	2100      	movs	r1, #0
 800766a:	4628      	mov	r0, r5
 800766c:	f7f8 fdb0 	bl	80001d0 <memchr>
 8007670:	b108      	cbz	r0, 8007676 <_printf_i+0x1ea>
 8007672:	1b40      	subs	r0, r0, r5
 8007674:	6060      	str	r0, [r4, #4]
 8007676:	6863      	ldr	r3, [r4, #4]
 8007678:	6123      	str	r3, [r4, #16]
 800767a:	2300      	movs	r3, #0
 800767c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007680:	e7aa      	b.n	80075d8 <_printf_i+0x14c>
 8007682:	6923      	ldr	r3, [r4, #16]
 8007684:	462a      	mov	r2, r5
 8007686:	4649      	mov	r1, r9
 8007688:	4640      	mov	r0, r8
 800768a:	47d0      	blx	sl
 800768c:	3001      	adds	r0, #1
 800768e:	d0ad      	beq.n	80075ec <_printf_i+0x160>
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	079b      	lsls	r3, r3, #30
 8007694:	d413      	bmi.n	80076be <_printf_i+0x232>
 8007696:	68e0      	ldr	r0, [r4, #12]
 8007698:	9b03      	ldr	r3, [sp, #12]
 800769a:	4298      	cmp	r0, r3
 800769c:	bfb8      	it	lt
 800769e:	4618      	movlt	r0, r3
 80076a0:	e7a6      	b.n	80075f0 <_printf_i+0x164>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4632      	mov	r2, r6
 80076a6:	4649      	mov	r1, r9
 80076a8:	4640      	mov	r0, r8
 80076aa:	47d0      	blx	sl
 80076ac:	3001      	adds	r0, #1
 80076ae:	d09d      	beq.n	80075ec <_printf_i+0x160>
 80076b0:	3501      	adds	r5, #1
 80076b2:	68e3      	ldr	r3, [r4, #12]
 80076b4:	9903      	ldr	r1, [sp, #12]
 80076b6:	1a5b      	subs	r3, r3, r1
 80076b8:	42ab      	cmp	r3, r5
 80076ba:	dcf2      	bgt.n	80076a2 <_printf_i+0x216>
 80076bc:	e7eb      	b.n	8007696 <_printf_i+0x20a>
 80076be:	2500      	movs	r5, #0
 80076c0:	f104 0619 	add.w	r6, r4, #25
 80076c4:	e7f5      	b.n	80076b2 <_printf_i+0x226>
 80076c6:	bf00      	nop
 80076c8:	0800adfa 	.word	0x0800adfa
 80076cc:	0800ae0b 	.word	0x0800ae0b

080076d0 <std>:
 80076d0:	2300      	movs	r3, #0
 80076d2:	b510      	push	{r4, lr}
 80076d4:	4604      	mov	r4, r0
 80076d6:	e9c0 3300 	strd	r3, r3, [r0]
 80076da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076de:	6083      	str	r3, [r0, #8]
 80076e0:	8181      	strh	r1, [r0, #12]
 80076e2:	6643      	str	r3, [r0, #100]	; 0x64
 80076e4:	81c2      	strh	r2, [r0, #14]
 80076e6:	6183      	str	r3, [r0, #24]
 80076e8:	4619      	mov	r1, r3
 80076ea:	2208      	movs	r2, #8
 80076ec:	305c      	adds	r0, #92	; 0x5c
 80076ee:	f000 f9f7 	bl	8007ae0 <memset>
 80076f2:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <std+0x58>)
 80076f4:	6263      	str	r3, [r4, #36]	; 0x24
 80076f6:	4b0d      	ldr	r3, [pc, #52]	; (800772c <std+0x5c>)
 80076f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80076fa:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <std+0x60>)
 80076fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076fe:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <std+0x64>)
 8007700:	6323      	str	r3, [r4, #48]	; 0x30
 8007702:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <std+0x68>)
 8007704:	6224      	str	r4, [r4, #32]
 8007706:	429c      	cmp	r4, r3
 8007708:	d006      	beq.n	8007718 <std+0x48>
 800770a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800770e:	4294      	cmp	r4, r2
 8007710:	d002      	beq.n	8007718 <std+0x48>
 8007712:	33d0      	adds	r3, #208	; 0xd0
 8007714:	429c      	cmp	r4, r3
 8007716:	d105      	bne.n	8007724 <std+0x54>
 8007718:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800771c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007720:	f000 ba5a 	b.w	8007bd8 <__retarget_lock_init_recursive>
 8007724:	bd10      	pop	{r4, pc}
 8007726:	bf00      	nop
 8007728:	08007931 	.word	0x08007931
 800772c:	08007953 	.word	0x08007953
 8007730:	0800798b 	.word	0x0800798b
 8007734:	080079af 	.word	0x080079af
 8007738:	20000360 	.word	0x20000360

0800773c <stdio_exit_handler>:
 800773c:	4a02      	ldr	r2, [pc, #8]	; (8007748 <stdio_exit_handler+0xc>)
 800773e:	4903      	ldr	r1, [pc, #12]	; (800774c <stdio_exit_handler+0x10>)
 8007740:	4803      	ldr	r0, [pc, #12]	; (8007750 <stdio_exit_handler+0x14>)
 8007742:	f000 b869 	b.w	8007818 <_fwalk_sglue>
 8007746:	bf00      	nop
 8007748:	2000000c 	.word	0x2000000c
 800774c:	08009561 	.word	0x08009561
 8007750:	20000018 	.word	0x20000018

08007754 <cleanup_stdio>:
 8007754:	6841      	ldr	r1, [r0, #4]
 8007756:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <cleanup_stdio+0x34>)
 8007758:	4299      	cmp	r1, r3
 800775a:	b510      	push	{r4, lr}
 800775c:	4604      	mov	r4, r0
 800775e:	d001      	beq.n	8007764 <cleanup_stdio+0x10>
 8007760:	f001 fefe 	bl	8009560 <_fflush_r>
 8007764:	68a1      	ldr	r1, [r4, #8]
 8007766:	4b09      	ldr	r3, [pc, #36]	; (800778c <cleanup_stdio+0x38>)
 8007768:	4299      	cmp	r1, r3
 800776a:	d002      	beq.n	8007772 <cleanup_stdio+0x1e>
 800776c:	4620      	mov	r0, r4
 800776e:	f001 fef7 	bl	8009560 <_fflush_r>
 8007772:	68e1      	ldr	r1, [r4, #12]
 8007774:	4b06      	ldr	r3, [pc, #24]	; (8007790 <cleanup_stdio+0x3c>)
 8007776:	4299      	cmp	r1, r3
 8007778:	d004      	beq.n	8007784 <cleanup_stdio+0x30>
 800777a:	4620      	mov	r0, r4
 800777c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007780:	f001 beee 	b.w	8009560 <_fflush_r>
 8007784:	bd10      	pop	{r4, pc}
 8007786:	bf00      	nop
 8007788:	20000360 	.word	0x20000360
 800778c:	200003c8 	.word	0x200003c8
 8007790:	20000430 	.word	0x20000430

08007794 <global_stdio_init.part.0>:
 8007794:	b510      	push	{r4, lr}
 8007796:	4b0b      	ldr	r3, [pc, #44]	; (80077c4 <global_stdio_init.part.0+0x30>)
 8007798:	4c0b      	ldr	r4, [pc, #44]	; (80077c8 <global_stdio_init.part.0+0x34>)
 800779a:	4a0c      	ldr	r2, [pc, #48]	; (80077cc <global_stdio_init.part.0+0x38>)
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	4620      	mov	r0, r4
 80077a0:	2200      	movs	r2, #0
 80077a2:	2104      	movs	r1, #4
 80077a4:	f7ff ff94 	bl	80076d0 <std>
 80077a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80077ac:	2201      	movs	r2, #1
 80077ae:	2109      	movs	r1, #9
 80077b0:	f7ff ff8e 	bl	80076d0 <std>
 80077b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80077b8:	2202      	movs	r2, #2
 80077ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077be:	2112      	movs	r1, #18
 80077c0:	f7ff bf86 	b.w	80076d0 <std>
 80077c4:	20000498 	.word	0x20000498
 80077c8:	20000360 	.word	0x20000360
 80077cc:	0800773d 	.word	0x0800773d

080077d0 <__sfp_lock_acquire>:
 80077d0:	4801      	ldr	r0, [pc, #4]	; (80077d8 <__sfp_lock_acquire+0x8>)
 80077d2:	f000 ba02 	b.w	8007bda <__retarget_lock_acquire_recursive>
 80077d6:	bf00      	nop
 80077d8:	200004a1 	.word	0x200004a1

080077dc <__sfp_lock_release>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__sfp_lock_release+0x8>)
 80077de:	f000 b9fd 	b.w	8007bdc <__retarget_lock_release_recursive>
 80077e2:	bf00      	nop
 80077e4:	200004a1 	.word	0x200004a1

080077e8 <__sinit>:
 80077e8:	b510      	push	{r4, lr}
 80077ea:	4604      	mov	r4, r0
 80077ec:	f7ff fff0 	bl	80077d0 <__sfp_lock_acquire>
 80077f0:	6a23      	ldr	r3, [r4, #32]
 80077f2:	b11b      	cbz	r3, 80077fc <__sinit+0x14>
 80077f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f8:	f7ff bff0 	b.w	80077dc <__sfp_lock_release>
 80077fc:	4b04      	ldr	r3, [pc, #16]	; (8007810 <__sinit+0x28>)
 80077fe:	6223      	str	r3, [r4, #32]
 8007800:	4b04      	ldr	r3, [pc, #16]	; (8007814 <__sinit+0x2c>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1f5      	bne.n	80077f4 <__sinit+0xc>
 8007808:	f7ff ffc4 	bl	8007794 <global_stdio_init.part.0>
 800780c:	e7f2      	b.n	80077f4 <__sinit+0xc>
 800780e:	bf00      	nop
 8007810:	08007755 	.word	0x08007755
 8007814:	20000498 	.word	0x20000498

08007818 <_fwalk_sglue>:
 8007818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800781c:	4607      	mov	r7, r0
 800781e:	4688      	mov	r8, r1
 8007820:	4614      	mov	r4, r2
 8007822:	2600      	movs	r6, #0
 8007824:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007828:	f1b9 0901 	subs.w	r9, r9, #1
 800782c:	d505      	bpl.n	800783a <_fwalk_sglue+0x22>
 800782e:	6824      	ldr	r4, [r4, #0]
 8007830:	2c00      	cmp	r4, #0
 8007832:	d1f7      	bne.n	8007824 <_fwalk_sglue+0xc>
 8007834:	4630      	mov	r0, r6
 8007836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800783a:	89ab      	ldrh	r3, [r5, #12]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d907      	bls.n	8007850 <_fwalk_sglue+0x38>
 8007840:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007844:	3301      	adds	r3, #1
 8007846:	d003      	beq.n	8007850 <_fwalk_sglue+0x38>
 8007848:	4629      	mov	r1, r5
 800784a:	4638      	mov	r0, r7
 800784c:	47c0      	blx	r8
 800784e:	4306      	orrs	r6, r0
 8007850:	3568      	adds	r5, #104	; 0x68
 8007852:	e7e9      	b.n	8007828 <_fwalk_sglue+0x10>

08007854 <iprintf>:
 8007854:	b40f      	push	{r0, r1, r2, r3}
 8007856:	b507      	push	{r0, r1, r2, lr}
 8007858:	4906      	ldr	r1, [pc, #24]	; (8007874 <iprintf+0x20>)
 800785a:	ab04      	add	r3, sp, #16
 800785c:	6808      	ldr	r0, [r1, #0]
 800785e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007862:	6881      	ldr	r1, [r0, #8]
 8007864:	9301      	str	r3, [sp, #4]
 8007866:	f001 fcdb 	bl	8009220 <_vfiprintf_r>
 800786a:	b003      	add	sp, #12
 800786c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007870:	b004      	add	sp, #16
 8007872:	4770      	bx	lr
 8007874:	20000064 	.word	0x20000064

08007878 <_puts_r>:
 8007878:	6a03      	ldr	r3, [r0, #32]
 800787a:	b570      	push	{r4, r5, r6, lr}
 800787c:	6884      	ldr	r4, [r0, #8]
 800787e:	4605      	mov	r5, r0
 8007880:	460e      	mov	r6, r1
 8007882:	b90b      	cbnz	r3, 8007888 <_puts_r+0x10>
 8007884:	f7ff ffb0 	bl	80077e8 <__sinit>
 8007888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800788a:	07db      	lsls	r3, r3, #31
 800788c:	d405      	bmi.n	800789a <_puts_r+0x22>
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	0598      	lsls	r0, r3, #22
 8007892:	d402      	bmi.n	800789a <_puts_r+0x22>
 8007894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007896:	f000 f9a0 	bl	8007bda <__retarget_lock_acquire_recursive>
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	0719      	lsls	r1, r3, #28
 800789e:	d513      	bpl.n	80078c8 <_puts_r+0x50>
 80078a0:	6923      	ldr	r3, [r4, #16]
 80078a2:	b18b      	cbz	r3, 80078c8 <_puts_r+0x50>
 80078a4:	3e01      	subs	r6, #1
 80078a6:	68a3      	ldr	r3, [r4, #8]
 80078a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078ac:	3b01      	subs	r3, #1
 80078ae:	60a3      	str	r3, [r4, #8]
 80078b0:	b9e9      	cbnz	r1, 80078ee <_puts_r+0x76>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	da2e      	bge.n	8007914 <_puts_r+0x9c>
 80078b6:	4622      	mov	r2, r4
 80078b8:	210a      	movs	r1, #10
 80078ba:	4628      	mov	r0, r5
 80078bc:	f000 f87b 	bl	80079b6 <__swbuf_r>
 80078c0:	3001      	adds	r0, #1
 80078c2:	d007      	beq.n	80078d4 <_puts_r+0x5c>
 80078c4:	250a      	movs	r5, #10
 80078c6:	e007      	b.n	80078d8 <_puts_r+0x60>
 80078c8:	4621      	mov	r1, r4
 80078ca:	4628      	mov	r0, r5
 80078cc:	f000 f8b0 	bl	8007a30 <__swsetup_r>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d0e7      	beq.n	80078a4 <_puts_r+0x2c>
 80078d4:	f04f 35ff 	mov.w	r5, #4294967295
 80078d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078da:	07da      	lsls	r2, r3, #31
 80078dc:	d405      	bmi.n	80078ea <_puts_r+0x72>
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	059b      	lsls	r3, r3, #22
 80078e2:	d402      	bmi.n	80078ea <_puts_r+0x72>
 80078e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078e6:	f000 f979 	bl	8007bdc <__retarget_lock_release_recursive>
 80078ea:	4628      	mov	r0, r5
 80078ec:	bd70      	pop	{r4, r5, r6, pc}
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	da04      	bge.n	80078fc <_puts_r+0x84>
 80078f2:	69a2      	ldr	r2, [r4, #24]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	dc06      	bgt.n	8007906 <_puts_r+0x8e>
 80078f8:	290a      	cmp	r1, #10
 80078fa:	d004      	beq.n	8007906 <_puts_r+0x8e>
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	6022      	str	r2, [r4, #0]
 8007902:	7019      	strb	r1, [r3, #0]
 8007904:	e7cf      	b.n	80078a6 <_puts_r+0x2e>
 8007906:	4622      	mov	r2, r4
 8007908:	4628      	mov	r0, r5
 800790a:	f000 f854 	bl	80079b6 <__swbuf_r>
 800790e:	3001      	adds	r0, #1
 8007910:	d1c9      	bne.n	80078a6 <_puts_r+0x2e>
 8007912:	e7df      	b.n	80078d4 <_puts_r+0x5c>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	250a      	movs	r5, #10
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	6022      	str	r2, [r4, #0]
 800791c:	701d      	strb	r5, [r3, #0]
 800791e:	e7db      	b.n	80078d8 <_puts_r+0x60>

08007920 <puts>:
 8007920:	4b02      	ldr	r3, [pc, #8]	; (800792c <puts+0xc>)
 8007922:	4601      	mov	r1, r0
 8007924:	6818      	ldr	r0, [r3, #0]
 8007926:	f7ff bfa7 	b.w	8007878 <_puts_r>
 800792a:	bf00      	nop
 800792c:	20000064 	.word	0x20000064

08007930 <__sread>:
 8007930:	b510      	push	{r4, lr}
 8007932:	460c      	mov	r4, r1
 8007934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007938:	f000 f900 	bl	8007b3c <_read_r>
 800793c:	2800      	cmp	r0, #0
 800793e:	bfab      	itete	ge
 8007940:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007942:	89a3      	ldrhlt	r3, [r4, #12]
 8007944:	181b      	addge	r3, r3, r0
 8007946:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800794a:	bfac      	ite	ge
 800794c:	6563      	strge	r3, [r4, #84]	; 0x54
 800794e:	81a3      	strhlt	r3, [r4, #12]
 8007950:	bd10      	pop	{r4, pc}

08007952 <__swrite>:
 8007952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007956:	461f      	mov	r7, r3
 8007958:	898b      	ldrh	r3, [r1, #12]
 800795a:	05db      	lsls	r3, r3, #23
 800795c:	4605      	mov	r5, r0
 800795e:	460c      	mov	r4, r1
 8007960:	4616      	mov	r6, r2
 8007962:	d505      	bpl.n	8007970 <__swrite+0x1e>
 8007964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007968:	2302      	movs	r3, #2
 800796a:	2200      	movs	r2, #0
 800796c:	f000 f8d4 	bl	8007b18 <_lseek_r>
 8007970:	89a3      	ldrh	r3, [r4, #12]
 8007972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800797a:	81a3      	strh	r3, [r4, #12]
 800797c:	4632      	mov	r2, r6
 800797e:	463b      	mov	r3, r7
 8007980:	4628      	mov	r0, r5
 8007982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007986:	f000 b8eb 	b.w	8007b60 <_write_r>

0800798a <__sseek>:
 800798a:	b510      	push	{r4, lr}
 800798c:	460c      	mov	r4, r1
 800798e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007992:	f000 f8c1 	bl	8007b18 <_lseek_r>
 8007996:	1c43      	adds	r3, r0, #1
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	bf15      	itete	ne
 800799c:	6560      	strne	r0, [r4, #84]	; 0x54
 800799e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079a6:	81a3      	strheq	r3, [r4, #12]
 80079a8:	bf18      	it	ne
 80079aa:	81a3      	strhne	r3, [r4, #12]
 80079ac:	bd10      	pop	{r4, pc}

080079ae <__sclose>:
 80079ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b2:	f000 b8a1 	b.w	8007af8 <_close_r>

080079b6 <__swbuf_r>:
 80079b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b8:	460e      	mov	r6, r1
 80079ba:	4614      	mov	r4, r2
 80079bc:	4605      	mov	r5, r0
 80079be:	b118      	cbz	r0, 80079c8 <__swbuf_r+0x12>
 80079c0:	6a03      	ldr	r3, [r0, #32]
 80079c2:	b90b      	cbnz	r3, 80079c8 <__swbuf_r+0x12>
 80079c4:	f7ff ff10 	bl	80077e8 <__sinit>
 80079c8:	69a3      	ldr	r3, [r4, #24]
 80079ca:	60a3      	str	r3, [r4, #8]
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	071a      	lsls	r2, r3, #28
 80079d0:	d525      	bpl.n	8007a1e <__swbuf_r+0x68>
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	b31b      	cbz	r3, 8007a1e <__swbuf_r+0x68>
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	6922      	ldr	r2, [r4, #16]
 80079da:	1a98      	subs	r0, r3, r2
 80079dc:	6963      	ldr	r3, [r4, #20]
 80079de:	b2f6      	uxtb	r6, r6
 80079e0:	4283      	cmp	r3, r0
 80079e2:	4637      	mov	r7, r6
 80079e4:	dc04      	bgt.n	80079f0 <__swbuf_r+0x3a>
 80079e6:	4621      	mov	r1, r4
 80079e8:	4628      	mov	r0, r5
 80079ea:	f001 fdb9 	bl	8009560 <_fflush_r>
 80079ee:	b9e0      	cbnz	r0, 8007a2a <__swbuf_r+0x74>
 80079f0:	68a3      	ldr	r3, [r4, #8]
 80079f2:	3b01      	subs	r3, #1
 80079f4:	60a3      	str	r3, [r4, #8]
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	1c5a      	adds	r2, r3, #1
 80079fa:	6022      	str	r2, [r4, #0]
 80079fc:	701e      	strb	r6, [r3, #0]
 80079fe:	6962      	ldr	r2, [r4, #20]
 8007a00:	1c43      	adds	r3, r0, #1
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d004      	beq.n	8007a10 <__swbuf_r+0x5a>
 8007a06:	89a3      	ldrh	r3, [r4, #12]
 8007a08:	07db      	lsls	r3, r3, #31
 8007a0a:	d506      	bpl.n	8007a1a <__swbuf_r+0x64>
 8007a0c:	2e0a      	cmp	r6, #10
 8007a0e:	d104      	bne.n	8007a1a <__swbuf_r+0x64>
 8007a10:	4621      	mov	r1, r4
 8007a12:	4628      	mov	r0, r5
 8007a14:	f001 fda4 	bl	8009560 <_fflush_r>
 8007a18:	b938      	cbnz	r0, 8007a2a <__swbuf_r+0x74>
 8007a1a:	4638      	mov	r0, r7
 8007a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 f805 	bl	8007a30 <__swsetup_r>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d0d5      	beq.n	80079d6 <__swbuf_r+0x20>
 8007a2a:	f04f 37ff 	mov.w	r7, #4294967295
 8007a2e:	e7f4      	b.n	8007a1a <__swbuf_r+0x64>

08007a30 <__swsetup_r>:
 8007a30:	b538      	push	{r3, r4, r5, lr}
 8007a32:	4b2a      	ldr	r3, [pc, #168]	; (8007adc <__swsetup_r+0xac>)
 8007a34:	4605      	mov	r5, r0
 8007a36:	6818      	ldr	r0, [r3, #0]
 8007a38:	460c      	mov	r4, r1
 8007a3a:	b118      	cbz	r0, 8007a44 <__swsetup_r+0x14>
 8007a3c:	6a03      	ldr	r3, [r0, #32]
 8007a3e:	b90b      	cbnz	r3, 8007a44 <__swsetup_r+0x14>
 8007a40:	f7ff fed2 	bl	80077e8 <__sinit>
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a4a:	0718      	lsls	r0, r3, #28
 8007a4c:	d422      	bmi.n	8007a94 <__swsetup_r+0x64>
 8007a4e:	06d9      	lsls	r1, r3, #27
 8007a50:	d407      	bmi.n	8007a62 <__swsetup_r+0x32>
 8007a52:	2309      	movs	r3, #9
 8007a54:	602b      	str	r3, [r5, #0]
 8007a56:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a60:	e034      	b.n	8007acc <__swsetup_r+0x9c>
 8007a62:	0758      	lsls	r0, r3, #29
 8007a64:	d512      	bpl.n	8007a8c <__swsetup_r+0x5c>
 8007a66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a68:	b141      	cbz	r1, 8007a7c <__swsetup_r+0x4c>
 8007a6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a6e:	4299      	cmp	r1, r3
 8007a70:	d002      	beq.n	8007a78 <__swsetup_r+0x48>
 8007a72:	4628      	mov	r0, r5
 8007a74:	f000 ff2e 	bl	80088d4 <_free_r>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	6363      	str	r3, [r4, #52]	; 0x34
 8007a7c:	89a3      	ldrh	r3, [r4, #12]
 8007a7e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a82:	81a3      	strh	r3, [r4, #12]
 8007a84:	2300      	movs	r3, #0
 8007a86:	6063      	str	r3, [r4, #4]
 8007a88:	6923      	ldr	r3, [r4, #16]
 8007a8a:	6023      	str	r3, [r4, #0]
 8007a8c:	89a3      	ldrh	r3, [r4, #12]
 8007a8e:	f043 0308 	orr.w	r3, r3, #8
 8007a92:	81a3      	strh	r3, [r4, #12]
 8007a94:	6923      	ldr	r3, [r4, #16]
 8007a96:	b94b      	cbnz	r3, 8007aac <__swsetup_r+0x7c>
 8007a98:	89a3      	ldrh	r3, [r4, #12]
 8007a9a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa2:	d003      	beq.n	8007aac <__swsetup_r+0x7c>
 8007aa4:	4621      	mov	r1, r4
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f001 fda8 	bl	80095fc <__smakebuf_r>
 8007aac:	89a0      	ldrh	r0, [r4, #12]
 8007aae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ab2:	f010 0301 	ands.w	r3, r0, #1
 8007ab6:	d00a      	beq.n	8007ace <__swsetup_r+0x9e>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	60a3      	str	r3, [r4, #8]
 8007abc:	6963      	ldr	r3, [r4, #20]
 8007abe:	425b      	negs	r3, r3
 8007ac0:	61a3      	str	r3, [r4, #24]
 8007ac2:	6923      	ldr	r3, [r4, #16]
 8007ac4:	b943      	cbnz	r3, 8007ad8 <__swsetup_r+0xa8>
 8007ac6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007aca:	d1c4      	bne.n	8007a56 <__swsetup_r+0x26>
 8007acc:	bd38      	pop	{r3, r4, r5, pc}
 8007ace:	0781      	lsls	r1, r0, #30
 8007ad0:	bf58      	it	pl
 8007ad2:	6963      	ldrpl	r3, [r4, #20]
 8007ad4:	60a3      	str	r3, [r4, #8]
 8007ad6:	e7f4      	b.n	8007ac2 <__swsetup_r+0x92>
 8007ad8:	2000      	movs	r0, #0
 8007ada:	e7f7      	b.n	8007acc <__swsetup_r+0x9c>
 8007adc:	20000064 	.word	0x20000064

08007ae0 <memset>:
 8007ae0:	4402      	add	r2, r0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d100      	bne.n	8007aea <memset+0xa>
 8007ae8:	4770      	bx	lr
 8007aea:	f803 1b01 	strb.w	r1, [r3], #1
 8007aee:	e7f9      	b.n	8007ae4 <memset+0x4>

08007af0 <_localeconv_r>:
 8007af0:	4800      	ldr	r0, [pc, #0]	; (8007af4 <_localeconv_r+0x4>)
 8007af2:	4770      	bx	lr
 8007af4:	20000158 	.word	0x20000158

08007af8 <_close_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4d06      	ldr	r5, [pc, #24]	; (8007b14 <_close_r+0x1c>)
 8007afc:	2300      	movs	r3, #0
 8007afe:	4604      	mov	r4, r0
 8007b00:	4608      	mov	r0, r1
 8007b02:	602b      	str	r3, [r5, #0]
 8007b04:	f7fb fa6d 	bl	8002fe2 <_close>
 8007b08:	1c43      	adds	r3, r0, #1
 8007b0a:	d102      	bne.n	8007b12 <_close_r+0x1a>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	b103      	cbz	r3, 8007b12 <_close_r+0x1a>
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	bd38      	pop	{r3, r4, r5, pc}
 8007b14:	2000049c 	.word	0x2000049c

08007b18 <_lseek_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4d07      	ldr	r5, [pc, #28]	; (8007b38 <_lseek_r+0x20>)
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	4608      	mov	r0, r1
 8007b20:	4611      	mov	r1, r2
 8007b22:	2200      	movs	r2, #0
 8007b24:	602a      	str	r2, [r5, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	f7fb fa82 	bl	8003030 <_lseek>
 8007b2c:	1c43      	adds	r3, r0, #1
 8007b2e:	d102      	bne.n	8007b36 <_lseek_r+0x1e>
 8007b30:	682b      	ldr	r3, [r5, #0]
 8007b32:	b103      	cbz	r3, 8007b36 <_lseek_r+0x1e>
 8007b34:	6023      	str	r3, [r4, #0]
 8007b36:	bd38      	pop	{r3, r4, r5, pc}
 8007b38:	2000049c 	.word	0x2000049c

08007b3c <_read_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4d07      	ldr	r5, [pc, #28]	; (8007b5c <_read_r+0x20>)
 8007b40:	4604      	mov	r4, r0
 8007b42:	4608      	mov	r0, r1
 8007b44:	4611      	mov	r1, r2
 8007b46:	2200      	movs	r2, #0
 8007b48:	602a      	str	r2, [r5, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f7fb fa10 	bl	8002f70 <_read>
 8007b50:	1c43      	adds	r3, r0, #1
 8007b52:	d102      	bne.n	8007b5a <_read_r+0x1e>
 8007b54:	682b      	ldr	r3, [r5, #0]
 8007b56:	b103      	cbz	r3, 8007b5a <_read_r+0x1e>
 8007b58:	6023      	str	r3, [r4, #0]
 8007b5a:	bd38      	pop	{r3, r4, r5, pc}
 8007b5c:	2000049c 	.word	0x2000049c

08007b60 <_write_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d07      	ldr	r5, [pc, #28]	; (8007b80 <_write_r+0x20>)
 8007b64:	4604      	mov	r4, r0
 8007b66:	4608      	mov	r0, r1
 8007b68:	4611      	mov	r1, r2
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	602a      	str	r2, [r5, #0]
 8007b6e:	461a      	mov	r2, r3
 8007b70:	f7fb fa1b 	bl	8002faa <_write>
 8007b74:	1c43      	adds	r3, r0, #1
 8007b76:	d102      	bne.n	8007b7e <_write_r+0x1e>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	b103      	cbz	r3, 8007b7e <_write_r+0x1e>
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	bd38      	pop	{r3, r4, r5, pc}
 8007b80:	2000049c 	.word	0x2000049c

08007b84 <__errno>:
 8007b84:	4b01      	ldr	r3, [pc, #4]	; (8007b8c <__errno+0x8>)
 8007b86:	6818      	ldr	r0, [r3, #0]
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	20000064 	.word	0x20000064

08007b90 <__libc_init_array>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	4d0d      	ldr	r5, [pc, #52]	; (8007bc8 <__libc_init_array+0x38>)
 8007b94:	4c0d      	ldr	r4, [pc, #52]	; (8007bcc <__libc_init_array+0x3c>)
 8007b96:	1b64      	subs	r4, r4, r5
 8007b98:	10a4      	asrs	r4, r4, #2
 8007b9a:	2600      	movs	r6, #0
 8007b9c:	42a6      	cmp	r6, r4
 8007b9e:	d109      	bne.n	8007bb4 <__libc_init_array+0x24>
 8007ba0:	4d0b      	ldr	r5, [pc, #44]	; (8007bd0 <__libc_init_array+0x40>)
 8007ba2:	4c0c      	ldr	r4, [pc, #48]	; (8007bd4 <__libc_init_array+0x44>)
 8007ba4:	f002 fd90 	bl	800a6c8 <_init>
 8007ba8:	1b64      	subs	r4, r4, r5
 8007baa:	10a4      	asrs	r4, r4, #2
 8007bac:	2600      	movs	r6, #0
 8007bae:	42a6      	cmp	r6, r4
 8007bb0:	d105      	bne.n	8007bbe <__libc_init_array+0x2e>
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb8:	4798      	blx	r3
 8007bba:	3601      	adds	r6, #1
 8007bbc:	e7ee      	b.n	8007b9c <__libc_init_array+0xc>
 8007bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc2:	4798      	blx	r3
 8007bc4:	3601      	adds	r6, #1
 8007bc6:	e7f2      	b.n	8007bae <__libc_init_array+0x1e>
 8007bc8:	0800b190 	.word	0x0800b190
 8007bcc:	0800b190 	.word	0x0800b190
 8007bd0:	0800b190 	.word	0x0800b190
 8007bd4:	0800b194 	.word	0x0800b194

08007bd8 <__retarget_lock_init_recursive>:
 8007bd8:	4770      	bx	lr

08007bda <__retarget_lock_acquire_recursive>:
 8007bda:	4770      	bx	lr

08007bdc <__retarget_lock_release_recursive>:
 8007bdc:	4770      	bx	lr

08007bde <quorem>:
 8007bde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be2:	6903      	ldr	r3, [r0, #16]
 8007be4:	690c      	ldr	r4, [r1, #16]
 8007be6:	42a3      	cmp	r3, r4
 8007be8:	4607      	mov	r7, r0
 8007bea:	db7e      	blt.n	8007cea <quorem+0x10c>
 8007bec:	3c01      	subs	r4, #1
 8007bee:	f101 0814 	add.w	r8, r1, #20
 8007bf2:	f100 0514 	add.w	r5, r0, #20
 8007bf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bfa:	9301      	str	r3, [sp, #4]
 8007bfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c04:	3301      	adds	r3, #1
 8007c06:	429a      	cmp	r2, r3
 8007c08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007c0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c10:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c14:	d331      	bcc.n	8007c7a <quorem+0x9c>
 8007c16:	f04f 0e00 	mov.w	lr, #0
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	46ac      	mov	ip, r5
 8007c1e:	46f2      	mov	sl, lr
 8007c20:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c24:	b293      	uxth	r3, r2
 8007c26:	fb06 e303 	mla	r3, r6, r3, lr
 8007c2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c2e:	0c1a      	lsrs	r2, r3, #16
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	ebaa 0303 	sub.w	r3, sl, r3
 8007c36:	f8dc a000 	ldr.w	sl, [ip]
 8007c3a:	fa13 f38a 	uxtah	r3, r3, sl
 8007c3e:	fb06 220e 	mla	r2, r6, lr, r2
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	9b00      	ldr	r3, [sp, #0]
 8007c46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c4a:	b292      	uxth	r2, r2
 8007c4c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c54:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c58:	4581      	cmp	r9, r0
 8007c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c5e:	f84c 3b04 	str.w	r3, [ip], #4
 8007c62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c66:	d2db      	bcs.n	8007c20 <quorem+0x42>
 8007c68:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c6c:	b92b      	cbnz	r3, 8007c7a <quorem+0x9c>
 8007c6e:	9b01      	ldr	r3, [sp, #4]
 8007c70:	3b04      	subs	r3, #4
 8007c72:	429d      	cmp	r5, r3
 8007c74:	461a      	mov	r2, r3
 8007c76:	d32c      	bcc.n	8007cd2 <quorem+0xf4>
 8007c78:	613c      	str	r4, [r7, #16]
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	f001 f9a6 	bl	8008fcc <__mcmp>
 8007c80:	2800      	cmp	r0, #0
 8007c82:	db22      	blt.n	8007cca <quorem+0xec>
 8007c84:	3601      	adds	r6, #1
 8007c86:	4629      	mov	r1, r5
 8007c88:	2000      	movs	r0, #0
 8007c8a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c8e:	f8d1 c000 	ldr.w	ip, [r1]
 8007c92:	b293      	uxth	r3, r2
 8007c94:	1ac3      	subs	r3, r0, r3
 8007c96:	0c12      	lsrs	r2, r2, #16
 8007c98:	fa13 f38c 	uxtah	r3, r3, ip
 8007c9c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007ca0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007caa:	45c1      	cmp	r9, r8
 8007cac:	f841 3b04 	str.w	r3, [r1], #4
 8007cb0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007cb4:	d2e9      	bcs.n	8007c8a <quorem+0xac>
 8007cb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cbe:	b922      	cbnz	r2, 8007cca <quorem+0xec>
 8007cc0:	3b04      	subs	r3, #4
 8007cc2:	429d      	cmp	r5, r3
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	d30a      	bcc.n	8007cde <quorem+0x100>
 8007cc8:	613c      	str	r4, [r7, #16]
 8007cca:	4630      	mov	r0, r6
 8007ccc:	b003      	add	sp, #12
 8007cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd2:	6812      	ldr	r2, [r2, #0]
 8007cd4:	3b04      	subs	r3, #4
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	d1ce      	bne.n	8007c78 <quorem+0x9a>
 8007cda:	3c01      	subs	r4, #1
 8007cdc:	e7c9      	b.n	8007c72 <quorem+0x94>
 8007cde:	6812      	ldr	r2, [r2, #0]
 8007ce0:	3b04      	subs	r3, #4
 8007ce2:	2a00      	cmp	r2, #0
 8007ce4:	d1f0      	bne.n	8007cc8 <quorem+0xea>
 8007ce6:	3c01      	subs	r4, #1
 8007ce8:	e7eb      	b.n	8007cc2 <quorem+0xe4>
 8007cea:	2000      	movs	r0, #0
 8007cec:	e7ee      	b.n	8007ccc <quorem+0xee>
	...

08007cf0 <_dtoa_r>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	ed2d 8b04 	vpush	{d8-d9}
 8007cf8:	69c5      	ldr	r5, [r0, #28]
 8007cfa:	b093      	sub	sp, #76	; 0x4c
 8007cfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d00:	ec57 6b10 	vmov	r6, r7, d0
 8007d04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007d08:	9107      	str	r1, [sp, #28]
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	920a      	str	r2, [sp, #40]	; 0x28
 8007d0e:	930d      	str	r3, [sp, #52]	; 0x34
 8007d10:	b975      	cbnz	r5, 8007d30 <_dtoa_r+0x40>
 8007d12:	2010      	movs	r0, #16
 8007d14:	f000 fe2a 	bl	800896c <malloc>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	61e0      	str	r0, [r4, #28]
 8007d1c:	b920      	cbnz	r0, 8007d28 <_dtoa_r+0x38>
 8007d1e:	4bae      	ldr	r3, [pc, #696]	; (8007fd8 <_dtoa_r+0x2e8>)
 8007d20:	21ef      	movs	r1, #239	; 0xef
 8007d22:	48ae      	ldr	r0, [pc, #696]	; (8007fdc <_dtoa_r+0x2ec>)
 8007d24:	f001 fce6 	bl	80096f4 <__assert_func>
 8007d28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d2c:	6005      	str	r5, [r0, #0]
 8007d2e:	60c5      	str	r5, [r0, #12]
 8007d30:	69e3      	ldr	r3, [r4, #28]
 8007d32:	6819      	ldr	r1, [r3, #0]
 8007d34:	b151      	cbz	r1, 8007d4c <_dtoa_r+0x5c>
 8007d36:	685a      	ldr	r2, [r3, #4]
 8007d38:	604a      	str	r2, [r1, #4]
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	4093      	lsls	r3, r2
 8007d3e:	608b      	str	r3, [r1, #8]
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 ff07 	bl	8008b54 <_Bfree>
 8007d46:	69e3      	ldr	r3, [r4, #28]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	1e3b      	subs	r3, r7, #0
 8007d4e:	bfbb      	ittet	lt
 8007d50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d54:	9303      	strlt	r3, [sp, #12]
 8007d56:	2300      	movge	r3, #0
 8007d58:	2201      	movlt	r2, #1
 8007d5a:	bfac      	ite	ge
 8007d5c:	f8c8 3000 	strge.w	r3, [r8]
 8007d60:	f8c8 2000 	strlt.w	r2, [r8]
 8007d64:	4b9e      	ldr	r3, [pc, #632]	; (8007fe0 <_dtoa_r+0x2f0>)
 8007d66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007d6a:	ea33 0308 	bics.w	r3, r3, r8
 8007d6e:	d11b      	bne.n	8007da8 <_dtoa_r+0xb8>
 8007d70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d72:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007d7c:	4333      	orrs	r3, r6
 8007d7e:	f000 8593 	beq.w	80088a8 <_dtoa_r+0xbb8>
 8007d82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d84:	b963      	cbnz	r3, 8007da0 <_dtoa_r+0xb0>
 8007d86:	4b97      	ldr	r3, [pc, #604]	; (8007fe4 <_dtoa_r+0x2f4>)
 8007d88:	e027      	b.n	8007dda <_dtoa_r+0xea>
 8007d8a:	4b97      	ldr	r3, [pc, #604]	; (8007fe8 <_dtoa_r+0x2f8>)
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	3308      	adds	r3, #8
 8007d90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	9800      	ldr	r0, [sp, #0]
 8007d96:	b013      	add	sp, #76	; 0x4c
 8007d98:	ecbd 8b04 	vpop	{d8-d9}
 8007d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da0:	4b90      	ldr	r3, [pc, #576]	; (8007fe4 <_dtoa_r+0x2f4>)
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	3303      	adds	r3, #3
 8007da6:	e7f3      	b.n	8007d90 <_dtoa_r+0xa0>
 8007da8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dac:	2200      	movs	r2, #0
 8007dae:	ec51 0b17 	vmov	r0, r1, d7
 8007db2:	eeb0 8a47 	vmov.f32	s16, s14
 8007db6:	eef0 8a67 	vmov.f32	s17, s15
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f7f8 fe84 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dc0:	4681      	mov	r9, r0
 8007dc2:	b160      	cbz	r0, 8007dde <_dtoa_r+0xee>
 8007dc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	6013      	str	r3, [r2, #0]
 8007dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	f000 8568 	beq.w	80088a2 <_dtoa_r+0xbb2>
 8007dd2:	4b86      	ldr	r3, [pc, #536]	; (8007fec <_dtoa_r+0x2fc>)
 8007dd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007dd6:	6013      	str	r3, [r2, #0]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	9300      	str	r3, [sp, #0]
 8007ddc:	e7da      	b.n	8007d94 <_dtoa_r+0xa4>
 8007dde:	aa10      	add	r2, sp, #64	; 0x40
 8007de0:	a911      	add	r1, sp, #68	; 0x44
 8007de2:	4620      	mov	r0, r4
 8007de4:	eeb0 0a48 	vmov.f32	s0, s16
 8007de8:	eef0 0a68 	vmov.f32	s1, s17
 8007dec:	f001 f994 	bl	8009118 <__d2b>
 8007df0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007df4:	4682      	mov	sl, r0
 8007df6:	2d00      	cmp	r5, #0
 8007df8:	d07f      	beq.n	8007efa <_dtoa_r+0x20a>
 8007dfa:	ee18 3a90 	vmov	r3, s17
 8007dfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007e06:	ec51 0b18 	vmov	r0, r1, d8
 8007e0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007e0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007e12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007e16:	4619      	mov	r1, r3
 8007e18:	2200      	movs	r2, #0
 8007e1a:	4b75      	ldr	r3, [pc, #468]	; (8007ff0 <_dtoa_r+0x300>)
 8007e1c:	f7f8 fa34 	bl	8000288 <__aeabi_dsub>
 8007e20:	a367      	add	r3, pc, #412	; (adr r3, 8007fc0 <_dtoa_r+0x2d0>)
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f7f8 fbe7 	bl	80005f8 <__aeabi_dmul>
 8007e2a:	a367      	add	r3, pc, #412	; (adr r3, 8007fc8 <_dtoa_r+0x2d8>)
 8007e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e30:	f7f8 fa2c 	bl	800028c <__adddf3>
 8007e34:	4606      	mov	r6, r0
 8007e36:	4628      	mov	r0, r5
 8007e38:	460f      	mov	r7, r1
 8007e3a:	f7f8 fb73 	bl	8000524 <__aeabi_i2d>
 8007e3e:	a364      	add	r3, pc, #400	; (adr r3, 8007fd0 <_dtoa_r+0x2e0>)
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	f7f8 fbd8 	bl	80005f8 <__aeabi_dmul>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	4639      	mov	r1, r7
 8007e50:	f7f8 fa1c 	bl	800028c <__adddf3>
 8007e54:	4606      	mov	r6, r0
 8007e56:	460f      	mov	r7, r1
 8007e58:	f7f8 fe7e 	bl	8000b58 <__aeabi_d2iz>
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	4683      	mov	fp, r0
 8007e60:	2300      	movs	r3, #0
 8007e62:	4630      	mov	r0, r6
 8007e64:	4639      	mov	r1, r7
 8007e66:	f7f8 fe39 	bl	8000adc <__aeabi_dcmplt>
 8007e6a:	b148      	cbz	r0, 8007e80 <_dtoa_r+0x190>
 8007e6c:	4658      	mov	r0, fp
 8007e6e:	f7f8 fb59 	bl	8000524 <__aeabi_i2d>
 8007e72:	4632      	mov	r2, r6
 8007e74:	463b      	mov	r3, r7
 8007e76:	f7f8 fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e7a:	b908      	cbnz	r0, 8007e80 <_dtoa_r+0x190>
 8007e7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e80:	f1bb 0f16 	cmp.w	fp, #22
 8007e84:	d857      	bhi.n	8007f36 <_dtoa_r+0x246>
 8007e86:	4b5b      	ldr	r3, [pc, #364]	; (8007ff4 <_dtoa_r+0x304>)
 8007e88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	ec51 0b18 	vmov	r0, r1, d8
 8007e94:	f7f8 fe22 	bl	8000adc <__aeabi_dcmplt>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d04e      	beq.n	8007f3a <_dtoa_r+0x24a>
 8007e9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	930c      	str	r3, [sp, #48]	; 0x30
 8007ea4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007ea6:	1b5b      	subs	r3, r3, r5
 8007ea8:	1e5a      	subs	r2, r3, #1
 8007eaa:	bf45      	ittet	mi
 8007eac:	f1c3 0301 	rsbmi	r3, r3, #1
 8007eb0:	9305      	strmi	r3, [sp, #20]
 8007eb2:	2300      	movpl	r3, #0
 8007eb4:	2300      	movmi	r3, #0
 8007eb6:	9206      	str	r2, [sp, #24]
 8007eb8:	bf54      	ite	pl
 8007eba:	9305      	strpl	r3, [sp, #20]
 8007ebc:	9306      	strmi	r3, [sp, #24]
 8007ebe:	f1bb 0f00 	cmp.w	fp, #0
 8007ec2:	db3c      	blt.n	8007f3e <_dtoa_r+0x24e>
 8007ec4:	9b06      	ldr	r3, [sp, #24]
 8007ec6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007eca:	445b      	add	r3, fp
 8007ecc:	9306      	str	r3, [sp, #24]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9308      	str	r3, [sp, #32]
 8007ed2:	9b07      	ldr	r3, [sp, #28]
 8007ed4:	2b09      	cmp	r3, #9
 8007ed6:	d868      	bhi.n	8007faa <_dtoa_r+0x2ba>
 8007ed8:	2b05      	cmp	r3, #5
 8007eda:	bfc4      	itt	gt
 8007edc:	3b04      	subgt	r3, #4
 8007ede:	9307      	strgt	r3, [sp, #28]
 8007ee0:	9b07      	ldr	r3, [sp, #28]
 8007ee2:	f1a3 0302 	sub.w	r3, r3, #2
 8007ee6:	bfcc      	ite	gt
 8007ee8:	2500      	movgt	r5, #0
 8007eea:	2501      	movle	r5, #1
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	f200 8085 	bhi.w	8007ffc <_dtoa_r+0x30c>
 8007ef2:	e8df f003 	tbb	[pc, r3]
 8007ef6:	3b2e      	.short	0x3b2e
 8007ef8:	5839      	.short	0x5839
 8007efa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007efe:	441d      	add	r5, r3
 8007f00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	bfc1      	itttt	gt
 8007f08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007f0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007f10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007f14:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007f18:	bfd6      	itet	le
 8007f1a:	f1c3 0320 	rsble	r3, r3, #32
 8007f1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007f22:	fa06 f003 	lslle.w	r0, r6, r3
 8007f26:	f7f8 faed 	bl	8000504 <__aeabi_ui2d>
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007f30:	3d01      	subs	r5, #1
 8007f32:	920e      	str	r2, [sp, #56]	; 0x38
 8007f34:	e76f      	b.n	8007e16 <_dtoa_r+0x126>
 8007f36:	2301      	movs	r3, #1
 8007f38:	e7b3      	b.n	8007ea2 <_dtoa_r+0x1b2>
 8007f3a:	900c      	str	r0, [sp, #48]	; 0x30
 8007f3c:	e7b2      	b.n	8007ea4 <_dtoa_r+0x1b4>
 8007f3e:	9b05      	ldr	r3, [sp, #20]
 8007f40:	eba3 030b 	sub.w	r3, r3, fp
 8007f44:	9305      	str	r3, [sp, #20]
 8007f46:	f1cb 0300 	rsb	r3, fp, #0
 8007f4a:	9308      	str	r3, [sp, #32]
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f50:	e7bf      	b.n	8007ed2 <_dtoa_r+0x1e2>
 8007f52:	2300      	movs	r3, #0
 8007f54:	9309      	str	r3, [sp, #36]	; 0x24
 8007f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	dc52      	bgt.n	8008002 <_dtoa_r+0x312>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	9304      	str	r3, [sp, #16]
 8007f62:	461a      	mov	r2, r3
 8007f64:	920a      	str	r2, [sp, #40]	; 0x28
 8007f66:	e00b      	b.n	8007f80 <_dtoa_r+0x290>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e7f3      	b.n	8007f54 <_dtoa_r+0x264>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	9309      	str	r3, [sp, #36]	; 0x24
 8007f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f72:	445b      	add	r3, fp
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	3301      	adds	r3, #1
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	bfb8      	it	lt
 8007f7e:	2301      	movlt	r3, #1
 8007f80:	69e0      	ldr	r0, [r4, #28]
 8007f82:	2100      	movs	r1, #0
 8007f84:	2204      	movs	r2, #4
 8007f86:	f102 0614 	add.w	r6, r2, #20
 8007f8a:	429e      	cmp	r6, r3
 8007f8c:	d93d      	bls.n	800800a <_dtoa_r+0x31a>
 8007f8e:	6041      	str	r1, [r0, #4]
 8007f90:	4620      	mov	r0, r4
 8007f92:	f000 fd9f 	bl	8008ad4 <_Balloc>
 8007f96:	9000      	str	r0, [sp, #0]
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d139      	bne.n	8008010 <_dtoa_r+0x320>
 8007f9c:	4b16      	ldr	r3, [pc, #88]	; (8007ff8 <_dtoa_r+0x308>)
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	f240 11af 	movw	r1, #431	; 0x1af
 8007fa4:	e6bd      	b.n	8007d22 <_dtoa_r+0x32>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e7e1      	b.n	8007f6e <_dtoa_r+0x27e>
 8007faa:	2501      	movs	r5, #1
 8007fac:	2300      	movs	r3, #0
 8007fae:	9307      	str	r3, [sp, #28]
 8007fb0:	9509      	str	r5, [sp, #36]	; 0x24
 8007fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb6:	9301      	str	r3, [sp, #4]
 8007fb8:	9304      	str	r3, [sp, #16]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	2312      	movs	r3, #18
 8007fbe:	e7d1      	b.n	8007f64 <_dtoa_r+0x274>
 8007fc0:	636f4361 	.word	0x636f4361
 8007fc4:	3fd287a7 	.word	0x3fd287a7
 8007fc8:	8b60c8b3 	.word	0x8b60c8b3
 8007fcc:	3fc68a28 	.word	0x3fc68a28
 8007fd0:	509f79fb 	.word	0x509f79fb
 8007fd4:	3fd34413 	.word	0x3fd34413
 8007fd8:	0800ae29 	.word	0x0800ae29
 8007fdc:	0800ae40 	.word	0x0800ae40
 8007fe0:	7ff00000 	.word	0x7ff00000
 8007fe4:	0800ae25 	.word	0x0800ae25
 8007fe8:	0800ae1c 	.word	0x0800ae1c
 8007fec:	0800adf9 	.word	0x0800adf9
 8007ff0:	3ff80000 	.word	0x3ff80000
 8007ff4:	0800af30 	.word	0x0800af30
 8007ff8:	0800ae98 	.word	0x0800ae98
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8008000:	e7d7      	b.n	8007fb2 <_dtoa_r+0x2c2>
 8008002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	9304      	str	r3, [sp, #16]
 8008008:	e7ba      	b.n	8007f80 <_dtoa_r+0x290>
 800800a:	3101      	adds	r1, #1
 800800c:	0052      	lsls	r2, r2, #1
 800800e:	e7ba      	b.n	8007f86 <_dtoa_r+0x296>
 8008010:	69e3      	ldr	r3, [r4, #28]
 8008012:	9a00      	ldr	r2, [sp, #0]
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	9b04      	ldr	r3, [sp, #16]
 8008018:	2b0e      	cmp	r3, #14
 800801a:	f200 80a8 	bhi.w	800816e <_dtoa_r+0x47e>
 800801e:	2d00      	cmp	r5, #0
 8008020:	f000 80a5 	beq.w	800816e <_dtoa_r+0x47e>
 8008024:	f1bb 0f00 	cmp.w	fp, #0
 8008028:	dd38      	ble.n	800809c <_dtoa_r+0x3ac>
 800802a:	4bc0      	ldr	r3, [pc, #768]	; (800832c <_dtoa_r+0x63c>)
 800802c:	f00b 020f 	and.w	r2, fp, #15
 8008030:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008034:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008038:	e9d3 6700 	ldrd	r6, r7, [r3]
 800803c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008040:	d019      	beq.n	8008076 <_dtoa_r+0x386>
 8008042:	4bbb      	ldr	r3, [pc, #748]	; (8008330 <_dtoa_r+0x640>)
 8008044:	ec51 0b18 	vmov	r0, r1, d8
 8008048:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800804c:	f7f8 fbfe 	bl	800084c <__aeabi_ddiv>
 8008050:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008054:	f008 080f 	and.w	r8, r8, #15
 8008058:	2503      	movs	r5, #3
 800805a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008330 <_dtoa_r+0x640>
 800805e:	f1b8 0f00 	cmp.w	r8, #0
 8008062:	d10a      	bne.n	800807a <_dtoa_r+0x38a>
 8008064:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008068:	4632      	mov	r2, r6
 800806a:	463b      	mov	r3, r7
 800806c:	f7f8 fbee 	bl	800084c <__aeabi_ddiv>
 8008070:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008074:	e02b      	b.n	80080ce <_dtoa_r+0x3de>
 8008076:	2502      	movs	r5, #2
 8008078:	e7ef      	b.n	800805a <_dtoa_r+0x36a>
 800807a:	f018 0f01 	tst.w	r8, #1
 800807e:	d008      	beq.n	8008092 <_dtoa_r+0x3a2>
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008088:	f7f8 fab6 	bl	80005f8 <__aeabi_dmul>
 800808c:	3501      	adds	r5, #1
 800808e:	4606      	mov	r6, r0
 8008090:	460f      	mov	r7, r1
 8008092:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008096:	f109 0908 	add.w	r9, r9, #8
 800809a:	e7e0      	b.n	800805e <_dtoa_r+0x36e>
 800809c:	f000 809f 	beq.w	80081de <_dtoa_r+0x4ee>
 80080a0:	f1cb 0600 	rsb	r6, fp, #0
 80080a4:	4ba1      	ldr	r3, [pc, #644]	; (800832c <_dtoa_r+0x63c>)
 80080a6:	4fa2      	ldr	r7, [pc, #648]	; (8008330 <_dtoa_r+0x640>)
 80080a8:	f006 020f 	and.w	r2, r6, #15
 80080ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	ec51 0b18 	vmov	r0, r1, d8
 80080b8:	f7f8 fa9e 	bl	80005f8 <__aeabi_dmul>
 80080bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080c0:	1136      	asrs	r6, r6, #4
 80080c2:	2300      	movs	r3, #0
 80080c4:	2502      	movs	r5, #2
 80080c6:	2e00      	cmp	r6, #0
 80080c8:	d17e      	bne.n	80081c8 <_dtoa_r+0x4d8>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1d0      	bne.n	8008070 <_dtoa_r+0x380>
 80080ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 8084 	beq.w	80081e2 <_dtoa_r+0x4f2>
 80080da:	4b96      	ldr	r3, [pc, #600]	; (8008334 <_dtoa_r+0x644>)
 80080dc:	2200      	movs	r2, #0
 80080de:	4640      	mov	r0, r8
 80080e0:	4649      	mov	r1, r9
 80080e2:	f7f8 fcfb 	bl	8000adc <__aeabi_dcmplt>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	d07b      	beq.n	80081e2 <_dtoa_r+0x4f2>
 80080ea:	9b04      	ldr	r3, [sp, #16]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d078      	beq.n	80081e2 <_dtoa_r+0x4f2>
 80080f0:	9b01      	ldr	r3, [sp, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	dd39      	ble.n	800816a <_dtoa_r+0x47a>
 80080f6:	4b90      	ldr	r3, [pc, #576]	; (8008338 <_dtoa_r+0x648>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	4640      	mov	r0, r8
 80080fc:	4649      	mov	r1, r9
 80080fe:	f7f8 fa7b 	bl	80005f8 <__aeabi_dmul>
 8008102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008106:	9e01      	ldr	r6, [sp, #4]
 8008108:	f10b 37ff 	add.w	r7, fp, #4294967295
 800810c:	3501      	adds	r5, #1
 800810e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008112:	4628      	mov	r0, r5
 8008114:	f7f8 fa06 	bl	8000524 <__aeabi_i2d>
 8008118:	4642      	mov	r2, r8
 800811a:	464b      	mov	r3, r9
 800811c:	f7f8 fa6c 	bl	80005f8 <__aeabi_dmul>
 8008120:	4b86      	ldr	r3, [pc, #536]	; (800833c <_dtoa_r+0x64c>)
 8008122:	2200      	movs	r2, #0
 8008124:	f7f8 f8b2 	bl	800028c <__adddf3>
 8008128:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800812c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008130:	9303      	str	r3, [sp, #12]
 8008132:	2e00      	cmp	r6, #0
 8008134:	d158      	bne.n	80081e8 <_dtoa_r+0x4f8>
 8008136:	4b82      	ldr	r3, [pc, #520]	; (8008340 <_dtoa_r+0x650>)
 8008138:	2200      	movs	r2, #0
 800813a:	4640      	mov	r0, r8
 800813c:	4649      	mov	r1, r9
 800813e:	f7f8 f8a3 	bl	8000288 <__aeabi_dsub>
 8008142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008146:	4680      	mov	r8, r0
 8008148:	4689      	mov	r9, r1
 800814a:	f7f8 fce5 	bl	8000b18 <__aeabi_dcmpgt>
 800814e:	2800      	cmp	r0, #0
 8008150:	f040 8296 	bne.w	8008680 <_dtoa_r+0x990>
 8008154:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008158:	4640      	mov	r0, r8
 800815a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800815e:	4649      	mov	r1, r9
 8008160:	f7f8 fcbc 	bl	8000adc <__aeabi_dcmplt>
 8008164:	2800      	cmp	r0, #0
 8008166:	f040 8289 	bne.w	800867c <_dtoa_r+0x98c>
 800816a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800816e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008170:	2b00      	cmp	r3, #0
 8008172:	f2c0 814e 	blt.w	8008412 <_dtoa_r+0x722>
 8008176:	f1bb 0f0e 	cmp.w	fp, #14
 800817a:	f300 814a 	bgt.w	8008412 <_dtoa_r+0x722>
 800817e:	4b6b      	ldr	r3, [pc, #428]	; (800832c <_dtoa_r+0x63c>)
 8008180:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008184:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800818a:	2b00      	cmp	r3, #0
 800818c:	f280 80dc 	bge.w	8008348 <_dtoa_r+0x658>
 8008190:	9b04      	ldr	r3, [sp, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	f300 80d8 	bgt.w	8008348 <_dtoa_r+0x658>
 8008198:	f040 826f 	bne.w	800867a <_dtoa_r+0x98a>
 800819c:	4b68      	ldr	r3, [pc, #416]	; (8008340 <_dtoa_r+0x650>)
 800819e:	2200      	movs	r2, #0
 80081a0:	4640      	mov	r0, r8
 80081a2:	4649      	mov	r1, r9
 80081a4:	f7f8 fa28 	bl	80005f8 <__aeabi_dmul>
 80081a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081ac:	f7f8 fcaa 	bl	8000b04 <__aeabi_dcmpge>
 80081b0:	9e04      	ldr	r6, [sp, #16]
 80081b2:	4637      	mov	r7, r6
 80081b4:	2800      	cmp	r0, #0
 80081b6:	f040 8245 	bne.w	8008644 <_dtoa_r+0x954>
 80081ba:	9d00      	ldr	r5, [sp, #0]
 80081bc:	2331      	movs	r3, #49	; 0x31
 80081be:	f805 3b01 	strb.w	r3, [r5], #1
 80081c2:	f10b 0b01 	add.w	fp, fp, #1
 80081c6:	e241      	b.n	800864c <_dtoa_r+0x95c>
 80081c8:	07f2      	lsls	r2, r6, #31
 80081ca:	d505      	bpl.n	80081d8 <_dtoa_r+0x4e8>
 80081cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081d0:	f7f8 fa12 	bl	80005f8 <__aeabi_dmul>
 80081d4:	3501      	adds	r5, #1
 80081d6:	2301      	movs	r3, #1
 80081d8:	1076      	asrs	r6, r6, #1
 80081da:	3708      	adds	r7, #8
 80081dc:	e773      	b.n	80080c6 <_dtoa_r+0x3d6>
 80081de:	2502      	movs	r5, #2
 80081e0:	e775      	b.n	80080ce <_dtoa_r+0x3de>
 80081e2:	9e04      	ldr	r6, [sp, #16]
 80081e4:	465f      	mov	r7, fp
 80081e6:	e792      	b.n	800810e <_dtoa_r+0x41e>
 80081e8:	9900      	ldr	r1, [sp, #0]
 80081ea:	4b50      	ldr	r3, [pc, #320]	; (800832c <_dtoa_r+0x63c>)
 80081ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081f0:	4431      	add	r1, r6
 80081f2:	9102      	str	r1, [sp, #8]
 80081f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081f6:	eeb0 9a47 	vmov.f32	s18, s14
 80081fa:	eef0 9a67 	vmov.f32	s19, s15
 80081fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008202:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008206:	2900      	cmp	r1, #0
 8008208:	d044      	beq.n	8008294 <_dtoa_r+0x5a4>
 800820a:	494e      	ldr	r1, [pc, #312]	; (8008344 <_dtoa_r+0x654>)
 800820c:	2000      	movs	r0, #0
 800820e:	f7f8 fb1d 	bl	800084c <__aeabi_ddiv>
 8008212:	ec53 2b19 	vmov	r2, r3, d9
 8008216:	f7f8 f837 	bl	8000288 <__aeabi_dsub>
 800821a:	9d00      	ldr	r5, [sp, #0]
 800821c:	ec41 0b19 	vmov	d9, r0, r1
 8008220:	4649      	mov	r1, r9
 8008222:	4640      	mov	r0, r8
 8008224:	f7f8 fc98 	bl	8000b58 <__aeabi_d2iz>
 8008228:	4606      	mov	r6, r0
 800822a:	f7f8 f97b 	bl	8000524 <__aeabi_i2d>
 800822e:	4602      	mov	r2, r0
 8008230:	460b      	mov	r3, r1
 8008232:	4640      	mov	r0, r8
 8008234:	4649      	mov	r1, r9
 8008236:	f7f8 f827 	bl	8000288 <__aeabi_dsub>
 800823a:	3630      	adds	r6, #48	; 0x30
 800823c:	f805 6b01 	strb.w	r6, [r5], #1
 8008240:	ec53 2b19 	vmov	r2, r3, d9
 8008244:	4680      	mov	r8, r0
 8008246:	4689      	mov	r9, r1
 8008248:	f7f8 fc48 	bl	8000adc <__aeabi_dcmplt>
 800824c:	2800      	cmp	r0, #0
 800824e:	d164      	bne.n	800831a <_dtoa_r+0x62a>
 8008250:	4642      	mov	r2, r8
 8008252:	464b      	mov	r3, r9
 8008254:	4937      	ldr	r1, [pc, #220]	; (8008334 <_dtoa_r+0x644>)
 8008256:	2000      	movs	r0, #0
 8008258:	f7f8 f816 	bl	8000288 <__aeabi_dsub>
 800825c:	ec53 2b19 	vmov	r2, r3, d9
 8008260:	f7f8 fc3c 	bl	8000adc <__aeabi_dcmplt>
 8008264:	2800      	cmp	r0, #0
 8008266:	f040 80b6 	bne.w	80083d6 <_dtoa_r+0x6e6>
 800826a:	9b02      	ldr	r3, [sp, #8]
 800826c:	429d      	cmp	r5, r3
 800826e:	f43f af7c 	beq.w	800816a <_dtoa_r+0x47a>
 8008272:	4b31      	ldr	r3, [pc, #196]	; (8008338 <_dtoa_r+0x648>)
 8008274:	ec51 0b19 	vmov	r0, r1, d9
 8008278:	2200      	movs	r2, #0
 800827a:	f7f8 f9bd 	bl	80005f8 <__aeabi_dmul>
 800827e:	4b2e      	ldr	r3, [pc, #184]	; (8008338 <_dtoa_r+0x648>)
 8008280:	ec41 0b19 	vmov	d9, r0, r1
 8008284:	2200      	movs	r2, #0
 8008286:	4640      	mov	r0, r8
 8008288:	4649      	mov	r1, r9
 800828a:	f7f8 f9b5 	bl	80005f8 <__aeabi_dmul>
 800828e:	4680      	mov	r8, r0
 8008290:	4689      	mov	r9, r1
 8008292:	e7c5      	b.n	8008220 <_dtoa_r+0x530>
 8008294:	ec51 0b17 	vmov	r0, r1, d7
 8008298:	f7f8 f9ae 	bl	80005f8 <__aeabi_dmul>
 800829c:	9b02      	ldr	r3, [sp, #8]
 800829e:	9d00      	ldr	r5, [sp, #0]
 80082a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80082a2:	ec41 0b19 	vmov	d9, r0, r1
 80082a6:	4649      	mov	r1, r9
 80082a8:	4640      	mov	r0, r8
 80082aa:	f7f8 fc55 	bl	8000b58 <__aeabi_d2iz>
 80082ae:	4606      	mov	r6, r0
 80082b0:	f7f8 f938 	bl	8000524 <__aeabi_i2d>
 80082b4:	3630      	adds	r6, #48	; 0x30
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	4640      	mov	r0, r8
 80082bc:	4649      	mov	r1, r9
 80082be:	f7f7 ffe3 	bl	8000288 <__aeabi_dsub>
 80082c2:	f805 6b01 	strb.w	r6, [r5], #1
 80082c6:	9b02      	ldr	r3, [sp, #8]
 80082c8:	429d      	cmp	r5, r3
 80082ca:	4680      	mov	r8, r0
 80082cc:	4689      	mov	r9, r1
 80082ce:	f04f 0200 	mov.w	r2, #0
 80082d2:	d124      	bne.n	800831e <_dtoa_r+0x62e>
 80082d4:	4b1b      	ldr	r3, [pc, #108]	; (8008344 <_dtoa_r+0x654>)
 80082d6:	ec51 0b19 	vmov	r0, r1, d9
 80082da:	f7f7 ffd7 	bl	800028c <__adddf3>
 80082de:	4602      	mov	r2, r0
 80082e0:	460b      	mov	r3, r1
 80082e2:	4640      	mov	r0, r8
 80082e4:	4649      	mov	r1, r9
 80082e6:	f7f8 fc17 	bl	8000b18 <__aeabi_dcmpgt>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	d173      	bne.n	80083d6 <_dtoa_r+0x6e6>
 80082ee:	ec53 2b19 	vmov	r2, r3, d9
 80082f2:	4914      	ldr	r1, [pc, #80]	; (8008344 <_dtoa_r+0x654>)
 80082f4:	2000      	movs	r0, #0
 80082f6:	f7f7 ffc7 	bl	8000288 <__aeabi_dsub>
 80082fa:	4602      	mov	r2, r0
 80082fc:	460b      	mov	r3, r1
 80082fe:	4640      	mov	r0, r8
 8008300:	4649      	mov	r1, r9
 8008302:	f7f8 fbeb 	bl	8000adc <__aeabi_dcmplt>
 8008306:	2800      	cmp	r0, #0
 8008308:	f43f af2f 	beq.w	800816a <_dtoa_r+0x47a>
 800830c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800830e:	1e6b      	subs	r3, r5, #1
 8008310:	930f      	str	r3, [sp, #60]	; 0x3c
 8008312:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008316:	2b30      	cmp	r3, #48	; 0x30
 8008318:	d0f8      	beq.n	800830c <_dtoa_r+0x61c>
 800831a:	46bb      	mov	fp, r7
 800831c:	e04a      	b.n	80083b4 <_dtoa_r+0x6c4>
 800831e:	4b06      	ldr	r3, [pc, #24]	; (8008338 <_dtoa_r+0x648>)
 8008320:	f7f8 f96a 	bl	80005f8 <__aeabi_dmul>
 8008324:	4680      	mov	r8, r0
 8008326:	4689      	mov	r9, r1
 8008328:	e7bd      	b.n	80082a6 <_dtoa_r+0x5b6>
 800832a:	bf00      	nop
 800832c:	0800af30 	.word	0x0800af30
 8008330:	0800af08 	.word	0x0800af08
 8008334:	3ff00000 	.word	0x3ff00000
 8008338:	40240000 	.word	0x40240000
 800833c:	401c0000 	.word	0x401c0000
 8008340:	40140000 	.word	0x40140000
 8008344:	3fe00000 	.word	0x3fe00000
 8008348:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800834c:	9d00      	ldr	r5, [sp, #0]
 800834e:	4642      	mov	r2, r8
 8008350:	464b      	mov	r3, r9
 8008352:	4630      	mov	r0, r6
 8008354:	4639      	mov	r1, r7
 8008356:	f7f8 fa79 	bl	800084c <__aeabi_ddiv>
 800835a:	f7f8 fbfd 	bl	8000b58 <__aeabi_d2iz>
 800835e:	9001      	str	r0, [sp, #4]
 8008360:	f7f8 f8e0 	bl	8000524 <__aeabi_i2d>
 8008364:	4642      	mov	r2, r8
 8008366:	464b      	mov	r3, r9
 8008368:	f7f8 f946 	bl	80005f8 <__aeabi_dmul>
 800836c:	4602      	mov	r2, r0
 800836e:	460b      	mov	r3, r1
 8008370:	4630      	mov	r0, r6
 8008372:	4639      	mov	r1, r7
 8008374:	f7f7 ff88 	bl	8000288 <__aeabi_dsub>
 8008378:	9e01      	ldr	r6, [sp, #4]
 800837a:	9f04      	ldr	r7, [sp, #16]
 800837c:	3630      	adds	r6, #48	; 0x30
 800837e:	f805 6b01 	strb.w	r6, [r5], #1
 8008382:	9e00      	ldr	r6, [sp, #0]
 8008384:	1bae      	subs	r6, r5, r6
 8008386:	42b7      	cmp	r7, r6
 8008388:	4602      	mov	r2, r0
 800838a:	460b      	mov	r3, r1
 800838c:	d134      	bne.n	80083f8 <_dtoa_r+0x708>
 800838e:	f7f7 ff7d 	bl	800028c <__adddf3>
 8008392:	4642      	mov	r2, r8
 8008394:	464b      	mov	r3, r9
 8008396:	4606      	mov	r6, r0
 8008398:	460f      	mov	r7, r1
 800839a:	f7f8 fbbd 	bl	8000b18 <__aeabi_dcmpgt>
 800839e:	b9c8      	cbnz	r0, 80083d4 <_dtoa_r+0x6e4>
 80083a0:	4642      	mov	r2, r8
 80083a2:	464b      	mov	r3, r9
 80083a4:	4630      	mov	r0, r6
 80083a6:	4639      	mov	r1, r7
 80083a8:	f7f8 fb8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80083ac:	b110      	cbz	r0, 80083b4 <_dtoa_r+0x6c4>
 80083ae:	9b01      	ldr	r3, [sp, #4]
 80083b0:	07db      	lsls	r3, r3, #31
 80083b2:	d40f      	bmi.n	80083d4 <_dtoa_r+0x6e4>
 80083b4:	4651      	mov	r1, sl
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 fbcc 	bl	8008b54 <_Bfree>
 80083bc:	2300      	movs	r3, #0
 80083be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083c0:	702b      	strb	r3, [r5, #0]
 80083c2:	f10b 0301 	add.w	r3, fp, #1
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f43f ace2 	beq.w	8007d94 <_dtoa_r+0xa4>
 80083d0:	601d      	str	r5, [r3, #0]
 80083d2:	e4df      	b.n	8007d94 <_dtoa_r+0xa4>
 80083d4:	465f      	mov	r7, fp
 80083d6:	462b      	mov	r3, r5
 80083d8:	461d      	mov	r5, r3
 80083da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083de:	2a39      	cmp	r2, #57	; 0x39
 80083e0:	d106      	bne.n	80083f0 <_dtoa_r+0x700>
 80083e2:	9a00      	ldr	r2, [sp, #0]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d1f7      	bne.n	80083d8 <_dtoa_r+0x6e8>
 80083e8:	9900      	ldr	r1, [sp, #0]
 80083ea:	2230      	movs	r2, #48	; 0x30
 80083ec:	3701      	adds	r7, #1
 80083ee:	700a      	strb	r2, [r1, #0]
 80083f0:	781a      	ldrb	r2, [r3, #0]
 80083f2:	3201      	adds	r2, #1
 80083f4:	701a      	strb	r2, [r3, #0]
 80083f6:	e790      	b.n	800831a <_dtoa_r+0x62a>
 80083f8:	4ba3      	ldr	r3, [pc, #652]	; (8008688 <_dtoa_r+0x998>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	f7f8 f8fc 	bl	80005f8 <__aeabi_dmul>
 8008400:	2200      	movs	r2, #0
 8008402:	2300      	movs	r3, #0
 8008404:	4606      	mov	r6, r0
 8008406:	460f      	mov	r7, r1
 8008408:	f7f8 fb5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800840c:	2800      	cmp	r0, #0
 800840e:	d09e      	beq.n	800834e <_dtoa_r+0x65e>
 8008410:	e7d0      	b.n	80083b4 <_dtoa_r+0x6c4>
 8008412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008414:	2a00      	cmp	r2, #0
 8008416:	f000 80ca 	beq.w	80085ae <_dtoa_r+0x8be>
 800841a:	9a07      	ldr	r2, [sp, #28]
 800841c:	2a01      	cmp	r2, #1
 800841e:	f300 80ad 	bgt.w	800857c <_dtoa_r+0x88c>
 8008422:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008424:	2a00      	cmp	r2, #0
 8008426:	f000 80a5 	beq.w	8008574 <_dtoa_r+0x884>
 800842a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800842e:	9e08      	ldr	r6, [sp, #32]
 8008430:	9d05      	ldr	r5, [sp, #20]
 8008432:	9a05      	ldr	r2, [sp, #20]
 8008434:	441a      	add	r2, r3
 8008436:	9205      	str	r2, [sp, #20]
 8008438:	9a06      	ldr	r2, [sp, #24]
 800843a:	2101      	movs	r1, #1
 800843c:	441a      	add	r2, r3
 800843e:	4620      	mov	r0, r4
 8008440:	9206      	str	r2, [sp, #24]
 8008442:	f000 fc3d 	bl	8008cc0 <__i2b>
 8008446:	4607      	mov	r7, r0
 8008448:	b165      	cbz	r5, 8008464 <_dtoa_r+0x774>
 800844a:	9b06      	ldr	r3, [sp, #24]
 800844c:	2b00      	cmp	r3, #0
 800844e:	dd09      	ble.n	8008464 <_dtoa_r+0x774>
 8008450:	42ab      	cmp	r3, r5
 8008452:	9a05      	ldr	r2, [sp, #20]
 8008454:	bfa8      	it	ge
 8008456:	462b      	movge	r3, r5
 8008458:	1ad2      	subs	r2, r2, r3
 800845a:	9205      	str	r2, [sp, #20]
 800845c:	9a06      	ldr	r2, [sp, #24]
 800845e:	1aed      	subs	r5, r5, r3
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	9306      	str	r3, [sp, #24]
 8008464:	9b08      	ldr	r3, [sp, #32]
 8008466:	b1f3      	cbz	r3, 80084a6 <_dtoa_r+0x7b6>
 8008468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 80a3 	beq.w	80085b6 <_dtoa_r+0x8c6>
 8008470:	2e00      	cmp	r6, #0
 8008472:	dd10      	ble.n	8008496 <_dtoa_r+0x7a6>
 8008474:	4639      	mov	r1, r7
 8008476:	4632      	mov	r2, r6
 8008478:	4620      	mov	r0, r4
 800847a:	f000 fce1 	bl	8008e40 <__pow5mult>
 800847e:	4652      	mov	r2, sl
 8008480:	4601      	mov	r1, r0
 8008482:	4607      	mov	r7, r0
 8008484:	4620      	mov	r0, r4
 8008486:	f000 fc31 	bl	8008cec <__multiply>
 800848a:	4651      	mov	r1, sl
 800848c:	4680      	mov	r8, r0
 800848e:	4620      	mov	r0, r4
 8008490:	f000 fb60 	bl	8008b54 <_Bfree>
 8008494:	46c2      	mov	sl, r8
 8008496:	9b08      	ldr	r3, [sp, #32]
 8008498:	1b9a      	subs	r2, r3, r6
 800849a:	d004      	beq.n	80084a6 <_dtoa_r+0x7b6>
 800849c:	4651      	mov	r1, sl
 800849e:	4620      	mov	r0, r4
 80084a0:	f000 fcce 	bl	8008e40 <__pow5mult>
 80084a4:	4682      	mov	sl, r0
 80084a6:	2101      	movs	r1, #1
 80084a8:	4620      	mov	r0, r4
 80084aa:	f000 fc09 	bl	8008cc0 <__i2b>
 80084ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	4606      	mov	r6, r0
 80084b4:	f340 8081 	ble.w	80085ba <_dtoa_r+0x8ca>
 80084b8:	461a      	mov	r2, r3
 80084ba:	4601      	mov	r1, r0
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 fcbf 	bl	8008e40 <__pow5mult>
 80084c2:	9b07      	ldr	r3, [sp, #28]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	4606      	mov	r6, r0
 80084c8:	dd7a      	ble.n	80085c0 <_dtoa_r+0x8d0>
 80084ca:	f04f 0800 	mov.w	r8, #0
 80084ce:	6933      	ldr	r3, [r6, #16]
 80084d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80084d4:	6918      	ldr	r0, [r3, #16]
 80084d6:	f000 fba5 	bl	8008c24 <__hi0bits>
 80084da:	f1c0 0020 	rsb	r0, r0, #32
 80084de:	9b06      	ldr	r3, [sp, #24]
 80084e0:	4418      	add	r0, r3
 80084e2:	f010 001f 	ands.w	r0, r0, #31
 80084e6:	f000 8094 	beq.w	8008612 <_dtoa_r+0x922>
 80084ea:	f1c0 0320 	rsb	r3, r0, #32
 80084ee:	2b04      	cmp	r3, #4
 80084f0:	f340 8085 	ble.w	80085fe <_dtoa_r+0x90e>
 80084f4:	9b05      	ldr	r3, [sp, #20]
 80084f6:	f1c0 001c 	rsb	r0, r0, #28
 80084fa:	4403      	add	r3, r0
 80084fc:	9305      	str	r3, [sp, #20]
 80084fe:	9b06      	ldr	r3, [sp, #24]
 8008500:	4403      	add	r3, r0
 8008502:	4405      	add	r5, r0
 8008504:	9306      	str	r3, [sp, #24]
 8008506:	9b05      	ldr	r3, [sp, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	dd05      	ble.n	8008518 <_dtoa_r+0x828>
 800850c:	4651      	mov	r1, sl
 800850e:	461a      	mov	r2, r3
 8008510:	4620      	mov	r0, r4
 8008512:	f000 fcef 	bl	8008ef4 <__lshift>
 8008516:	4682      	mov	sl, r0
 8008518:	9b06      	ldr	r3, [sp, #24]
 800851a:	2b00      	cmp	r3, #0
 800851c:	dd05      	ble.n	800852a <_dtoa_r+0x83a>
 800851e:	4631      	mov	r1, r6
 8008520:	461a      	mov	r2, r3
 8008522:	4620      	mov	r0, r4
 8008524:	f000 fce6 	bl	8008ef4 <__lshift>
 8008528:	4606      	mov	r6, r0
 800852a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800852c:	2b00      	cmp	r3, #0
 800852e:	d072      	beq.n	8008616 <_dtoa_r+0x926>
 8008530:	4631      	mov	r1, r6
 8008532:	4650      	mov	r0, sl
 8008534:	f000 fd4a 	bl	8008fcc <__mcmp>
 8008538:	2800      	cmp	r0, #0
 800853a:	da6c      	bge.n	8008616 <_dtoa_r+0x926>
 800853c:	2300      	movs	r3, #0
 800853e:	4651      	mov	r1, sl
 8008540:	220a      	movs	r2, #10
 8008542:	4620      	mov	r0, r4
 8008544:	f000 fb28 	bl	8008b98 <__multadd>
 8008548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800854a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800854e:	4682      	mov	sl, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 81b0 	beq.w	80088b6 <_dtoa_r+0xbc6>
 8008556:	2300      	movs	r3, #0
 8008558:	4639      	mov	r1, r7
 800855a:	220a      	movs	r2, #10
 800855c:	4620      	mov	r0, r4
 800855e:	f000 fb1b 	bl	8008b98 <__multadd>
 8008562:	9b01      	ldr	r3, [sp, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	4607      	mov	r7, r0
 8008568:	f300 8096 	bgt.w	8008698 <_dtoa_r+0x9a8>
 800856c:	9b07      	ldr	r3, [sp, #28]
 800856e:	2b02      	cmp	r3, #2
 8008570:	dc59      	bgt.n	8008626 <_dtoa_r+0x936>
 8008572:	e091      	b.n	8008698 <_dtoa_r+0x9a8>
 8008574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008576:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800857a:	e758      	b.n	800842e <_dtoa_r+0x73e>
 800857c:	9b04      	ldr	r3, [sp, #16]
 800857e:	1e5e      	subs	r6, r3, #1
 8008580:	9b08      	ldr	r3, [sp, #32]
 8008582:	42b3      	cmp	r3, r6
 8008584:	bfbf      	itttt	lt
 8008586:	9b08      	ldrlt	r3, [sp, #32]
 8008588:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800858a:	9608      	strlt	r6, [sp, #32]
 800858c:	1af3      	sublt	r3, r6, r3
 800858e:	bfb4      	ite	lt
 8008590:	18d2      	addlt	r2, r2, r3
 8008592:	1b9e      	subge	r6, r3, r6
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	bfbc      	itt	lt
 8008598:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800859a:	2600      	movlt	r6, #0
 800859c:	2b00      	cmp	r3, #0
 800859e:	bfb7      	itett	lt
 80085a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80085a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80085a8:	1a9d      	sublt	r5, r3, r2
 80085aa:	2300      	movlt	r3, #0
 80085ac:	e741      	b.n	8008432 <_dtoa_r+0x742>
 80085ae:	9e08      	ldr	r6, [sp, #32]
 80085b0:	9d05      	ldr	r5, [sp, #20]
 80085b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80085b4:	e748      	b.n	8008448 <_dtoa_r+0x758>
 80085b6:	9a08      	ldr	r2, [sp, #32]
 80085b8:	e770      	b.n	800849c <_dtoa_r+0x7ac>
 80085ba:	9b07      	ldr	r3, [sp, #28]
 80085bc:	2b01      	cmp	r3, #1
 80085be:	dc19      	bgt.n	80085f4 <_dtoa_r+0x904>
 80085c0:	9b02      	ldr	r3, [sp, #8]
 80085c2:	b9bb      	cbnz	r3, 80085f4 <_dtoa_r+0x904>
 80085c4:	9b03      	ldr	r3, [sp, #12]
 80085c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085ca:	b99b      	cbnz	r3, 80085f4 <_dtoa_r+0x904>
 80085cc:	9b03      	ldr	r3, [sp, #12]
 80085ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085d2:	0d1b      	lsrs	r3, r3, #20
 80085d4:	051b      	lsls	r3, r3, #20
 80085d6:	b183      	cbz	r3, 80085fa <_dtoa_r+0x90a>
 80085d8:	9b05      	ldr	r3, [sp, #20]
 80085da:	3301      	adds	r3, #1
 80085dc:	9305      	str	r3, [sp, #20]
 80085de:	9b06      	ldr	r3, [sp, #24]
 80085e0:	3301      	adds	r3, #1
 80085e2:	9306      	str	r3, [sp, #24]
 80085e4:	f04f 0801 	mov.w	r8, #1
 80085e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f47f af6f 	bne.w	80084ce <_dtoa_r+0x7de>
 80085f0:	2001      	movs	r0, #1
 80085f2:	e774      	b.n	80084de <_dtoa_r+0x7ee>
 80085f4:	f04f 0800 	mov.w	r8, #0
 80085f8:	e7f6      	b.n	80085e8 <_dtoa_r+0x8f8>
 80085fa:	4698      	mov	r8, r3
 80085fc:	e7f4      	b.n	80085e8 <_dtoa_r+0x8f8>
 80085fe:	d082      	beq.n	8008506 <_dtoa_r+0x816>
 8008600:	9a05      	ldr	r2, [sp, #20]
 8008602:	331c      	adds	r3, #28
 8008604:	441a      	add	r2, r3
 8008606:	9205      	str	r2, [sp, #20]
 8008608:	9a06      	ldr	r2, [sp, #24]
 800860a:	441a      	add	r2, r3
 800860c:	441d      	add	r5, r3
 800860e:	9206      	str	r2, [sp, #24]
 8008610:	e779      	b.n	8008506 <_dtoa_r+0x816>
 8008612:	4603      	mov	r3, r0
 8008614:	e7f4      	b.n	8008600 <_dtoa_r+0x910>
 8008616:	9b04      	ldr	r3, [sp, #16]
 8008618:	2b00      	cmp	r3, #0
 800861a:	dc37      	bgt.n	800868c <_dtoa_r+0x99c>
 800861c:	9b07      	ldr	r3, [sp, #28]
 800861e:	2b02      	cmp	r3, #2
 8008620:	dd34      	ble.n	800868c <_dtoa_r+0x99c>
 8008622:	9b04      	ldr	r3, [sp, #16]
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	9b01      	ldr	r3, [sp, #4]
 8008628:	b963      	cbnz	r3, 8008644 <_dtoa_r+0x954>
 800862a:	4631      	mov	r1, r6
 800862c:	2205      	movs	r2, #5
 800862e:	4620      	mov	r0, r4
 8008630:	f000 fab2 	bl	8008b98 <__multadd>
 8008634:	4601      	mov	r1, r0
 8008636:	4606      	mov	r6, r0
 8008638:	4650      	mov	r0, sl
 800863a:	f000 fcc7 	bl	8008fcc <__mcmp>
 800863e:	2800      	cmp	r0, #0
 8008640:	f73f adbb 	bgt.w	80081ba <_dtoa_r+0x4ca>
 8008644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008646:	9d00      	ldr	r5, [sp, #0]
 8008648:	ea6f 0b03 	mvn.w	fp, r3
 800864c:	f04f 0800 	mov.w	r8, #0
 8008650:	4631      	mov	r1, r6
 8008652:	4620      	mov	r0, r4
 8008654:	f000 fa7e 	bl	8008b54 <_Bfree>
 8008658:	2f00      	cmp	r7, #0
 800865a:	f43f aeab 	beq.w	80083b4 <_dtoa_r+0x6c4>
 800865e:	f1b8 0f00 	cmp.w	r8, #0
 8008662:	d005      	beq.n	8008670 <_dtoa_r+0x980>
 8008664:	45b8      	cmp	r8, r7
 8008666:	d003      	beq.n	8008670 <_dtoa_r+0x980>
 8008668:	4641      	mov	r1, r8
 800866a:	4620      	mov	r0, r4
 800866c:	f000 fa72 	bl	8008b54 <_Bfree>
 8008670:	4639      	mov	r1, r7
 8008672:	4620      	mov	r0, r4
 8008674:	f000 fa6e 	bl	8008b54 <_Bfree>
 8008678:	e69c      	b.n	80083b4 <_dtoa_r+0x6c4>
 800867a:	2600      	movs	r6, #0
 800867c:	4637      	mov	r7, r6
 800867e:	e7e1      	b.n	8008644 <_dtoa_r+0x954>
 8008680:	46bb      	mov	fp, r7
 8008682:	4637      	mov	r7, r6
 8008684:	e599      	b.n	80081ba <_dtoa_r+0x4ca>
 8008686:	bf00      	nop
 8008688:	40240000 	.word	0x40240000
 800868c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 80c8 	beq.w	8008824 <_dtoa_r+0xb34>
 8008694:	9b04      	ldr	r3, [sp, #16]
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	2d00      	cmp	r5, #0
 800869a:	dd05      	ble.n	80086a8 <_dtoa_r+0x9b8>
 800869c:	4639      	mov	r1, r7
 800869e:	462a      	mov	r2, r5
 80086a0:	4620      	mov	r0, r4
 80086a2:	f000 fc27 	bl	8008ef4 <__lshift>
 80086a6:	4607      	mov	r7, r0
 80086a8:	f1b8 0f00 	cmp.w	r8, #0
 80086ac:	d05b      	beq.n	8008766 <_dtoa_r+0xa76>
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	4620      	mov	r0, r4
 80086b2:	f000 fa0f 	bl	8008ad4 <_Balloc>
 80086b6:	4605      	mov	r5, r0
 80086b8:	b928      	cbnz	r0, 80086c6 <_dtoa_r+0x9d6>
 80086ba:	4b83      	ldr	r3, [pc, #524]	; (80088c8 <_dtoa_r+0xbd8>)
 80086bc:	4602      	mov	r2, r0
 80086be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80086c2:	f7ff bb2e 	b.w	8007d22 <_dtoa_r+0x32>
 80086c6:	693a      	ldr	r2, [r7, #16]
 80086c8:	3202      	adds	r2, #2
 80086ca:	0092      	lsls	r2, r2, #2
 80086cc:	f107 010c 	add.w	r1, r7, #12
 80086d0:	300c      	adds	r0, #12
 80086d2:	f001 f801 	bl	80096d8 <memcpy>
 80086d6:	2201      	movs	r2, #1
 80086d8:	4629      	mov	r1, r5
 80086da:	4620      	mov	r0, r4
 80086dc:	f000 fc0a 	bl	8008ef4 <__lshift>
 80086e0:	9b00      	ldr	r3, [sp, #0]
 80086e2:	3301      	adds	r3, #1
 80086e4:	9304      	str	r3, [sp, #16]
 80086e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086ea:	4413      	add	r3, r2
 80086ec:	9308      	str	r3, [sp, #32]
 80086ee:	9b02      	ldr	r3, [sp, #8]
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	46b8      	mov	r8, r7
 80086f6:	9306      	str	r3, [sp, #24]
 80086f8:	4607      	mov	r7, r0
 80086fa:	9b04      	ldr	r3, [sp, #16]
 80086fc:	4631      	mov	r1, r6
 80086fe:	3b01      	subs	r3, #1
 8008700:	4650      	mov	r0, sl
 8008702:	9301      	str	r3, [sp, #4]
 8008704:	f7ff fa6b 	bl	8007bde <quorem>
 8008708:	4641      	mov	r1, r8
 800870a:	9002      	str	r0, [sp, #8]
 800870c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008710:	4650      	mov	r0, sl
 8008712:	f000 fc5b 	bl	8008fcc <__mcmp>
 8008716:	463a      	mov	r2, r7
 8008718:	9005      	str	r0, [sp, #20]
 800871a:	4631      	mov	r1, r6
 800871c:	4620      	mov	r0, r4
 800871e:	f000 fc71 	bl	8009004 <__mdiff>
 8008722:	68c2      	ldr	r2, [r0, #12]
 8008724:	4605      	mov	r5, r0
 8008726:	bb02      	cbnz	r2, 800876a <_dtoa_r+0xa7a>
 8008728:	4601      	mov	r1, r0
 800872a:	4650      	mov	r0, sl
 800872c:	f000 fc4e 	bl	8008fcc <__mcmp>
 8008730:	4602      	mov	r2, r0
 8008732:	4629      	mov	r1, r5
 8008734:	4620      	mov	r0, r4
 8008736:	9209      	str	r2, [sp, #36]	; 0x24
 8008738:	f000 fa0c 	bl	8008b54 <_Bfree>
 800873c:	9b07      	ldr	r3, [sp, #28]
 800873e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008740:	9d04      	ldr	r5, [sp, #16]
 8008742:	ea43 0102 	orr.w	r1, r3, r2
 8008746:	9b06      	ldr	r3, [sp, #24]
 8008748:	4319      	orrs	r1, r3
 800874a:	d110      	bne.n	800876e <_dtoa_r+0xa7e>
 800874c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008750:	d029      	beq.n	80087a6 <_dtoa_r+0xab6>
 8008752:	9b05      	ldr	r3, [sp, #20]
 8008754:	2b00      	cmp	r3, #0
 8008756:	dd02      	ble.n	800875e <_dtoa_r+0xa6e>
 8008758:	9b02      	ldr	r3, [sp, #8]
 800875a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	f883 9000 	strb.w	r9, [r3]
 8008764:	e774      	b.n	8008650 <_dtoa_r+0x960>
 8008766:	4638      	mov	r0, r7
 8008768:	e7ba      	b.n	80086e0 <_dtoa_r+0x9f0>
 800876a:	2201      	movs	r2, #1
 800876c:	e7e1      	b.n	8008732 <_dtoa_r+0xa42>
 800876e:	9b05      	ldr	r3, [sp, #20]
 8008770:	2b00      	cmp	r3, #0
 8008772:	db04      	blt.n	800877e <_dtoa_r+0xa8e>
 8008774:	9907      	ldr	r1, [sp, #28]
 8008776:	430b      	orrs	r3, r1
 8008778:	9906      	ldr	r1, [sp, #24]
 800877a:	430b      	orrs	r3, r1
 800877c:	d120      	bne.n	80087c0 <_dtoa_r+0xad0>
 800877e:	2a00      	cmp	r2, #0
 8008780:	dded      	ble.n	800875e <_dtoa_r+0xa6e>
 8008782:	4651      	mov	r1, sl
 8008784:	2201      	movs	r2, #1
 8008786:	4620      	mov	r0, r4
 8008788:	f000 fbb4 	bl	8008ef4 <__lshift>
 800878c:	4631      	mov	r1, r6
 800878e:	4682      	mov	sl, r0
 8008790:	f000 fc1c 	bl	8008fcc <__mcmp>
 8008794:	2800      	cmp	r0, #0
 8008796:	dc03      	bgt.n	80087a0 <_dtoa_r+0xab0>
 8008798:	d1e1      	bne.n	800875e <_dtoa_r+0xa6e>
 800879a:	f019 0f01 	tst.w	r9, #1
 800879e:	d0de      	beq.n	800875e <_dtoa_r+0xa6e>
 80087a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80087a4:	d1d8      	bne.n	8008758 <_dtoa_r+0xa68>
 80087a6:	9a01      	ldr	r2, [sp, #4]
 80087a8:	2339      	movs	r3, #57	; 0x39
 80087aa:	7013      	strb	r3, [r2, #0]
 80087ac:	462b      	mov	r3, r5
 80087ae:	461d      	mov	r5, r3
 80087b0:	3b01      	subs	r3, #1
 80087b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80087b6:	2a39      	cmp	r2, #57	; 0x39
 80087b8:	d06c      	beq.n	8008894 <_dtoa_r+0xba4>
 80087ba:	3201      	adds	r2, #1
 80087bc:	701a      	strb	r2, [r3, #0]
 80087be:	e747      	b.n	8008650 <_dtoa_r+0x960>
 80087c0:	2a00      	cmp	r2, #0
 80087c2:	dd07      	ble.n	80087d4 <_dtoa_r+0xae4>
 80087c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80087c8:	d0ed      	beq.n	80087a6 <_dtoa_r+0xab6>
 80087ca:	9a01      	ldr	r2, [sp, #4]
 80087cc:	f109 0301 	add.w	r3, r9, #1
 80087d0:	7013      	strb	r3, [r2, #0]
 80087d2:	e73d      	b.n	8008650 <_dtoa_r+0x960>
 80087d4:	9b04      	ldr	r3, [sp, #16]
 80087d6:	9a08      	ldr	r2, [sp, #32]
 80087d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80087dc:	4293      	cmp	r3, r2
 80087de:	d043      	beq.n	8008868 <_dtoa_r+0xb78>
 80087e0:	4651      	mov	r1, sl
 80087e2:	2300      	movs	r3, #0
 80087e4:	220a      	movs	r2, #10
 80087e6:	4620      	mov	r0, r4
 80087e8:	f000 f9d6 	bl	8008b98 <__multadd>
 80087ec:	45b8      	cmp	r8, r7
 80087ee:	4682      	mov	sl, r0
 80087f0:	f04f 0300 	mov.w	r3, #0
 80087f4:	f04f 020a 	mov.w	r2, #10
 80087f8:	4641      	mov	r1, r8
 80087fa:	4620      	mov	r0, r4
 80087fc:	d107      	bne.n	800880e <_dtoa_r+0xb1e>
 80087fe:	f000 f9cb 	bl	8008b98 <__multadd>
 8008802:	4680      	mov	r8, r0
 8008804:	4607      	mov	r7, r0
 8008806:	9b04      	ldr	r3, [sp, #16]
 8008808:	3301      	adds	r3, #1
 800880a:	9304      	str	r3, [sp, #16]
 800880c:	e775      	b.n	80086fa <_dtoa_r+0xa0a>
 800880e:	f000 f9c3 	bl	8008b98 <__multadd>
 8008812:	4639      	mov	r1, r7
 8008814:	4680      	mov	r8, r0
 8008816:	2300      	movs	r3, #0
 8008818:	220a      	movs	r2, #10
 800881a:	4620      	mov	r0, r4
 800881c:	f000 f9bc 	bl	8008b98 <__multadd>
 8008820:	4607      	mov	r7, r0
 8008822:	e7f0      	b.n	8008806 <_dtoa_r+0xb16>
 8008824:	9b04      	ldr	r3, [sp, #16]
 8008826:	9301      	str	r3, [sp, #4]
 8008828:	9d00      	ldr	r5, [sp, #0]
 800882a:	4631      	mov	r1, r6
 800882c:	4650      	mov	r0, sl
 800882e:	f7ff f9d6 	bl	8007bde <quorem>
 8008832:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008836:	9b00      	ldr	r3, [sp, #0]
 8008838:	f805 9b01 	strb.w	r9, [r5], #1
 800883c:	1aea      	subs	r2, r5, r3
 800883e:	9b01      	ldr	r3, [sp, #4]
 8008840:	4293      	cmp	r3, r2
 8008842:	dd07      	ble.n	8008854 <_dtoa_r+0xb64>
 8008844:	4651      	mov	r1, sl
 8008846:	2300      	movs	r3, #0
 8008848:	220a      	movs	r2, #10
 800884a:	4620      	mov	r0, r4
 800884c:	f000 f9a4 	bl	8008b98 <__multadd>
 8008850:	4682      	mov	sl, r0
 8008852:	e7ea      	b.n	800882a <_dtoa_r+0xb3a>
 8008854:	9b01      	ldr	r3, [sp, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	bfc8      	it	gt
 800885a:	461d      	movgt	r5, r3
 800885c:	9b00      	ldr	r3, [sp, #0]
 800885e:	bfd8      	it	le
 8008860:	2501      	movle	r5, #1
 8008862:	441d      	add	r5, r3
 8008864:	f04f 0800 	mov.w	r8, #0
 8008868:	4651      	mov	r1, sl
 800886a:	2201      	movs	r2, #1
 800886c:	4620      	mov	r0, r4
 800886e:	f000 fb41 	bl	8008ef4 <__lshift>
 8008872:	4631      	mov	r1, r6
 8008874:	4682      	mov	sl, r0
 8008876:	f000 fba9 	bl	8008fcc <__mcmp>
 800887a:	2800      	cmp	r0, #0
 800887c:	dc96      	bgt.n	80087ac <_dtoa_r+0xabc>
 800887e:	d102      	bne.n	8008886 <_dtoa_r+0xb96>
 8008880:	f019 0f01 	tst.w	r9, #1
 8008884:	d192      	bne.n	80087ac <_dtoa_r+0xabc>
 8008886:	462b      	mov	r3, r5
 8008888:	461d      	mov	r5, r3
 800888a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800888e:	2a30      	cmp	r2, #48	; 0x30
 8008890:	d0fa      	beq.n	8008888 <_dtoa_r+0xb98>
 8008892:	e6dd      	b.n	8008650 <_dtoa_r+0x960>
 8008894:	9a00      	ldr	r2, [sp, #0]
 8008896:	429a      	cmp	r2, r3
 8008898:	d189      	bne.n	80087ae <_dtoa_r+0xabe>
 800889a:	f10b 0b01 	add.w	fp, fp, #1
 800889e:	2331      	movs	r3, #49	; 0x31
 80088a0:	e796      	b.n	80087d0 <_dtoa_r+0xae0>
 80088a2:	4b0a      	ldr	r3, [pc, #40]	; (80088cc <_dtoa_r+0xbdc>)
 80088a4:	f7ff ba99 	b.w	8007dda <_dtoa_r+0xea>
 80088a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f47f aa6d 	bne.w	8007d8a <_dtoa_r+0x9a>
 80088b0:	4b07      	ldr	r3, [pc, #28]	; (80088d0 <_dtoa_r+0xbe0>)
 80088b2:	f7ff ba92 	b.w	8007dda <_dtoa_r+0xea>
 80088b6:	9b01      	ldr	r3, [sp, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	dcb5      	bgt.n	8008828 <_dtoa_r+0xb38>
 80088bc:	9b07      	ldr	r3, [sp, #28]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	f73f aeb1 	bgt.w	8008626 <_dtoa_r+0x936>
 80088c4:	e7b0      	b.n	8008828 <_dtoa_r+0xb38>
 80088c6:	bf00      	nop
 80088c8:	0800ae98 	.word	0x0800ae98
 80088cc:	0800adf8 	.word	0x0800adf8
 80088d0:	0800ae1c 	.word	0x0800ae1c

080088d4 <_free_r>:
 80088d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80088d6:	2900      	cmp	r1, #0
 80088d8:	d044      	beq.n	8008964 <_free_r+0x90>
 80088da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088de:	9001      	str	r0, [sp, #4]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f1a1 0404 	sub.w	r4, r1, #4
 80088e6:	bfb8      	it	lt
 80088e8:	18e4      	addlt	r4, r4, r3
 80088ea:	f000 f8e7 	bl	8008abc <__malloc_lock>
 80088ee:	4a1e      	ldr	r2, [pc, #120]	; (8008968 <_free_r+0x94>)
 80088f0:	9801      	ldr	r0, [sp, #4]
 80088f2:	6813      	ldr	r3, [r2, #0]
 80088f4:	b933      	cbnz	r3, 8008904 <_free_r+0x30>
 80088f6:	6063      	str	r3, [r4, #4]
 80088f8:	6014      	str	r4, [r2, #0]
 80088fa:	b003      	add	sp, #12
 80088fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008900:	f000 b8e2 	b.w	8008ac8 <__malloc_unlock>
 8008904:	42a3      	cmp	r3, r4
 8008906:	d908      	bls.n	800891a <_free_r+0x46>
 8008908:	6825      	ldr	r5, [r4, #0]
 800890a:	1961      	adds	r1, r4, r5
 800890c:	428b      	cmp	r3, r1
 800890e:	bf01      	itttt	eq
 8008910:	6819      	ldreq	r1, [r3, #0]
 8008912:	685b      	ldreq	r3, [r3, #4]
 8008914:	1949      	addeq	r1, r1, r5
 8008916:	6021      	streq	r1, [r4, #0]
 8008918:	e7ed      	b.n	80088f6 <_free_r+0x22>
 800891a:	461a      	mov	r2, r3
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	b10b      	cbz	r3, 8008924 <_free_r+0x50>
 8008920:	42a3      	cmp	r3, r4
 8008922:	d9fa      	bls.n	800891a <_free_r+0x46>
 8008924:	6811      	ldr	r1, [r2, #0]
 8008926:	1855      	adds	r5, r2, r1
 8008928:	42a5      	cmp	r5, r4
 800892a:	d10b      	bne.n	8008944 <_free_r+0x70>
 800892c:	6824      	ldr	r4, [r4, #0]
 800892e:	4421      	add	r1, r4
 8008930:	1854      	adds	r4, r2, r1
 8008932:	42a3      	cmp	r3, r4
 8008934:	6011      	str	r1, [r2, #0]
 8008936:	d1e0      	bne.n	80088fa <_free_r+0x26>
 8008938:	681c      	ldr	r4, [r3, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	6053      	str	r3, [r2, #4]
 800893e:	440c      	add	r4, r1
 8008940:	6014      	str	r4, [r2, #0]
 8008942:	e7da      	b.n	80088fa <_free_r+0x26>
 8008944:	d902      	bls.n	800894c <_free_r+0x78>
 8008946:	230c      	movs	r3, #12
 8008948:	6003      	str	r3, [r0, #0]
 800894a:	e7d6      	b.n	80088fa <_free_r+0x26>
 800894c:	6825      	ldr	r5, [r4, #0]
 800894e:	1961      	adds	r1, r4, r5
 8008950:	428b      	cmp	r3, r1
 8008952:	bf04      	itt	eq
 8008954:	6819      	ldreq	r1, [r3, #0]
 8008956:	685b      	ldreq	r3, [r3, #4]
 8008958:	6063      	str	r3, [r4, #4]
 800895a:	bf04      	itt	eq
 800895c:	1949      	addeq	r1, r1, r5
 800895e:	6021      	streq	r1, [r4, #0]
 8008960:	6054      	str	r4, [r2, #4]
 8008962:	e7ca      	b.n	80088fa <_free_r+0x26>
 8008964:	b003      	add	sp, #12
 8008966:	bd30      	pop	{r4, r5, pc}
 8008968:	200004a4 	.word	0x200004a4

0800896c <malloc>:
 800896c:	4b02      	ldr	r3, [pc, #8]	; (8008978 <malloc+0xc>)
 800896e:	4601      	mov	r1, r0
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	f000 b823 	b.w	80089bc <_malloc_r>
 8008976:	bf00      	nop
 8008978:	20000064 	.word	0x20000064

0800897c <sbrk_aligned>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	4e0e      	ldr	r6, [pc, #56]	; (80089b8 <sbrk_aligned+0x3c>)
 8008980:	460c      	mov	r4, r1
 8008982:	6831      	ldr	r1, [r6, #0]
 8008984:	4605      	mov	r5, r0
 8008986:	b911      	cbnz	r1, 800898e <sbrk_aligned+0x12>
 8008988:	f000 fe96 	bl	80096b8 <_sbrk_r>
 800898c:	6030      	str	r0, [r6, #0]
 800898e:	4621      	mov	r1, r4
 8008990:	4628      	mov	r0, r5
 8008992:	f000 fe91 	bl	80096b8 <_sbrk_r>
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	d00a      	beq.n	80089b0 <sbrk_aligned+0x34>
 800899a:	1cc4      	adds	r4, r0, #3
 800899c:	f024 0403 	bic.w	r4, r4, #3
 80089a0:	42a0      	cmp	r0, r4
 80089a2:	d007      	beq.n	80089b4 <sbrk_aligned+0x38>
 80089a4:	1a21      	subs	r1, r4, r0
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 fe86 	bl	80096b8 <_sbrk_r>
 80089ac:	3001      	adds	r0, #1
 80089ae:	d101      	bne.n	80089b4 <sbrk_aligned+0x38>
 80089b0:	f04f 34ff 	mov.w	r4, #4294967295
 80089b4:	4620      	mov	r0, r4
 80089b6:	bd70      	pop	{r4, r5, r6, pc}
 80089b8:	200004a8 	.word	0x200004a8

080089bc <_malloc_r>:
 80089bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089c0:	1ccd      	adds	r5, r1, #3
 80089c2:	f025 0503 	bic.w	r5, r5, #3
 80089c6:	3508      	adds	r5, #8
 80089c8:	2d0c      	cmp	r5, #12
 80089ca:	bf38      	it	cc
 80089cc:	250c      	movcc	r5, #12
 80089ce:	2d00      	cmp	r5, #0
 80089d0:	4607      	mov	r7, r0
 80089d2:	db01      	blt.n	80089d8 <_malloc_r+0x1c>
 80089d4:	42a9      	cmp	r1, r5
 80089d6:	d905      	bls.n	80089e4 <_malloc_r+0x28>
 80089d8:	230c      	movs	r3, #12
 80089da:	603b      	str	r3, [r7, #0]
 80089dc:	2600      	movs	r6, #0
 80089de:	4630      	mov	r0, r6
 80089e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008ab8 <_malloc_r+0xfc>
 80089e8:	f000 f868 	bl	8008abc <__malloc_lock>
 80089ec:	f8d8 3000 	ldr.w	r3, [r8]
 80089f0:	461c      	mov	r4, r3
 80089f2:	bb5c      	cbnz	r4, 8008a4c <_malloc_r+0x90>
 80089f4:	4629      	mov	r1, r5
 80089f6:	4638      	mov	r0, r7
 80089f8:	f7ff ffc0 	bl	800897c <sbrk_aligned>
 80089fc:	1c43      	adds	r3, r0, #1
 80089fe:	4604      	mov	r4, r0
 8008a00:	d155      	bne.n	8008aae <_malloc_r+0xf2>
 8008a02:	f8d8 4000 	ldr.w	r4, [r8]
 8008a06:	4626      	mov	r6, r4
 8008a08:	2e00      	cmp	r6, #0
 8008a0a:	d145      	bne.n	8008a98 <_malloc_r+0xdc>
 8008a0c:	2c00      	cmp	r4, #0
 8008a0e:	d048      	beq.n	8008aa2 <_malloc_r+0xe6>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	4631      	mov	r1, r6
 8008a14:	4638      	mov	r0, r7
 8008a16:	eb04 0903 	add.w	r9, r4, r3
 8008a1a:	f000 fe4d 	bl	80096b8 <_sbrk_r>
 8008a1e:	4581      	cmp	r9, r0
 8008a20:	d13f      	bne.n	8008aa2 <_malloc_r+0xe6>
 8008a22:	6821      	ldr	r1, [r4, #0]
 8008a24:	1a6d      	subs	r5, r5, r1
 8008a26:	4629      	mov	r1, r5
 8008a28:	4638      	mov	r0, r7
 8008a2a:	f7ff ffa7 	bl	800897c <sbrk_aligned>
 8008a2e:	3001      	adds	r0, #1
 8008a30:	d037      	beq.n	8008aa2 <_malloc_r+0xe6>
 8008a32:	6823      	ldr	r3, [r4, #0]
 8008a34:	442b      	add	r3, r5
 8008a36:	6023      	str	r3, [r4, #0]
 8008a38:	f8d8 3000 	ldr.w	r3, [r8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d038      	beq.n	8008ab2 <_malloc_r+0xf6>
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	42a2      	cmp	r2, r4
 8008a44:	d12b      	bne.n	8008a9e <_malloc_r+0xe2>
 8008a46:	2200      	movs	r2, #0
 8008a48:	605a      	str	r2, [r3, #4]
 8008a4a:	e00f      	b.n	8008a6c <_malloc_r+0xb0>
 8008a4c:	6822      	ldr	r2, [r4, #0]
 8008a4e:	1b52      	subs	r2, r2, r5
 8008a50:	d41f      	bmi.n	8008a92 <_malloc_r+0xd6>
 8008a52:	2a0b      	cmp	r2, #11
 8008a54:	d917      	bls.n	8008a86 <_malloc_r+0xca>
 8008a56:	1961      	adds	r1, r4, r5
 8008a58:	42a3      	cmp	r3, r4
 8008a5a:	6025      	str	r5, [r4, #0]
 8008a5c:	bf18      	it	ne
 8008a5e:	6059      	strne	r1, [r3, #4]
 8008a60:	6863      	ldr	r3, [r4, #4]
 8008a62:	bf08      	it	eq
 8008a64:	f8c8 1000 	streq.w	r1, [r8]
 8008a68:	5162      	str	r2, [r4, r5]
 8008a6a:	604b      	str	r3, [r1, #4]
 8008a6c:	4638      	mov	r0, r7
 8008a6e:	f104 060b 	add.w	r6, r4, #11
 8008a72:	f000 f829 	bl	8008ac8 <__malloc_unlock>
 8008a76:	f026 0607 	bic.w	r6, r6, #7
 8008a7a:	1d23      	adds	r3, r4, #4
 8008a7c:	1af2      	subs	r2, r6, r3
 8008a7e:	d0ae      	beq.n	80089de <_malloc_r+0x22>
 8008a80:	1b9b      	subs	r3, r3, r6
 8008a82:	50a3      	str	r3, [r4, r2]
 8008a84:	e7ab      	b.n	80089de <_malloc_r+0x22>
 8008a86:	42a3      	cmp	r3, r4
 8008a88:	6862      	ldr	r2, [r4, #4]
 8008a8a:	d1dd      	bne.n	8008a48 <_malloc_r+0x8c>
 8008a8c:	f8c8 2000 	str.w	r2, [r8]
 8008a90:	e7ec      	b.n	8008a6c <_malloc_r+0xb0>
 8008a92:	4623      	mov	r3, r4
 8008a94:	6864      	ldr	r4, [r4, #4]
 8008a96:	e7ac      	b.n	80089f2 <_malloc_r+0x36>
 8008a98:	4634      	mov	r4, r6
 8008a9a:	6876      	ldr	r6, [r6, #4]
 8008a9c:	e7b4      	b.n	8008a08 <_malloc_r+0x4c>
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	e7cc      	b.n	8008a3c <_malloc_r+0x80>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	603b      	str	r3, [r7, #0]
 8008aa6:	4638      	mov	r0, r7
 8008aa8:	f000 f80e 	bl	8008ac8 <__malloc_unlock>
 8008aac:	e797      	b.n	80089de <_malloc_r+0x22>
 8008aae:	6025      	str	r5, [r4, #0]
 8008ab0:	e7dc      	b.n	8008a6c <_malloc_r+0xb0>
 8008ab2:	605b      	str	r3, [r3, #4]
 8008ab4:	deff      	udf	#255	; 0xff
 8008ab6:	bf00      	nop
 8008ab8:	200004a4 	.word	0x200004a4

08008abc <__malloc_lock>:
 8008abc:	4801      	ldr	r0, [pc, #4]	; (8008ac4 <__malloc_lock+0x8>)
 8008abe:	f7ff b88c 	b.w	8007bda <__retarget_lock_acquire_recursive>
 8008ac2:	bf00      	nop
 8008ac4:	200004a0 	.word	0x200004a0

08008ac8 <__malloc_unlock>:
 8008ac8:	4801      	ldr	r0, [pc, #4]	; (8008ad0 <__malloc_unlock+0x8>)
 8008aca:	f7ff b887 	b.w	8007bdc <__retarget_lock_release_recursive>
 8008ace:	bf00      	nop
 8008ad0:	200004a0 	.word	0x200004a0

08008ad4 <_Balloc>:
 8008ad4:	b570      	push	{r4, r5, r6, lr}
 8008ad6:	69c6      	ldr	r6, [r0, #28]
 8008ad8:	4604      	mov	r4, r0
 8008ada:	460d      	mov	r5, r1
 8008adc:	b976      	cbnz	r6, 8008afc <_Balloc+0x28>
 8008ade:	2010      	movs	r0, #16
 8008ae0:	f7ff ff44 	bl	800896c <malloc>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	61e0      	str	r0, [r4, #28]
 8008ae8:	b920      	cbnz	r0, 8008af4 <_Balloc+0x20>
 8008aea:	4b18      	ldr	r3, [pc, #96]	; (8008b4c <_Balloc+0x78>)
 8008aec:	4818      	ldr	r0, [pc, #96]	; (8008b50 <_Balloc+0x7c>)
 8008aee:	216b      	movs	r1, #107	; 0x6b
 8008af0:	f000 fe00 	bl	80096f4 <__assert_func>
 8008af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008af8:	6006      	str	r6, [r0, #0]
 8008afa:	60c6      	str	r6, [r0, #12]
 8008afc:	69e6      	ldr	r6, [r4, #28]
 8008afe:	68f3      	ldr	r3, [r6, #12]
 8008b00:	b183      	cbz	r3, 8008b24 <_Balloc+0x50>
 8008b02:	69e3      	ldr	r3, [r4, #28]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008b0a:	b9b8      	cbnz	r0, 8008b3c <_Balloc+0x68>
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	fa01 f605 	lsl.w	r6, r1, r5
 8008b12:	1d72      	adds	r2, r6, #5
 8008b14:	0092      	lsls	r2, r2, #2
 8008b16:	4620      	mov	r0, r4
 8008b18:	f000 fe0a 	bl	8009730 <_calloc_r>
 8008b1c:	b160      	cbz	r0, 8008b38 <_Balloc+0x64>
 8008b1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008b22:	e00e      	b.n	8008b42 <_Balloc+0x6e>
 8008b24:	2221      	movs	r2, #33	; 0x21
 8008b26:	2104      	movs	r1, #4
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fe01 	bl	8009730 <_calloc_r>
 8008b2e:	69e3      	ldr	r3, [r4, #28]
 8008b30:	60f0      	str	r0, [r6, #12]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e4      	bne.n	8008b02 <_Balloc+0x2e>
 8008b38:	2000      	movs	r0, #0
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}
 8008b3c:	6802      	ldr	r2, [r0, #0]
 8008b3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008b42:	2300      	movs	r3, #0
 8008b44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b48:	e7f7      	b.n	8008b3a <_Balloc+0x66>
 8008b4a:	bf00      	nop
 8008b4c:	0800ae29 	.word	0x0800ae29
 8008b50:	0800aea9 	.word	0x0800aea9

08008b54 <_Bfree>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	69c6      	ldr	r6, [r0, #28]
 8008b58:	4605      	mov	r5, r0
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	b976      	cbnz	r6, 8008b7c <_Bfree+0x28>
 8008b5e:	2010      	movs	r0, #16
 8008b60:	f7ff ff04 	bl	800896c <malloc>
 8008b64:	4602      	mov	r2, r0
 8008b66:	61e8      	str	r0, [r5, #28]
 8008b68:	b920      	cbnz	r0, 8008b74 <_Bfree+0x20>
 8008b6a:	4b09      	ldr	r3, [pc, #36]	; (8008b90 <_Bfree+0x3c>)
 8008b6c:	4809      	ldr	r0, [pc, #36]	; (8008b94 <_Bfree+0x40>)
 8008b6e:	218f      	movs	r1, #143	; 0x8f
 8008b70:	f000 fdc0 	bl	80096f4 <__assert_func>
 8008b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b78:	6006      	str	r6, [r0, #0]
 8008b7a:	60c6      	str	r6, [r0, #12]
 8008b7c:	b13c      	cbz	r4, 8008b8e <_Bfree+0x3a>
 8008b7e:	69eb      	ldr	r3, [r5, #28]
 8008b80:	6862      	ldr	r2, [r4, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b88:	6021      	str	r1, [r4, #0]
 8008b8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b8e:	bd70      	pop	{r4, r5, r6, pc}
 8008b90:	0800ae29 	.word	0x0800ae29
 8008b94:	0800aea9 	.word	0x0800aea9

08008b98 <__multadd>:
 8008b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9c:	690d      	ldr	r5, [r1, #16]
 8008b9e:	4607      	mov	r7, r0
 8008ba0:	460c      	mov	r4, r1
 8008ba2:	461e      	mov	r6, r3
 8008ba4:	f101 0c14 	add.w	ip, r1, #20
 8008ba8:	2000      	movs	r0, #0
 8008baa:	f8dc 3000 	ldr.w	r3, [ip]
 8008bae:	b299      	uxth	r1, r3
 8008bb0:	fb02 6101 	mla	r1, r2, r1, r6
 8008bb4:	0c1e      	lsrs	r6, r3, #16
 8008bb6:	0c0b      	lsrs	r3, r1, #16
 8008bb8:	fb02 3306 	mla	r3, r2, r6, r3
 8008bbc:	b289      	uxth	r1, r1
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008bc4:	4285      	cmp	r5, r0
 8008bc6:	f84c 1b04 	str.w	r1, [ip], #4
 8008bca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008bce:	dcec      	bgt.n	8008baa <__multadd+0x12>
 8008bd0:	b30e      	cbz	r6, 8008c16 <__multadd+0x7e>
 8008bd2:	68a3      	ldr	r3, [r4, #8]
 8008bd4:	42ab      	cmp	r3, r5
 8008bd6:	dc19      	bgt.n	8008c0c <__multadd+0x74>
 8008bd8:	6861      	ldr	r1, [r4, #4]
 8008bda:	4638      	mov	r0, r7
 8008bdc:	3101      	adds	r1, #1
 8008bde:	f7ff ff79 	bl	8008ad4 <_Balloc>
 8008be2:	4680      	mov	r8, r0
 8008be4:	b928      	cbnz	r0, 8008bf2 <__multadd+0x5a>
 8008be6:	4602      	mov	r2, r0
 8008be8:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <__multadd+0x84>)
 8008bea:	480d      	ldr	r0, [pc, #52]	; (8008c20 <__multadd+0x88>)
 8008bec:	21ba      	movs	r1, #186	; 0xba
 8008bee:	f000 fd81 	bl	80096f4 <__assert_func>
 8008bf2:	6922      	ldr	r2, [r4, #16]
 8008bf4:	3202      	adds	r2, #2
 8008bf6:	f104 010c 	add.w	r1, r4, #12
 8008bfa:	0092      	lsls	r2, r2, #2
 8008bfc:	300c      	adds	r0, #12
 8008bfe:	f000 fd6b 	bl	80096d8 <memcpy>
 8008c02:	4621      	mov	r1, r4
 8008c04:	4638      	mov	r0, r7
 8008c06:	f7ff ffa5 	bl	8008b54 <_Bfree>
 8008c0a:	4644      	mov	r4, r8
 8008c0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c10:	3501      	adds	r5, #1
 8008c12:	615e      	str	r6, [r3, #20]
 8008c14:	6125      	str	r5, [r4, #16]
 8008c16:	4620      	mov	r0, r4
 8008c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c1c:	0800ae98 	.word	0x0800ae98
 8008c20:	0800aea9 	.word	0x0800aea9

08008c24 <__hi0bits>:
 8008c24:	0c03      	lsrs	r3, r0, #16
 8008c26:	041b      	lsls	r3, r3, #16
 8008c28:	b9d3      	cbnz	r3, 8008c60 <__hi0bits+0x3c>
 8008c2a:	0400      	lsls	r0, r0, #16
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008c32:	bf04      	itt	eq
 8008c34:	0200      	lsleq	r0, r0, #8
 8008c36:	3308      	addeq	r3, #8
 8008c38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008c3c:	bf04      	itt	eq
 8008c3e:	0100      	lsleq	r0, r0, #4
 8008c40:	3304      	addeq	r3, #4
 8008c42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008c46:	bf04      	itt	eq
 8008c48:	0080      	lsleq	r0, r0, #2
 8008c4a:	3302      	addeq	r3, #2
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	db05      	blt.n	8008c5c <__hi0bits+0x38>
 8008c50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008c54:	f103 0301 	add.w	r3, r3, #1
 8008c58:	bf08      	it	eq
 8008c5a:	2320      	moveq	r3, #32
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	4770      	bx	lr
 8008c60:	2300      	movs	r3, #0
 8008c62:	e7e4      	b.n	8008c2e <__hi0bits+0xa>

08008c64 <__lo0bits>:
 8008c64:	6803      	ldr	r3, [r0, #0]
 8008c66:	f013 0207 	ands.w	r2, r3, #7
 8008c6a:	d00c      	beq.n	8008c86 <__lo0bits+0x22>
 8008c6c:	07d9      	lsls	r1, r3, #31
 8008c6e:	d422      	bmi.n	8008cb6 <__lo0bits+0x52>
 8008c70:	079a      	lsls	r2, r3, #30
 8008c72:	bf49      	itett	mi
 8008c74:	085b      	lsrmi	r3, r3, #1
 8008c76:	089b      	lsrpl	r3, r3, #2
 8008c78:	6003      	strmi	r3, [r0, #0]
 8008c7a:	2201      	movmi	r2, #1
 8008c7c:	bf5c      	itt	pl
 8008c7e:	6003      	strpl	r3, [r0, #0]
 8008c80:	2202      	movpl	r2, #2
 8008c82:	4610      	mov	r0, r2
 8008c84:	4770      	bx	lr
 8008c86:	b299      	uxth	r1, r3
 8008c88:	b909      	cbnz	r1, 8008c8e <__lo0bits+0x2a>
 8008c8a:	0c1b      	lsrs	r3, r3, #16
 8008c8c:	2210      	movs	r2, #16
 8008c8e:	b2d9      	uxtb	r1, r3
 8008c90:	b909      	cbnz	r1, 8008c96 <__lo0bits+0x32>
 8008c92:	3208      	adds	r2, #8
 8008c94:	0a1b      	lsrs	r3, r3, #8
 8008c96:	0719      	lsls	r1, r3, #28
 8008c98:	bf04      	itt	eq
 8008c9a:	091b      	lsreq	r3, r3, #4
 8008c9c:	3204      	addeq	r2, #4
 8008c9e:	0799      	lsls	r1, r3, #30
 8008ca0:	bf04      	itt	eq
 8008ca2:	089b      	lsreq	r3, r3, #2
 8008ca4:	3202      	addeq	r2, #2
 8008ca6:	07d9      	lsls	r1, r3, #31
 8008ca8:	d403      	bmi.n	8008cb2 <__lo0bits+0x4e>
 8008caa:	085b      	lsrs	r3, r3, #1
 8008cac:	f102 0201 	add.w	r2, r2, #1
 8008cb0:	d003      	beq.n	8008cba <__lo0bits+0x56>
 8008cb2:	6003      	str	r3, [r0, #0]
 8008cb4:	e7e5      	b.n	8008c82 <__lo0bits+0x1e>
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	e7e3      	b.n	8008c82 <__lo0bits+0x1e>
 8008cba:	2220      	movs	r2, #32
 8008cbc:	e7e1      	b.n	8008c82 <__lo0bits+0x1e>
	...

08008cc0 <__i2b>:
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	2101      	movs	r1, #1
 8008cc6:	f7ff ff05 	bl	8008ad4 <_Balloc>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	b928      	cbnz	r0, 8008cda <__i2b+0x1a>
 8008cce:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <__i2b+0x24>)
 8008cd0:	4805      	ldr	r0, [pc, #20]	; (8008ce8 <__i2b+0x28>)
 8008cd2:	f240 1145 	movw	r1, #325	; 0x145
 8008cd6:	f000 fd0d 	bl	80096f4 <__assert_func>
 8008cda:	2301      	movs	r3, #1
 8008cdc:	6144      	str	r4, [r0, #20]
 8008cde:	6103      	str	r3, [r0, #16]
 8008ce0:	bd10      	pop	{r4, pc}
 8008ce2:	bf00      	nop
 8008ce4:	0800ae98 	.word	0x0800ae98
 8008ce8:	0800aea9 	.word	0x0800aea9

08008cec <__multiply>:
 8008cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	4691      	mov	r9, r2
 8008cf2:	690a      	ldr	r2, [r1, #16]
 8008cf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	bfb8      	it	lt
 8008cfc:	460b      	movlt	r3, r1
 8008cfe:	460c      	mov	r4, r1
 8008d00:	bfbc      	itt	lt
 8008d02:	464c      	movlt	r4, r9
 8008d04:	4699      	movlt	r9, r3
 8008d06:	6927      	ldr	r7, [r4, #16]
 8008d08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008d0c:	68a3      	ldr	r3, [r4, #8]
 8008d0e:	6861      	ldr	r1, [r4, #4]
 8008d10:	eb07 060a 	add.w	r6, r7, sl
 8008d14:	42b3      	cmp	r3, r6
 8008d16:	b085      	sub	sp, #20
 8008d18:	bfb8      	it	lt
 8008d1a:	3101      	addlt	r1, #1
 8008d1c:	f7ff feda 	bl	8008ad4 <_Balloc>
 8008d20:	b930      	cbnz	r0, 8008d30 <__multiply+0x44>
 8008d22:	4602      	mov	r2, r0
 8008d24:	4b44      	ldr	r3, [pc, #272]	; (8008e38 <__multiply+0x14c>)
 8008d26:	4845      	ldr	r0, [pc, #276]	; (8008e3c <__multiply+0x150>)
 8008d28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008d2c:	f000 fce2 	bl	80096f4 <__assert_func>
 8008d30:	f100 0514 	add.w	r5, r0, #20
 8008d34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d38:	462b      	mov	r3, r5
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4543      	cmp	r3, r8
 8008d3e:	d321      	bcc.n	8008d84 <__multiply+0x98>
 8008d40:	f104 0314 	add.w	r3, r4, #20
 8008d44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008d48:	f109 0314 	add.w	r3, r9, #20
 8008d4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008d50:	9202      	str	r2, [sp, #8]
 8008d52:	1b3a      	subs	r2, r7, r4
 8008d54:	3a15      	subs	r2, #21
 8008d56:	f022 0203 	bic.w	r2, r2, #3
 8008d5a:	3204      	adds	r2, #4
 8008d5c:	f104 0115 	add.w	r1, r4, #21
 8008d60:	428f      	cmp	r7, r1
 8008d62:	bf38      	it	cc
 8008d64:	2204      	movcc	r2, #4
 8008d66:	9201      	str	r2, [sp, #4]
 8008d68:	9a02      	ldr	r2, [sp, #8]
 8008d6a:	9303      	str	r3, [sp, #12]
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d80c      	bhi.n	8008d8a <__multiply+0x9e>
 8008d70:	2e00      	cmp	r6, #0
 8008d72:	dd03      	ble.n	8008d7c <__multiply+0x90>
 8008d74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d05b      	beq.n	8008e34 <__multiply+0x148>
 8008d7c:	6106      	str	r6, [r0, #16]
 8008d7e:	b005      	add	sp, #20
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d84:	f843 2b04 	str.w	r2, [r3], #4
 8008d88:	e7d8      	b.n	8008d3c <__multiply+0x50>
 8008d8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d8e:	f1ba 0f00 	cmp.w	sl, #0
 8008d92:	d024      	beq.n	8008dde <__multiply+0xf2>
 8008d94:	f104 0e14 	add.w	lr, r4, #20
 8008d98:	46a9      	mov	r9, r5
 8008d9a:	f04f 0c00 	mov.w	ip, #0
 8008d9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008da2:	f8d9 1000 	ldr.w	r1, [r9]
 8008da6:	fa1f fb82 	uxth.w	fp, r2
 8008daa:	b289      	uxth	r1, r1
 8008dac:	fb0a 110b 	mla	r1, sl, fp, r1
 8008db0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008db4:	f8d9 2000 	ldr.w	r2, [r9]
 8008db8:	4461      	add	r1, ip
 8008dba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008dbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8008dc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008dc6:	b289      	uxth	r1, r1
 8008dc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008dcc:	4577      	cmp	r7, lr
 8008dce:	f849 1b04 	str.w	r1, [r9], #4
 8008dd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008dd6:	d8e2      	bhi.n	8008d9e <__multiply+0xb2>
 8008dd8:	9a01      	ldr	r2, [sp, #4]
 8008dda:	f845 c002 	str.w	ip, [r5, r2]
 8008dde:	9a03      	ldr	r2, [sp, #12]
 8008de0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008de4:	3304      	adds	r3, #4
 8008de6:	f1b9 0f00 	cmp.w	r9, #0
 8008dea:	d021      	beq.n	8008e30 <__multiply+0x144>
 8008dec:	6829      	ldr	r1, [r5, #0]
 8008dee:	f104 0c14 	add.w	ip, r4, #20
 8008df2:	46ae      	mov	lr, r5
 8008df4:	f04f 0a00 	mov.w	sl, #0
 8008df8:	f8bc b000 	ldrh.w	fp, [ip]
 8008dfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008e00:	fb09 220b 	mla	r2, r9, fp, r2
 8008e04:	4452      	add	r2, sl
 8008e06:	b289      	uxth	r1, r1
 8008e08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008e0c:	f84e 1b04 	str.w	r1, [lr], #4
 8008e10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008e14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e18:	f8be 1000 	ldrh.w	r1, [lr]
 8008e1c:	fb09 110a 	mla	r1, r9, sl, r1
 8008e20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008e24:	4567      	cmp	r7, ip
 8008e26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008e2a:	d8e5      	bhi.n	8008df8 <__multiply+0x10c>
 8008e2c:	9a01      	ldr	r2, [sp, #4]
 8008e2e:	50a9      	str	r1, [r5, r2]
 8008e30:	3504      	adds	r5, #4
 8008e32:	e799      	b.n	8008d68 <__multiply+0x7c>
 8008e34:	3e01      	subs	r6, #1
 8008e36:	e79b      	b.n	8008d70 <__multiply+0x84>
 8008e38:	0800ae98 	.word	0x0800ae98
 8008e3c:	0800aea9 	.word	0x0800aea9

08008e40 <__pow5mult>:
 8008e40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e44:	4615      	mov	r5, r2
 8008e46:	f012 0203 	ands.w	r2, r2, #3
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	460f      	mov	r7, r1
 8008e4e:	d007      	beq.n	8008e60 <__pow5mult+0x20>
 8008e50:	4c25      	ldr	r4, [pc, #148]	; (8008ee8 <__pow5mult+0xa8>)
 8008e52:	3a01      	subs	r2, #1
 8008e54:	2300      	movs	r3, #0
 8008e56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e5a:	f7ff fe9d 	bl	8008b98 <__multadd>
 8008e5e:	4607      	mov	r7, r0
 8008e60:	10ad      	asrs	r5, r5, #2
 8008e62:	d03d      	beq.n	8008ee0 <__pow5mult+0xa0>
 8008e64:	69f4      	ldr	r4, [r6, #28]
 8008e66:	b97c      	cbnz	r4, 8008e88 <__pow5mult+0x48>
 8008e68:	2010      	movs	r0, #16
 8008e6a:	f7ff fd7f 	bl	800896c <malloc>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	61f0      	str	r0, [r6, #28]
 8008e72:	b928      	cbnz	r0, 8008e80 <__pow5mult+0x40>
 8008e74:	4b1d      	ldr	r3, [pc, #116]	; (8008eec <__pow5mult+0xac>)
 8008e76:	481e      	ldr	r0, [pc, #120]	; (8008ef0 <__pow5mult+0xb0>)
 8008e78:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008e7c:	f000 fc3a 	bl	80096f4 <__assert_func>
 8008e80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e84:	6004      	str	r4, [r0, #0]
 8008e86:	60c4      	str	r4, [r0, #12]
 8008e88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008e8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e90:	b94c      	cbnz	r4, 8008ea6 <__pow5mult+0x66>
 8008e92:	f240 2171 	movw	r1, #625	; 0x271
 8008e96:	4630      	mov	r0, r6
 8008e98:	f7ff ff12 	bl	8008cc0 <__i2b>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	6003      	str	r3, [r0, #0]
 8008ea6:	f04f 0900 	mov.w	r9, #0
 8008eaa:	07eb      	lsls	r3, r5, #31
 8008eac:	d50a      	bpl.n	8008ec4 <__pow5mult+0x84>
 8008eae:	4639      	mov	r1, r7
 8008eb0:	4622      	mov	r2, r4
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	f7ff ff1a 	bl	8008cec <__multiply>
 8008eb8:	4639      	mov	r1, r7
 8008eba:	4680      	mov	r8, r0
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	f7ff fe49 	bl	8008b54 <_Bfree>
 8008ec2:	4647      	mov	r7, r8
 8008ec4:	106d      	asrs	r5, r5, #1
 8008ec6:	d00b      	beq.n	8008ee0 <__pow5mult+0xa0>
 8008ec8:	6820      	ldr	r0, [r4, #0]
 8008eca:	b938      	cbnz	r0, 8008edc <__pow5mult+0x9c>
 8008ecc:	4622      	mov	r2, r4
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4630      	mov	r0, r6
 8008ed2:	f7ff ff0b 	bl	8008cec <__multiply>
 8008ed6:	6020      	str	r0, [r4, #0]
 8008ed8:	f8c0 9000 	str.w	r9, [r0]
 8008edc:	4604      	mov	r4, r0
 8008ede:	e7e4      	b.n	8008eaa <__pow5mult+0x6a>
 8008ee0:	4638      	mov	r0, r7
 8008ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ee6:	bf00      	nop
 8008ee8:	0800aff8 	.word	0x0800aff8
 8008eec:	0800ae29 	.word	0x0800ae29
 8008ef0:	0800aea9 	.word	0x0800aea9

08008ef4 <__lshift>:
 8008ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef8:	460c      	mov	r4, r1
 8008efa:	6849      	ldr	r1, [r1, #4]
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008f02:	68a3      	ldr	r3, [r4, #8]
 8008f04:	4607      	mov	r7, r0
 8008f06:	4691      	mov	r9, r2
 8008f08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f0c:	f108 0601 	add.w	r6, r8, #1
 8008f10:	42b3      	cmp	r3, r6
 8008f12:	db0b      	blt.n	8008f2c <__lshift+0x38>
 8008f14:	4638      	mov	r0, r7
 8008f16:	f7ff fddd 	bl	8008ad4 <_Balloc>
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	b948      	cbnz	r0, 8008f32 <__lshift+0x3e>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	4b28      	ldr	r3, [pc, #160]	; (8008fc4 <__lshift+0xd0>)
 8008f22:	4829      	ldr	r0, [pc, #164]	; (8008fc8 <__lshift+0xd4>)
 8008f24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008f28:	f000 fbe4 	bl	80096f4 <__assert_func>
 8008f2c:	3101      	adds	r1, #1
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	e7ee      	b.n	8008f10 <__lshift+0x1c>
 8008f32:	2300      	movs	r3, #0
 8008f34:	f100 0114 	add.w	r1, r0, #20
 8008f38:	f100 0210 	add.w	r2, r0, #16
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	4553      	cmp	r3, sl
 8008f40:	db33      	blt.n	8008faa <__lshift+0xb6>
 8008f42:	6920      	ldr	r0, [r4, #16]
 8008f44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f48:	f104 0314 	add.w	r3, r4, #20
 8008f4c:	f019 091f 	ands.w	r9, r9, #31
 8008f50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f58:	d02b      	beq.n	8008fb2 <__lshift+0xbe>
 8008f5a:	f1c9 0e20 	rsb	lr, r9, #32
 8008f5e:	468a      	mov	sl, r1
 8008f60:	2200      	movs	r2, #0
 8008f62:	6818      	ldr	r0, [r3, #0]
 8008f64:	fa00 f009 	lsl.w	r0, r0, r9
 8008f68:	4310      	orrs	r0, r2
 8008f6a:	f84a 0b04 	str.w	r0, [sl], #4
 8008f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f72:	459c      	cmp	ip, r3
 8008f74:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f78:	d8f3      	bhi.n	8008f62 <__lshift+0x6e>
 8008f7a:	ebac 0304 	sub.w	r3, ip, r4
 8008f7e:	3b15      	subs	r3, #21
 8008f80:	f023 0303 	bic.w	r3, r3, #3
 8008f84:	3304      	adds	r3, #4
 8008f86:	f104 0015 	add.w	r0, r4, #21
 8008f8a:	4584      	cmp	ip, r0
 8008f8c:	bf38      	it	cc
 8008f8e:	2304      	movcc	r3, #4
 8008f90:	50ca      	str	r2, [r1, r3]
 8008f92:	b10a      	cbz	r2, 8008f98 <__lshift+0xa4>
 8008f94:	f108 0602 	add.w	r6, r8, #2
 8008f98:	3e01      	subs	r6, #1
 8008f9a:	4638      	mov	r0, r7
 8008f9c:	612e      	str	r6, [r5, #16]
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	f7ff fdd8 	bl	8008b54 <_Bfree>
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008faa:	f842 0f04 	str.w	r0, [r2, #4]!
 8008fae:	3301      	adds	r3, #1
 8008fb0:	e7c5      	b.n	8008f3e <__lshift+0x4a>
 8008fb2:	3904      	subs	r1, #4
 8008fb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fb8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fbc:	459c      	cmp	ip, r3
 8008fbe:	d8f9      	bhi.n	8008fb4 <__lshift+0xc0>
 8008fc0:	e7ea      	b.n	8008f98 <__lshift+0xa4>
 8008fc2:	bf00      	nop
 8008fc4:	0800ae98 	.word	0x0800ae98
 8008fc8:	0800aea9 	.word	0x0800aea9

08008fcc <__mcmp>:
 8008fcc:	b530      	push	{r4, r5, lr}
 8008fce:	6902      	ldr	r2, [r0, #16]
 8008fd0:	690c      	ldr	r4, [r1, #16]
 8008fd2:	1b12      	subs	r2, r2, r4
 8008fd4:	d10e      	bne.n	8008ff4 <__mcmp+0x28>
 8008fd6:	f100 0314 	add.w	r3, r0, #20
 8008fda:	3114      	adds	r1, #20
 8008fdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008fe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008fe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008fe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008fec:	42a5      	cmp	r5, r4
 8008fee:	d003      	beq.n	8008ff8 <__mcmp+0x2c>
 8008ff0:	d305      	bcc.n	8008ffe <__mcmp+0x32>
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	bd30      	pop	{r4, r5, pc}
 8008ff8:	4283      	cmp	r3, r0
 8008ffa:	d3f3      	bcc.n	8008fe4 <__mcmp+0x18>
 8008ffc:	e7fa      	b.n	8008ff4 <__mcmp+0x28>
 8008ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8009002:	e7f7      	b.n	8008ff4 <__mcmp+0x28>

08009004 <__mdiff>:
 8009004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009008:	460c      	mov	r4, r1
 800900a:	4606      	mov	r6, r0
 800900c:	4611      	mov	r1, r2
 800900e:	4620      	mov	r0, r4
 8009010:	4690      	mov	r8, r2
 8009012:	f7ff ffdb 	bl	8008fcc <__mcmp>
 8009016:	1e05      	subs	r5, r0, #0
 8009018:	d110      	bne.n	800903c <__mdiff+0x38>
 800901a:	4629      	mov	r1, r5
 800901c:	4630      	mov	r0, r6
 800901e:	f7ff fd59 	bl	8008ad4 <_Balloc>
 8009022:	b930      	cbnz	r0, 8009032 <__mdiff+0x2e>
 8009024:	4b3a      	ldr	r3, [pc, #232]	; (8009110 <__mdiff+0x10c>)
 8009026:	4602      	mov	r2, r0
 8009028:	f240 2137 	movw	r1, #567	; 0x237
 800902c:	4839      	ldr	r0, [pc, #228]	; (8009114 <__mdiff+0x110>)
 800902e:	f000 fb61 	bl	80096f4 <__assert_func>
 8009032:	2301      	movs	r3, #1
 8009034:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800903c:	bfa4      	itt	ge
 800903e:	4643      	movge	r3, r8
 8009040:	46a0      	movge	r8, r4
 8009042:	4630      	mov	r0, r6
 8009044:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009048:	bfa6      	itte	ge
 800904a:	461c      	movge	r4, r3
 800904c:	2500      	movge	r5, #0
 800904e:	2501      	movlt	r5, #1
 8009050:	f7ff fd40 	bl	8008ad4 <_Balloc>
 8009054:	b920      	cbnz	r0, 8009060 <__mdiff+0x5c>
 8009056:	4b2e      	ldr	r3, [pc, #184]	; (8009110 <__mdiff+0x10c>)
 8009058:	4602      	mov	r2, r0
 800905a:	f240 2145 	movw	r1, #581	; 0x245
 800905e:	e7e5      	b.n	800902c <__mdiff+0x28>
 8009060:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009064:	6926      	ldr	r6, [r4, #16]
 8009066:	60c5      	str	r5, [r0, #12]
 8009068:	f104 0914 	add.w	r9, r4, #20
 800906c:	f108 0514 	add.w	r5, r8, #20
 8009070:	f100 0e14 	add.w	lr, r0, #20
 8009074:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009078:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800907c:	f108 0210 	add.w	r2, r8, #16
 8009080:	46f2      	mov	sl, lr
 8009082:	2100      	movs	r1, #0
 8009084:	f859 3b04 	ldr.w	r3, [r9], #4
 8009088:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800908c:	fa11 f88b 	uxtah	r8, r1, fp
 8009090:	b299      	uxth	r1, r3
 8009092:	0c1b      	lsrs	r3, r3, #16
 8009094:	eba8 0801 	sub.w	r8, r8, r1
 8009098:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800909c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80090a0:	fa1f f888 	uxth.w	r8, r8
 80090a4:	1419      	asrs	r1, r3, #16
 80090a6:	454e      	cmp	r6, r9
 80090a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80090ac:	f84a 3b04 	str.w	r3, [sl], #4
 80090b0:	d8e8      	bhi.n	8009084 <__mdiff+0x80>
 80090b2:	1b33      	subs	r3, r6, r4
 80090b4:	3b15      	subs	r3, #21
 80090b6:	f023 0303 	bic.w	r3, r3, #3
 80090ba:	3304      	adds	r3, #4
 80090bc:	3415      	adds	r4, #21
 80090be:	42a6      	cmp	r6, r4
 80090c0:	bf38      	it	cc
 80090c2:	2304      	movcc	r3, #4
 80090c4:	441d      	add	r5, r3
 80090c6:	4473      	add	r3, lr
 80090c8:	469e      	mov	lr, r3
 80090ca:	462e      	mov	r6, r5
 80090cc:	4566      	cmp	r6, ip
 80090ce:	d30e      	bcc.n	80090ee <__mdiff+0xea>
 80090d0:	f10c 0203 	add.w	r2, ip, #3
 80090d4:	1b52      	subs	r2, r2, r5
 80090d6:	f022 0203 	bic.w	r2, r2, #3
 80090da:	3d03      	subs	r5, #3
 80090dc:	45ac      	cmp	ip, r5
 80090de:	bf38      	it	cc
 80090e0:	2200      	movcc	r2, #0
 80090e2:	4413      	add	r3, r2
 80090e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80090e8:	b17a      	cbz	r2, 800910a <__mdiff+0x106>
 80090ea:	6107      	str	r7, [r0, #16]
 80090ec:	e7a4      	b.n	8009038 <__mdiff+0x34>
 80090ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80090f2:	fa11 f288 	uxtah	r2, r1, r8
 80090f6:	1414      	asrs	r4, r2, #16
 80090f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80090fc:	b292      	uxth	r2, r2
 80090fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009102:	f84e 2b04 	str.w	r2, [lr], #4
 8009106:	1421      	asrs	r1, r4, #16
 8009108:	e7e0      	b.n	80090cc <__mdiff+0xc8>
 800910a:	3f01      	subs	r7, #1
 800910c:	e7ea      	b.n	80090e4 <__mdiff+0xe0>
 800910e:	bf00      	nop
 8009110:	0800ae98 	.word	0x0800ae98
 8009114:	0800aea9 	.word	0x0800aea9

08009118 <__d2b>:
 8009118:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800911c:	460f      	mov	r7, r1
 800911e:	2101      	movs	r1, #1
 8009120:	ec59 8b10 	vmov	r8, r9, d0
 8009124:	4616      	mov	r6, r2
 8009126:	f7ff fcd5 	bl	8008ad4 <_Balloc>
 800912a:	4604      	mov	r4, r0
 800912c:	b930      	cbnz	r0, 800913c <__d2b+0x24>
 800912e:	4602      	mov	r2, r0
 8009130:	4b24      	ldr	r3, [pc, #144]	; (80091c4 <__d2b+0xac>)
 8009132:	4825      	ldr	r0, [pc, #148]	; (80091c8 <__d2b+0xb0>)
 8009134:	f240 310f 	movw	r1, #783	; 0x30f
 8009138:	f000 fadc 	bl	80096f4 <__assert_func>
 800913c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009140:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009144:	bb2d      	cbnz	r5, 8009192 <__d2b+0x7a>
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	f1b8 0300 	subs.w	r3, r8, #0
 800914c:	d026      	beq.n	800919c <__d2b+0x84>
 800914e:	4668      	mov	r0, sp
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	f7ff fd87 	bl	8008c64 <__lo0bits>
 8009156:	e9dd 1200 	ldrd	r1, r2, [sp]
 800915a:	b1e8      	cbz	r0, 8009198 <__d2b+0x80>
 800915c:	f1c0 0320 	rsb	r3, r0, #32
 8009160:	fa02 f303 	lsl.w	r3, r2, r3
 8009164:	430b      	orrs	r3, r1
 8009166:	40c2      	lsrs	r2, r0
 8009168:	6163      	str	r3, [r4, #20]
 800916a:	9201      	str	r2, [sp, #4]
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	61a3      	str	r3, [r4, #24]
 8009170:	2b00      	cmp	r3, #0
 8009172:	bf14      	ite	ne
 8009174:	2202      	movne	r2, #2
 8009176:	2201      	moveq	r2, #1
 8009178:	6122      	str	r2, [r4, #16]
 800917a:	b1bd      	cbz	r5, 80091ac <__d2b+0x94>
 800917c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009180:	4405      	add	r5, r0
 8009182:	603d      	str	r5, [r7, #0]
 8009184:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009188:	6030      	str	r0, [r6, #0]
 800918a:	4620      	mov	r0, r4
 800918c:	b003      	add	sp, #12
 800918e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009196:	e7d6      	b.n	8009146 <__d2b+0x2e>
 8009198:	6161      	str	r1, [r4, #20]
 800919a:	e7e7      	b.n	800916c <__d2b+0x54>
 800919c:	a801      	add	r0, sp, #4
 800919e:	f7ff fd61 	bl	8008c64 <__lo0bits>
 80091a2:	9b01      	ldr	r3, [sp, #4]
 80091a4:	6163      	str	r3, [r4, #20]
 80091a6:	3020      	adds	r0, #32
 80091a8:	2201      	movs	r2, #1
 80091aa:	e7e5      	b.n	8009178 <__d2b+0x60>
 80091ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80091b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80091b4:	6038      	str	r0, [r7, #0]
 80091b6:	6918      	ldr	r0, [r3, #16]
 80091b8:	f7ff fd34 	bl	8008c24 <__hi0bits>
 80091bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80091c0:	e7e2      	b.n	8009188 <__d2b+0x70>
 80091c2:	bf00      	nop
 80091c4:	0800ae98 	.word	0x0800ae98
 80091c8:	0800aea9 	.word	0x0800aea9

080091cc <__sfputc_r>:
 80091cc:	6893      	ldr	r3, [r2, #8]
 80091ce:	3b01      	subs	r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	b410      	push	{r4}
 80091d4:	6093      	str	r3, [r2, #8]
 80091d6:	da08      	bge.n	80091ea <__sfputc_r+0x1e>
 80091d8:	6994      	ldr	r4, [r2, #24]
 80091da:	42a3      	cmp	r3, r4
 80091dc:	db01      	blt.n	80091e2 <__sfputc_r+0x16>
 80091de:	290a      	cmp	r1, #10
 80091e0:	d103      	bne.n	80091ea <__sfputc_r+0x1e>
 80091e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091e6:	f7fe bbe6 	b.w	80079b6 <__swbuf_r>
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	1c58      	adds	r0, r3, #1
 80091ee:	6010      	str	r0, [r2, #0]
 80091f0:	7019      	strb	r1, [r3, #0]
 80091f2:	4608      	mov	r0, r1
 80091f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80091f8:	4770      	bx	lr

080091fa <__sfputs_r>:
 80091fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fc:	4606      	mov	r6, r0
 80091fe:	460f      	mov	r7, r1
 8009200:	4614      	mov	r4, r2
 8009202:	18d5      	adds	r5, r2, r3
 8009204:	42ac      	cmp	r4, r5
 8009206:	d101      	bne.n	800920c <__sfputs_r+0x12>
 8009208:	2000      	movs	r0, #0
 800920a:	e007      	b.n	800921c <__sfputs_r+0x22>
 800920c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009210:	463a      	mov	r2, r7
 8009212:	4630      	mov	r0, r6
 8009214:	f7ff ffda 	bl	80091cc <__sfputc_r>
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	d1f3      	bne.n	8009204 <__sfputs_r+0xa>
 800921c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009220 <_vfiprintf_r>:
 8009220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	460d      	mov	r5, r1
 8009226:	b09d      	sub	sp, #116	; 0x74
 8009228:	4614      	mov	r4, r2
 800922a:	4698      	mov	r8, r3
 800922c:	4606      	mov	r6, r0
 800922e:	b118      	cbz	r0, 8009238 <_vfiprintf_r+0x18>
 8009230:	6a03      	ldr	r3, [r0, #32]
 8009232:	b90b      	cbnz	r3, 8009238 <_vfiprintf_r+0x18>
 8009234:	f7fe fad8 	bl	80077e8 <__sinit>
 8009238:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800923a:	07d9      	lsls	r1, r3, #31
 800923c:	d405      	bmi.n	800924a <_vfiprintf_r+0x2a>
 800923e:	89ab      	ldrh	r3, [r5, #12]
 8009240:	059a      	lsls	r2, r3, #22
 8009242:	d402      	bmi.n	800924a <_vfiprintf_r+0x2a>
 8009244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009246:	f7fe fcc8 	bl	8007bda <__retarget_lock_acquire_recursive>
 800924a:	89ab      	ldrh	r3, [r5, #12]
 800924c:	071b      	lsls	r3, r3, #28
 800924e:	d501      	bpl.n	8009254 <_vfiprintf_r+0x34>
 8009250:	692b      	ldr	r3, [r5, #16]
 8009252:	b99b      	cbnz	r3, 800927c <_vfiprintf_r+0x5c>
 8009254:	4629      	mov	r1, r5
 8009256:	4630      	mov	r0, r6
 8009258:	f7fe fbea 	bl	8007a30 <__swsetup_r>
 800925c:	b170      	cbz	r0, 800927c <_vfiprintf_r+0x5c>
 800925e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009260:	07dc      	lsls	r4, r3, #31
 8009262:	d504      	bpl.n	800926e <_vfiprintf_r+0x4e>
 8009264:	f04f 30ff 	mov.w	r0, #4294967295
 8009268:	b01d      	add	sp, #116	; 0x74
 800926a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926e:	89ab      	ldrh	r3, [r5, #12]
 8009270:	0598      	lsls	r0, r3, #22
 8009272:	d4f7      	bmi.n	8009264 <_vfiprintf_r+0x44>
 8009274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009276:	f7fe fcb1 	bl	8007bdc <__retarget_lock_release_recursive>
 800927a:	e7f3      	b.n	8009264 <_vfiprintf_r+0x44>
 800927c:	2300      	movs	r3, #0
 800927e:	9309      	str	r3, [sp, #36]	; 0x24
 8009280:	2320      	movs	r3, #32
 8009282:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009286:	f8cd 800c 	str.w	r8, [sp, #12]
 800928a:	2330      	movs	r3, #48	; 0x30
 800928c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009440 <_vfiprintf_r+0x220>
 8009290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009294:	f04f 0901 	mov.w	r9, #1
 8009298:	4623      	mov	r3, r4
 800929a:	469a      	mov	sl, r3
 800929c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092a0:	b10a      	cbz	r2, 80092a6 <_vfiprintf_r+0x86>
 80092a2:	2a25      	cmp	r2, #37	; 0x25
 80092a4:	d1f9      	bne.n	800929a <_vfiprintf_r+0x7a>
 80092a6:	ebba 0b04 	subs.w	fp, sl, r4
 80092aa:	d00b      	beq.n	80092c4 <_vfiprintf_r+0xa4>
 80092ac:	465b      	mov	r3, fp
 80092ae:	4622      	mov	r2, r4
 80092b0:	4629      	mov	r1, r5
 80092b2:	4630      	mov	r0, r6
 80092b4:	f7ff ffa1 	bl	80091fa <__sfputs_r>
 80092b8:	3001      	adds	r0, #1
 80092ba:	f000 80a9 	beq.w	8009410 <_vfiprintf_r+0x1f0>
 80092be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80092c0:	445a      	add	r2, fp
 80092c2:	9209      	str	r2, [sp, #36]	; 0x24
 80092c4:	f89a 3000 	ldrb.w	r3, [sl]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 80a1 	beq.w	8009410 <_vfiprintf_r+0x1f0>
 80092ce:	2300      	movs	r3, #0
 80092d0:	f04f 32ff 	mov.w	r2, #4294967295
 80092d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092d8:	f10a 0a01 	add.w	sl, sl, #1
 80092dc:	9304      	str	r3, [sp, #16]
 80092de:	9307      	str	r3, [sp, #28]
 80092e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092e4:	931a      	str	r3, [sp, #104]	; 0x68
 80092e6:	4654      	mov	r4, sl
 80092e8:	2205      	movs	r2, #5
 80092ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ee:	4854      	ldr	r0, [pc, #336]	; (8009440 <_vfiprintf_r+0x220>)
 80092f0:	f7f6 ff6e 	bl	80001d0 <memchr>
 80092f4:	9a04      	ldr	r2, [sp, #16]
 80092f6:	b9d8      	cbnz	r0, 8009330 <_vfiprintf_r+0x110>
 80092f8:	06d1      	lsls	r1, r2, #27
 80092fa:	bf44      	itt	mi
 80092fc:	2320      	movmi	r3, #32
 80092fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009302:	0713      	lsls	r3, r2, #28
 8009304:	bf44      	itt	mi
 8009306:	232b      	movmi	r3, #43	; 0x2b
 8009308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800930c:	f89a 3000 	ldrb.w	r3, [sl]
 8009310:	2b2a      	cmp	r3, #42	; 0x2a
 8009312:	d015      	beq.n	8009340 <_vfiprintf_r+0x120>
 8009314:	9a07      	ldr	r2, [sp, #28]
 8009316:	4654      	mov	r4, sl
 8009318:	2000      	movs	r0, #0
 800931a:	f04f 0c0a 	mov.w	ip, #10
 800931e:	4621      	mov	r1, r4
 8009320:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009324:	3b30      	subs	r3, #48	; 0x30
 8009326:	2b09      	cmp	r3, #9
 8009328:	d94d      	bls.n	80093c6 <_vfiprintf_r+0x1a6>
 800932a:	b1b0      	cbz	r0, 800935a <_vfiprintf_r+0x13a>
 800932c:	9207      	str	r2, [sp, #28]
 800932e:	e014      	b.n	800935a <_vfiprintf_r+0x13a>
 8009330:	eba0 0308 	sub.w	r3, r0, r8
 8009334:	fa09 f303 	lsl.w	r3, r9, r3
 8009338:	4313      	orrs	r3, r2
 800933a:	9304      	str	r3, [sp, #16]
 800933c:	46a2      	mov	sl, r4
 800933e:	e7d2      	b.n	80092e6 <_vfiprintf_r+0xc6>
 8009340:	9b03      	ldr	r3, [sp, #12]
 8009342:	1d19      	adds	r1, r3, #4
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	9103      	str	r1, [sp, #12]
 8009348:	2b00      	cmp	r3, #0
 800934a:	bfbb      	ittet	lt
 800934c:	425b      	neglt	r3, r3
 800934e:	f042 0202 	orrlt.w	r2, r2, #2
 8009352:	9307      	strge	r3, [sp, #28]
 8009354:	9307      	strlt	r3, [sp, #28]
 8009356:	bfb8      	it	lt
 8009358:	9204      	strlt	r2, [sp, #16]
 800935a:	7823      	ldrb	r3, [r4, #0]
 800935c:	2b2e      	cmp	r3, #46	; 0x2e
 800935e:	d10c      	bne.n	800937a <_vfiprintf_r+0x15a>
 8009360:	7863      	ldrb	r3, [r4, #1]
 8009362:	2b2a      	cmp	r3, #42	; 0x2a
 8009364:	d134      	bne.n	80093d0 <_vfiprintf_r+0x1b0>
 8009366:	9b03      	ldr	r3, [sp, #12]
 8009368:	1d1a      	adds	r2, r3, #4
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	9203      	str	r2, [sp, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	bfb8      	it	lt
 8009372:	f04f 33ff 	movlt.w	r3, #4294967295
 8009376:	3402      	adds	r4, #2
 8009378:	9305      	str	r3, [sp, #20]
 800937a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009450 <_vfiprintf_r+0x230>
 800937e:	7821      	ldrb	r1, [r4, #0]
 8009380:	2203      	movs	r2, #3
 8009382:	4650      	mov	r0, sl
 8009384:	f7f6 ff24 	bl	80001d0 <memchr>
 8009388:	b138      	cbz	r0, 800939a <_vfiprintf_r+0x17a>
 800938a:	9b04      	ldr	r3, [sp, #16]
 800938c:	eba0 000a 	sub.w	r0, r0, sl
 8009390:	2240      	movs	r2, #64	; 0x40
 8009392:	4082      	lsls	r2, r0
 8009394:	4313      	orrs	r3, r2
 8009396:	3401      	adds	r4, #1
 8009398:	9304      	str	r3, [sp, #16]
 800939a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800939e:	4829      	ldr	r0, [pc, #164]	; (8009444 <_vfiprintf_r+0x224>)
 80093a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093a4:	2206      	movs	r2, #6
 80093a6:	f7f6 ff13 	bl	80001d0 <memchr>
 80093aa:	2800      	cmp	r0, #0
 80093ac:	d03f      	beq.n	800942e <_vfiprintf_r+0x20e>
 80093ae:	4b26      	ldr	r3, [pc, #152]	; (8009448 <_vfiprintf_r+0x228>)
 80093b0:	bb1b      	cbnz	r3, 80093fa <_vfiprintf_r+0x1da>
 80093b2:	9b03      	ldr	r3, [sp, #12]
 80093b4:	3307      	adds	r3, #7
 80093b6:	f023 0307 	bic.w	r3, r3, #7
 80093ba:	3308      	adds	r3, #8
 80093bc:	9303      	str	r3, [sp, #12]
 80093be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093c0:	443b      	add	r3, r7
 80093c2:	9309      	str	r3, [sp, #36]	; 0x24
 80093c4:	e768      	b.n	8009298 <_vfiprintf_r+0x78>
 80093c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80093ca:	460c      	mov	r4, r1
 80093cc:	2001      	movs	r0, #1
 80093ce:	e7a6      	b.n	800931e <_vfiprintf_r+0xfe>
 80093d0:	2300      	movs	r3, #0
 80093d2:	3401      	adds	r4, #1
 80093d4:	9305      	str	r3, [sp, #20]
 80093d6:	4619      	mov	r1, r3
 80093d8:	f04f 0c0a 	mov.w	ip, #10
 80093dc:	4620      	mov	r0, r4
 80093de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093e2:	3a30      	subs	r2, #48	; 0x30
 80093e4:	2a09      	cmp	r2, #9
 80093e6:	d903      	bls.n	80093f0 <_vfiprintf_r+0x1d0>
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d0c6      	beq.n	800937a <_vfiprintf_r+0x15a>
 80093ec:	9105      	str	r1, [sp, #20]
 80093ee:	e7c4      	b.n	800937a <_vfiprintf_r+0x15a>
 80093f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80093f4:	4604      	mov	r4, r0
 80093f6:	2301      	movs	r3, #1
 80093f8:	e7f0      	b.n	80093dc <_vfiprintf_r+0x1bc>
 80093fa:	ab03      	add	r3, sp, #12
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	462a      	mov	r2, r5
 8009400:	4b12      	ldr	r3, [pc, #72]	; (800944c <_vfiprintf_r+0x22c>)
 8009402:	a904      	add	r1, sp, #16
 8009404:	4630      	mov	r0, r6
 8009406:	f7fd fd9d 	bl	8006f44 <_printf_float>
 800940a:	4607      	mov	r7, r0
 800940c:	1c78      	adds	r0, r7, #1
 800940e:	d1d6      	bne.n	80093be <_vfiprintf_r+0x19e>
 8009410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009412:	07d9      	lsls	r1, r3, #31
 8009414:	d405      	bmi.n	8009422 <_vfiprintf_r+0x202>
 8009416:	89ab      	ldrh	r3, [r5, #12]
 8009418:	059a      	lsls	r2, r3, #22
 800941a:	d402      	bmi.n	8009422 <_vfiprintf_r+0x202>
 800941c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800941e:	f7fe fbdd 	bl	8007bdc <__retarget_lock_release_recursive>
 8009422:	89ab      	ldrh	r3, [r5, #12]
 8009424:	065b      	lsls	r3, r3, #25
 8009426:	f53f af1d 	bmi.w	8009264 <_vfiprintf_r+0x44>
 800942a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800942c:	e71c      	b.n	8009268 <_vfiprintf_r+0x48>
 800942e:	ab03      	add	r3, sp, #12
 8009430:	9300      	str	r3, [sp, #0]
 8009432:	462a      	mov	r2, r5
 8009434:	4b05      	ldr	r3, [pc, #20]	; (800944c <_vfiprintf_r+0x22c>)
 8009436:	a904      	add	r1, sp, #16
 8009438:	4630      	mov	r0, r6
 800943a:	f7fe f827 	bl	800748c <_printf_i>
 800943e:	e7e4      	b.n	800940a <_vfiprintf_r+0x1ea>
 8009440:	0800b004 	.word	0x0800b004
 8009444:	0800b00e 	.word	0x0800b00e
 8009448:	08006f45 	.word	0x08006f45
 800944c:	080091fb 	.word	0x080091fb
 8009450:	0800b00a 	.word	0x0800b00a

08009454 <__sflush_r>:
 8009454:	898a      	ldrh	r2, [r1, #12]
 8009456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800945a:	4605      	mov	r5, r0
 800945c:	0710      	lsls	r0, r2, #28
 800945e:	460c      	mov	r4, r1
 8009460:	d458      	bmi.n	8009514 <__sflush_r+0xc0>
 8009462:	684b      	ldr	r3, [r1, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	dc05      	bgt.n	8009474 <__sflush_r+0x20>
 8009468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800946a:	2b00      	cmp	r3, #0
 800946c:	dc02      	bgt.n	8009474 <__sflush_r+0x20>
 800946e:	2000      	movs	r0, #0
 8009470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009476:	2e00      	cmp	r6, #0
 8009478:	d0f9      	beq.n	800946e <__sflush_r+0x1a>
 800947a:	2300      	movs	r3, #0
 800947c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009480:	682f      	ldr	r7, [r5, #0]
 8009482:	6a21      	ldr	r1, [r4, #32]
 8009484:	602b      	str	r3, [r5, #0]
 8009486:	d032      	beq.n	80094ee <__sflush_r+0x9a>
 8009488:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800948a:	89a3      	ldrh	r3, [r4, #12]
 800948c:	075a      	lsls	r2, r3, #29
 800948e:	d505      	bpl.n	800949c <__sflush_r+0x48>
 8009490:	6863      	ldr	r3, [r4, #4]
 8009492:	1ac0      	subs	r0, r0, r3
 8009494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009496:	b10b      	cbz	r3, 800949c <__sflush_r+0x48>
 8009498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800949a:	1ac0      	subs	r0, r0, r3
 800949c:	2300      	movs	r3, #0
 800949e:	4602      	mov	r2, r0
 80094a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094a2:	6a21      	ldr	r1, [r4, #32]
 80094a4:	4628      	mov	r0, r5
 80094a6:	47b0      	blx	r6
 80094a8:	1c43      	adds	r3, r0, #1
 80094aa:	89a3      	ldrh	r3, [r4, #12]
 80094ac:	d106      	bne.n	80094bc <__sflush_r+0x68>
 80094ae:	6829      	ldr	r1, [r5, #0]
 80094b0:	291d      	cmp	r1, #29
 80094b2:	d82b      	bhi.n	800950c <__sflush_r+0xb8>
 80094b4:	4a29      	ldr	r2, [pc, #164]	; (800955c <__sflush_r+0x108>)
 80094b6:	410a      	asrs	r2, r1
 80094b8:	07d6      	lsls	r6, r2, #31
 80094ba:	d427      	bmi.n	800950c <__sflush_r+0xb8>
 80094bc:	2200      	movs	r2, #0
 80094be:	6062      	str	r2, [r4, #4]
 80094c0:	04d9      	lsls	r1, r3, #19
 80094c2:	6922      	ldr	r2, [r4, #16]
 80094c4:	6022      	str	r2, [r4, #0]
 80094c6:	d504      	bpl.n	80094d2 <__sflush_r+0x7e>
 80094c8:	1c42      	adds	r2, r0, #1
 80094ca:	d101      	bne.n	80094d0 <__sflush_r+0x7c>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	b903      	cbnz	r3, 80094d2 <__sflush_r+0x7e>
 80094d0:	6560      	str	r0, [r4, #84]	; 0x54
 80094d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094d4:	602f      	str	r7, [r5, #0]
 80094d6:	2900      	cmp	r1, #0
 80094d8:	d0c9      	beq.n	800946e <__sflush_r+0x1a>
 80094da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094de:	4299      	cmp	r1, r3
 80094e0:	d002      	beq.n	80094e8 <__sflush_r+0x94>
 80094e2:	4628      	mov	r0, r5
 80094e4:	f7ff f9f6 	bl	80088d4 <_free_r>
 80094e8:	2000      	movs	r0, #0
 80094ea:	6360      	str	r0, [r4, #52]	; 0x34
 80094ec:	e7c0      	b.n	8009470 <__sflush_r+0x1c>
 80094ee:	2301      	movs	r3, #1
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b0      	blx	r6
 80094f4:	1c41      	adds	r1, r0, #1
 80094f6:	d1c8      	bne.n	800948a <__sflush_r+0x36>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d0c5      	beq.n	800948a <__sflush_r+0x36>
 80094fe:	2b1d      	cmp	r3, #29
 8009500:	d001      	beq.n	8009506 <__sflush_r+0xb2>
 8009502:	2b16      	cmp	r3, #22
 8009504:	d101      	bne.n	800950a <__sflush_r+0xb6>
 8009506:	602f      	str	r7, [r5, #0]
 8009508:	e7b1      	b.n	800946e <__sflush_r+0x1a>
 800950a:	89a3      	ldrh	r3, [r4, #12]
 800950c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009510:	81a3      	strh	r3, [r4, #12]
 8009512:	e7ad      	b.n	8009470 <__sflush_r+0x1c>
 8009514:	690f      	ldr	r7, [r1, #16]
 8009516:	2f00      	cmp	r7, #0
 8009518:	d0a9      	beq.n	800946e <__sflush_r+0x1a>
 800951a:	0793      	lsls	r3, r2, #30
 800951c:	680e      	ldr	r6, [r1, #0]
 800951e:	bf08      	it	eq
 8009520:	694b      	ldreq	r3, [r1, #20]
 8009522:	600f      	str	r7, [r1, #0]
 8009524:	bf18      	it	ne
 8009526:	2300      	movne	r3, #0
 8009528:	eba6 0807 	sub.w	r8, r6, r7
 800952c:	608b      	str	r3, [r1, #8]
 800952e:	f1b8 0f00 	cmp.w	r8, #0
 8009532:	dd9c      	ble.n	800946e <__sflush_r+0x1a>
 8009534:	6a21      	ldr	r1, [r4, #32]
 8009536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009538:	4643      	mov	r3, r8
 800953a:	463a      	mov	r2, r7
 800953c:	4628      	mov	r0, r5
 800953e:	47b0      	blx	r6
 8009540:	2800      	cmp	r0, #0
 8009542:	dc06      	bgt.n	8009552 <__sflush_r+0xfe>
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800954a:	81a3      	strh	r3, [r4, #12]
 800954c:	f04f 30ff 	mov.w	r0, #4294967295
 8009550:	e78e      	b.n	8009470 <__sflush_r+0x1c>
 8009552:	4407      	add	r7, r0
 8009554:	eba8 0800 	sub.w	r8, r8, r0
 8009558:	e7e9      	b.n	800952e <__sflush_r+0xda>
 800955a:	bf00      	nop
 800955c:	dfbffffe 	.word	0xdfbffffe

08009560 <_fflush_r>:
 8009560:	b538      	push	{r3, r4, r5, lr}
 8009562:	690b      	ldr	r3, [r1, #16]
 8009564:	4605      	mov	r5, r0
 8009566:	460c      	mov	r4, r1
 8009568:	b913      	cbnz	r3, 8009570 <_fflush_r+0x10>
 800956a:	2500      	movs	r5, #0
 800956c:	4628      	mov	r0, r5
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	b118      	cbz	r0, 800957a <_fflush_r+0x1a>
 8009572:	6a03      	ldr	r3, [r0, #32]
 8009574:	b90b      	cbnz	r3, 800957a <_fflush_r+0x1a>
 8009576:	f7fe f937 	bl	80077e8 <__sinit>
 800957a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d0f3      	beq.n	800956a <_fflush_r+0xa>
 8009582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009584:	07d0      	lsls	r0, r2, #31
 8009586:	d404      	bmi.n	8009592 <_fflush_r+0x32>
 8009588:	0599      	lsls	r1, r3, #22
 800958a:	d402      	bmi.n	8009592 <_fflush_r+0x32>
 800958c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800958e:	f7fe fb24 	bl	8007bda <__retarget_lock_acquire_recursive>
 8009592:	4628      	mov	r0, r5
 8009594:	4621      	mov	r1, r4
 8009596:	f7ff ff5d 	bl	8009454 <__sflush_r>
 800959a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800959c:	07da      	lsls	r2, r3, #31
 800959e:	4605      	mov	r5, r0
 80095a0:	d4e4      	bmi.n	800956c <_fflush_r+0xc>
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	059b      	lsls	r3, r3, #22
 80095a6:	d4e1      	bmi.n	800956c <_fflush_r+0xc>
 80095a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095aa:	f7fe fb17 	bl	8007bdc <__retarget_lock_release_recursive>
 80095ae:	e7dd      	b.n	800956c <_fflush_r+0xc>

080095b0 <__swhatbuf_r>:
 80095b0:	b570      	push	{r4, r5, r6, lr}
 80095b2:	460c      	mov	r4, r1
 80095b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b8:	2900      	cmp	r1, #0
 80095ba:	b096      	sub	sp, #88	; 0x58
 80095bc:	4615      	mov	r5, r2
 80095be:	461e      	mov	r6, r3
 80095c0:	da0d      	bge.n	80095de <__swhatbuf_r+0x2e>
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095c8:	f04f 0100 	mov.w	r1, #0
 80095cc:	bf0c      	ite	eq
 80095ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80095d2:	2340      	movne	r3, #64	; 0x40
 80095d4:	2000      	movs	r0, #0
 80095d6:	6031      	str	r1, [r6, #0]
 80095d8:	602b      	str	r3, [r5, #0]
 80095da:	b016      	add	sp, #88	; 0x58
 80095dc:	bd70      	pop	{r4, r5, r6, pc}
 80095de:	466a      	mov	r2, sp
 80095e0:	f000 f848 	bl	8009674 <_fstat_r>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	dbec      	blt.n	80095c2 <__swhatbuf_r+0x12>
 80095e8:	9901      	ldr	r1, [sp, #4]
 80095ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80095ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80095f2:	4259      	negs	r1, r3
 80095f4:	4159      	adcs	r1, r3
 80095f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095fa:	e7eb      	b.n	80095d4 <__swhatbuf_r+0x24>

080095fc <__smakebuf_r>:
 80095fc:	898b      	ldrh	r3, [r1, #12]
 80095fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009600:	079d      	lsls	r5, r3, #30
 8009602:	4606      	mov	r6, r0
 8009604:	460c      	mov	r4, r1
 8009606:	d507      	bpl.n	8009618 <__smakebuf_r+0x1c>
 8009608:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	6123      	str	r3, [r4, #16]
 8009610:	2301      	movs	r3, #1
 8009612:	6163      	str	r3, [r4, #20]
 8009614:	b002      	add	sp, #8
 8009616:	bd70      	pop	{r4, r5, r6, pc}
 8009618:	ab01      	add	r3, sp, #4
 800961a:	466a      	mov	r2, sp
 800961c:	f7ff ffc8 	bl	80095b0 <__swhatbuf_r>
 8009620:	9900      	ldr	r1, [sp, #0]
 8009622:	4605      	mov	r5, r0
 8009624:	4630      	mov	r0, r6
 8009626:	f7ff f9c9 	bl	80089bc <_malloc_r>
 800962a:	b948      	cbnz	r0, 8009640 <__smakebuf_r+0x44>
 800962c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009630:	059a      	lsls	r2, r3, #22
 8009632:	d4ef      	bmi.n	8009614 <__smakebuf_r+0x18>
 8009634:	f023 0303 	bic.w	r3, r3, #3
 8009638:	f043 0302 	orr.w	r3, r3, #2
 800963c:	81a3      	strh	r3, [r4, #12]
 800963e:	e7e3      	b.n	8009608 <__smakebuf_r+0xc>
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	6020      	str	r0, [r4, #0]
 8009644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009648:	81a3      	strh	r3, [r4, #12]
 800964a:	9b00      	ldr	r3, [sp, #0]
 800964c:	6163      	str	r3, [r4, #20]
 800964e:	9b01      	ldr	r3, [sp, #4]
 8009650:	6120      	str	r0, [r4, #16]
 8009652:	b15b      	cbz	r3, 800966c <__smakebuf_r+0x70>
 8009654:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009658:	4630      	mov	r0, r6
 800965a:	f000 f81d 	bl	8009698 <_isatty_r>
 800965e:	b128      	cbz	r0, 800966c <__smakebuf_r+0x70>
 8009660:	89a3      	ldrh	r3, [r4, #12]
 8009662:	f023 0303 	bic.w	r3, r3, #3
 8009666:	f043 0301 	orr.w	r3, r3, #1
 800966a:	81a3      	strh	r3, [r4, #12]
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	431d      	orrs	r5, r3
 8009670:	81a5      	strh	r5, [r4, #12]
 8009672:	e7cf      	b.n	8009614 <__smakebuf_r+0x18>

08009674 <_fstat_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	4d07      	ldr	r5, [pc, #28]	; (8009694 <_fstat_r+0x20>)
 8009678:	2300      	movs	r3, #0
 800967a:	4604      	mov	r4, r0
 800967c:	4608      	mov	r0, r1
 800967e:	4611      	mov	r1, r2
 8009680:	602b      	str	r3, [r5, #0]
 8009682:	f7f9 fcba 	bl	8002ffa <_fstat>
 8009686:	1c43      	adds	r3, r0, #1
 8009688:	d102      	bne.n	8009690 <_fstat_r+0x1c>
 800968a:	682b      	ldr	r3, [r5, #0]
 800968c:	b103      	cbz	r3, 8009690 <_fstat_r+0x1c>
 800968e:	6023      	str	r3, [r4, #0]
 8009690:	bd38      	pop	{r3, r4, r5, pc}
 8009692:	bf00      	nop
 8009694:	2000049c 	.word	0x2000049c

08009698 <_isatty_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4d06      	ldr	r5, [pc, #24]	; (80096b4 <_isatty_r+0x1c>)
 800969c:	2300      	movs	r3, #0
 800969e:	4604      	mov	r4, r0
 80096a0:	4608      	mov	r0, r1
 80096a2:	602b      	str	r3, [r5, #0]
 80096a4:	f7f9 fcb9 	bl	800301a <_isatty>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d102      	bne.n	80096b2 <_isatty_r+0x1a>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	b103      	cbz	r3, 80096b2 <_isatty_r+0x1a>
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	2000049c 	.word	0x2000049c

080096b8 <_sbrk_r>:
 80096b8:	b538      	push	{r3, r4, r5, lr}
 80096ba:	4d06      	ldr	r5, [pc, #24]	; (80096d4 <_sbrk_r+0x1c>)
 80096bc:	2300      	movs	r3, #0
 80096be:	4604      	mov	r4, r0
 80096c0:	4608      	mov	r0, r1
 80096c2:	602b      	str	r3, [r5, #0]
 80096c4:	f7f9 fcc2 	bl	800304c <_sbrk>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d102      	bne.n	80096d2 <_sbrk_r+0x1a>
 80096cc:	682b      	ldr	r3, [r5, #0]
 80096ce:	b103      	cbz	r3, 80096d2 <_sbrk_r+0x1a>
 80096d0:	6023      	str	r3, [r4, #0]
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	2000049c 	.word	0x2000049c

080096d8 <memcpy>:
 80096d8:	440a      	add	r2, r1
 80096da:	4291      	cmp	r1, r2
 80096dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80096e0:	d100      	bne.n	80096e4 <memcpy+0xc>
 80096e2:	4770      	bx	lr
 80096e4:	b510      	push	{r4, lr}
 80096e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ee:	4291      	cmp	r1, r2
 80096f0:	d1f9      	bne.n	80096e6 <memcpy+0xe>
 80096f2:	bd10      	pop	{r4, pc}

080096f4 <__assert_func>:
 80096f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096f6:	4614      	mov	r4, r2
 80096f8:	461a      	mov	r2, r3
 80096fa:	4b09      	ldr	r3, [pc, #36]	; (8009720 <__assert_func+0x2c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4605      	mov	r5, r0
 8009700:	68d8      	ldr	r0, [r3, #12]
 8009702:	b14c      	cbz	r4, 8009718 <__assert_func+0x24>
 8009704:	4b07      	ldr	r3, [pc, #28]	; (8009724 <__assert_func+0x30>)
 8009706:	9100      	str	r1, [sp, #0]
 8009708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800970c:	4906      	ldr	r1, [pc, #24]	; (8009728 <__assert_func+0x34>)
 800970e:	462b      	mov	r3, r5
 8009710:	f000 f844 	bl	800979c <fiprintf>
 8009714:	f000 f854 	bl	80097c0 <abort>
 8009718:	4b04      	ldr	r3, [pc, #16]	; (800972c <__assert_func+0x38>)
 800971a:	461c      	mov	r4, r3
 800971c:	e7f3      	b.n	8009706 <__assert_func+0x12>
 800971e:	bf00      	nop
 8009720:	20000064 	.word	0x20000064
 8009724:	0800b01f 	.word	0x0800b01f
 8009728:	0800b02c 	.word	0x0800b02c
 800972c:	0800b05a 	.word	0x0800b05a

08009730 <_calloc_r>:
 8009730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009732:	fba1 2402 	umull	r2, r4, r1, r2
 8009736:	b94c      	cbnz	r4, 800974c <_calloc_r+0x1c>
 8009738:	4611      	mov	r1, r2
 800973a:	9201      	str	r2, [sp, #4]
 800973c:	f7ff f93e 	bl	80089bc <_malloc_r>
 8009740:	9a01      	ldr	r2, [sp, #4]
 8009742:	4605      	mov	r5, r0
 8009744:	b930      	cbnz	r0, 8009754 <_calloc_r+0x24>
 8009746:	4628      	mov	r0, r5
 8009748:	b003      	add	sp, #12
 800974a:	bd30      	pop	{r4, r5, pc}
 800974c:	220c      	movs	r2, #12
 800974e:	6002      	str	r2, [r0, #0]
 8009750:	2500      	movs	r5, #0
 8009752:	e7f8      	b.n	8009746 <_calloc_r+0x16>
 8009754:	4621      	mov	r1, r4
 8009756:	f7fe f9c3 	bl	8007ae0 <memset>
 800975a:	e7f4      	b.n	8009746 <_calloc_r+0x16>

0800975c <__ascii_mbtowc>:
 800975c:	b082      	sub	sp, #8
 800975e:	b901      	cbnz	r1, 8009762 <__ascii_mbtowc+0x6>
 8009760:	a901      	add	r1, sp, #4
 8009762:	b142      	cbz	r2, 8009776 <__ascii_mbtowc+0x1a>
 8009764:	b14b      	cbz	r3, 800977a <__ascii_mbtowc+0x1e>
 8009766:	7813      	ldrb	r3, [r2, #0]
 8009768:	600b      	str	r3, [r1, #0]
 800976a:	7812      	ldrb	r2, [r2, #0]
 800976c:	1e10      	subs	r0, r2, #0
 800976e:	bf18      	it	ne
 8009770:	2001      	movne	r0, #1
 8009772:	b002      	add	sp, #8
 8009774:	4770      	bx	lr
 8009776:	4610      	mov	r0, r2
 8009778:	e7fb      	b.n	8009772 <__ascii_mbtowc+0x16>
 800977a:	f06f 0001 	mvn.w	r0, #1
 800977e:	e7f8      	b.n	8009772 <__ascii_mbtowc+0x16>

08009780 <__ascii_wctomb>:
 8009780:	b149      	cbz	r1, 8009796 <__ascii_wctomb+0x16>
 8009782:	2aff      	cmp	r2, #255	; 0xff
 8009784:	bf85      	ittet	hi
 8009786:	238a      	movhi	r3, #138	; 0x8a
 8009788:	6003      	strhi	r3, [r0, #0]
 800978a:	700a      	strbls	r2, [r1, #0]
 800978c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009790:	bf98      	it	ls
 8009792:	2001      	movls	r0, #1
 8009794:	4770      	bx	lr
 8009796:	4608      	mov	r0, r1
 8009798:	4770      	bx	lr
	...

0800979c <fiprintf>:
 800979c:	b40e      	push	{r1, r2, r3}
 800979e:	b503      	push	{r0, r1, lr}
 80097a0:	4601      	mov	r1, r0
 80097a2:	ab03      	add	r3, sp, #12
 80097a4:	4805      	ldr	r0, [pc, #20]	; (80097bc <fiprintf+0x20>)
 80097a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80097aa:	6800      	ldr	r0, [r0, #0]
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	f7ff fd37 	bl	8009220 <_vfiprintf_r>
 80097b2:	b002      	add	sp, #8
 80097b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097b8:	b003      	add	sp, #12
 80097ba:	4770      	bx	lr
 80097bc:	20000064 	.word	0x20000064

080097c0 <abort>:
 80097c0:	b508      	push	{r3, lr}
 80097c2:	2006      	movs	r0, #6
 80097c4:	f000 f82c 	bl	8009820 <raise>
 80097c8:	2001      	movs	r0, #1
 80097ca:	f7f9 fbc7 	bl	8002f5c <_exit>

080097ce <_raise_r>:
 80097ce:	291f      	cmp	r1, #31
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4604      	mov	r4, r0
 80097d4:	460d      	mov	r5, r1
 80097d6:	d904      	bls.n	80097e2 <_raise_r+0x14>
 80097d8:	2316      	movs	r3, #22
 80097da:	6003      	str	r3, [r0, #0]
 80097dc:	f04f 30ff 	mov.w	r0, #4294967295
 80097e0:	bd38      	pop	{r3, r4, r5, pc}
 80097e2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80097e4:	b112      	cbz	r2, 80097ec <_raise_r+0x1e>
 80097e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097ea:	b94b      	cbnz	r3, 8009800 <_raise_r+0x32>
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 f831 	bl	8009854 <_getpid_r>
 80097f2:	462a      	mov	r2, r5
 80097f4:	4601      	mov	r1, r0
 80097f6:	4620      	mov	r0, r4
 80097f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097fc:	f000 b818 	b.w	8009830 <_kill_r>
 8009800:	2b01      	cmp	r3, #1
 8009802:	d00a      	beq.n	800981a <_raise_r+0x4c>
 8009804:	1c59      	adds	r1, r3, #1
 8009806:	d103      	bne.n	8009810 <_raise_r+0x42>
 8009808:	2316      	movs	r3, #22
 800980a:	6003      	str	r3, [r0, #0]
 800980c:	2001      	movs	r0, #1
 800980e:	e7e7      	b.n	80097e0 <_raise_r+0x12>
 8009810:	2400      	movs	r4, #0
 8009812:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009816:	4628      	mov	r0, r5
 8009818:	4798      	blx	r3
 800981a:	2000      	movs	r0, #0
 800981c:	e7e0      	b.n	80097e0 <_raise_r+0x12>
	...

08009820 <raise>:
 8009820:	4b02      	ldr	r3, [pc, #8]	; (800982c <raise+0xc>)
 8009822:	4601      	mov	r1, r0
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	f7ff bfd2 	b.w	80097ce <_raise_r>
 800982a:	bf00      	nop
 800982c:	20000064 	.word	0x20000064

08009830 <_kill_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4d07      	ldr	r5, [pc, #28]	; (8009850 <_kill_r+0x20>)
 8009834:	2300      	movs	r3, #0
 8009836:	4604      	mov	r4, r0
 8009838:	4608      	mov	r0, r1
 800983a:	4611      	mov	r1, r2
 800983c:	602b      	str	r3, [r5, #0]
 800983e:	f7f9 fb7d 	bl	8002f3c <_kill>
 8009842:	1c43      	adds	r3, r0, #1
 8009844:	d102      	bne.n	800984c <_kill_r+0x1c>
 8009846:	682b      	ldr	r3, [r5, #0]
 8009848:	b103      	cbz	r3, 800984c <_kill_r+0x1c>
 800984a:	6023      	str	r3, [r4, #0]
 800984c:	bd38      	pop	{r3, r4, r5, pc}
 800984e:	bf00      	nop
 8009850:	2000049c 	.word	0x2000049c

08009854 <_getpid_r>:
 8009854:	f7f9 bb6a 	b.w	8002f2c <_getpid>

08009858 <pow>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	ed2d 8b02 	vpush	{d8}
 800985e:	eeb0 8a40 	vmov.f32	s16, s0
 8009862:	eef0 8a60 	vmov.f32	s17, s1
 8009866:	ec55 4b11 	vmov	r4, r5, d1
 800986a:	f000 f871 	bl	8009950 <__ieee754_pow>
 800986e:	4622      	mov	r2, r4
 8009870:	462b      	mov	r3, r5
 8009872:	4620      	mov	r0, r4
 8009874:	4629      	mov	r1, r5
 8009876:	ec57 6b10 	vmov	r6, r7, d0
 800987a:	f7f7 f957 	bl	8000b2c <__aeabi_dcmpun>
 800987e:	2800      	cmp	r0, #0
 8009880:	d13b      	bne.n	80098fa <pow+0xa2>
 8009882:	ec51 0b18 	vmov	r0, r1, d8
 8009886:	2200      	movs	r2, #0
 8009888:	2300      	movs	r3, #0
 800988a:	f7f7 f91d 	bl	8000ac8 <__aeabi_dcmpeq>
 800988e:	b1b8      	cbz	r0, 80098c0 <pow+0x68>
 8009890:	2200      	movs	r2, #0
 8009892:	2300      	movs	r3, #0
 8009894:	4620      	mov	r0, r4
 8009896:	4629      	mov	r1, r5
 8009898:	f7f7 f916 	bl	8000ac8 <__aeabi_dcmpeq>
 800989c:	2800      	cmp	r0, #0
 800989e:	d146      	bne.n	800992e <pow+0xd6>
 80098a0:	ec45 4b10 	vmov	d0, r4, r5
 80098a4:	f000 f848 	bl	8009938 <finite>
 80098a8:	b338      	cbz	r0, 80098fa <pow+0xa2>
 80098aa:	2200      	movs	r2, #0
 80098ac:	2300      	movs	r3, #0
 80098ae:	4620      	mov	r0, r4
 80098b0:	4629      	mov	r1, r5
 80098b2:	f7f7 f913 	bl	8000adc <__aeabi_dcmplt>
 80098b6:	b300      	cbz	r0, 80098fa <pow+0xa2>
 80098b8:	f7fe f964 	bl	8007b84 <__errno>
 80098bc:	2322      	movs	r3, #34	; 0x22
 80098be:	e01b      	b.n	80098f8 <pow+0xa0>
 80098c0:	ec47 6b10 	vmov	d0, r6, r7
 80098c4:	f000 f838 	bl	8009938 <finite>
 80098c8:	b9e0      	cbnz	r0, 8009904 <pow+0xac>
 80098ca:	eeb0 0a48 	vmov.f32	s0, s16
 80098ce:	eef0 0a68 	vmov.f32	s1, s17
 80098d2:	f000 f831 	bl	8009938 <finite>
 80098d6:	b1a8      	cbz	r0, 8009904 <pow+0xac>
 80098d8:	ec45 4b10 	vmov	d0, r4, r5
 80098dc:	f000 f82c 	bl	8009938 <finite>
 80098e0:	b180      	cbz	r0, 8009904 <pow+0xac>
 80098e2:	4632      	mov	r2, r6
 80098e4:	463b      	mov	r3, r7
 80098e6:	4630      	mov	r0, r6
 80098e8:	4639      	mov	r1, r7
 80098ea:	f7f7 f91f 	bl	8000b2c <__aeabi_dcmpun>
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d0e2      	beq.n	80098b8 <pow+0x60>
 80098f2:	f7fe f947 	bl	8007b84 <__errno>
 80098f6:	2321      	movs	r3, #33	; 0x21
 80098f8:	6003      	str	r3, [r0, #0]
 80098fa:	ecbd 8b02 	vpop	{d8}
 80098fe:	ec47 6b10 	vmov	d0, r6, r7
 8009902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009904:	2200      	movs	r2, #0
 8009906:	2300      	movs	r3, #0
 8009908:	4630      	mov	r0, r6
 800990a:	4639      	mov	r1, r7
 800990c:	f7f7 f8dc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009910:	2800      	cmp	r0, #0
 8009912:	d0f2      	beq.n	80098fa <pow+0xa2>
 8009914:	eeb0 0a48 	vmov.f32	s0, s16
 8009918:	eef0 0a68 	vmov.f32	s1, s17
 800991c:	f000 f80c 	bl	8009938 <finite>
 8009920:	2800      	cmp	r0, #0
 8009922:	d0ea      	beq.n	80098fa <pow+0xa2>
 8009924:	ec45 4b10 	vmov	d0, r4, r5
 8009928:	f000 f806 	bl	8009938 <finite>
 800992c:	e7c3      	b.n	80098b6 <pow+0x5e>
 800992e:	4f01      	ldr	r7, [pc, #4]	; (8009934 <pow+0xdc>)
 8009930:	2600      	movs	r6, #0
 8009932:	e7e2      	b.n	80098fa <pow+0xa2>
 8009934:	3ff00000 	.word	0x3ff00000

08009938 <finite>:
 8009938:	b082      	sub	sp, #8
 800993a:	ed8d 0b00 	vstr	d0, [sp]
 800993e:	9801      	ldr	r0, [sp, #4]
 8009940:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009944:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009948:	0fc0      	lsrs	r0, r0, #31
 800994a:	b002      	add	sp, #8
 800994c:	4770      	bx	lr
	...

08009950 <__ieee754_pow>:
 8009950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	ed2d 8b06 	vpush	{d8-d10}
 8009958:	b089      	sub	sp, #36	; 0x24
 800995a:	ed8d 1b00 	vstr	d1, [sp]
 800995e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009962:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009966:	ea58 0102 	orrs.w	r1, r8, r2
 800996a:	ec57 6b10 	vmov	r6, r7, d0
 800996e:	d115      	bne.n	800999c <__ieee754_pow+0x4c>
 8009970:	19b3      	adds	r3, r6, r6
 8009972:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009976:	4152      	adcs	r2, r2
 8009978:	4299      	cmp	r1, r3
 800997a:	4b89      	ldr	r3, [pc, #548]	; (8009ba0 <__ieee754_pow+0x250>)
 800997c:	4193      	sbcs	r3, r2
 800997e:	f080 84d1 	bcs.w	800a324 <__ieee754_pow+0x9d4>
 8009982:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009986:	4630      	mov	r0, r6
 8009988:	4639      	mov	r1, r7
 800998a:	f7f6 fc7f 	bl	800028c <__adddf3>
 800998e:	ec41 0b10 	vmov	d0, r0, r1
 8009992:	b009      	add	sp, #36	; 0x24
 8009994:	ecbd 8b06 	vpop	{d8-d10}
 8009998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999c:	4b81      	ldr	r3, [pc, #516]	; (8009ba4 <__ieee754_pow+0x254>)
 800999e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80099a2:	429c      	cmp	r4, r3
 80099a4:	ee10 aa10 	vmov	sl, s0
 80099a8:	463d      	mov	r5, r7
 80099aa:	dc06      	bgt.n	80099ba <__ieee754_pow+0x6a>
 80099ac:	d101      	bne.n	80099b2 <__ieee754_pow+0x62>
 80099ae:	2e00      	cmp	r6, #0
 80099b0:	d1e7      	bne.n	8009982 <__ieee754_pow+0x32>
 80099b2:	4598      	cmp	r8, r3
 80099b4:	dc01      	bgt.n	80099ba <__ieee754_pow+0x6a>
 80099b6:	d10f      	bne.n	80099d8 <__ieee754_pow+0x88>
 80099b8:	b172      	cbz	r2, 80099d8 <__ieee754_pow+0x88>
 80099ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80099be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80099c2:	ea55 050a 	orrs.w	r5, r5, sl
 80099c6:	d1dc      	bne.n	8009982 <__ieee754_pow+0x32>
 80099c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80099cc:	18db      	adds	r3, r3, r3
 80099ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80099d2:	4152      	adcs	r2, r2
 80099d4:	429d      	cmp	r5, r3
 80099d6:	e7d0      	b.n	800997a <__ieee754_pow+0x2a>
 80099d8:	2d00      	cmp	r5, #0
 80099da:	da3b      	bge.n	8009a54 <__ieee754_pow+0x104>
 80099dc:	4b72      	ldr	r3, [pc, #456]	; (8009ba8 <__ieee754_pow+0x258>)
 80099de:	4598      	cmp	r8, r3
 80099e0:	dc51      	bgt.n	8009a86 <__ieee754_pow+0x136>
 80099e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80099e6:	4598      	cmp	r8, r3
 80099e8:	f340 84ab 	ble.w	800a342 <__ieee754_pow+0x9f2>
 80099ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80099f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80099f4:	2b14      	cmp	r3, #20
 80099f6:	dd0f      	ble.n	8009a18 <__ieee754_pow+0xc8>
 80099f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80099fc:	fa22 f103 	lsr.w	r1, r2, r3
 8009a00:	fa01 f303 	lsl.w	r3, r1, r3
 8009a04:	4293      	cmp	r3, r2
 8009a06:	f040 849c 	bne.w	800a342 <__ieee754_pow+0x9f2>
 8009a0a:	f001 0101 	and.w	r1, r1, #1
 8009a0e:	f1c1 0302 	rsb	r3, r1, #2
 8009a12:	9304      	str	r3, [sp, #16]
 8009a14:	b182      	cbz	r2, 8009a38 <__ieee754_pow+0xe8>
 8009a16:	e05f      	b.n	8009ad8 <__ieee754_pow+0x188>
 8009a18:	2a00      	cmp	r2, #0
 8009a1a:	d15b      	bne.n	8009ad4 <__ieee754_pow+0x184>
 8009a1c:	f1c3 0314 	rsb	r3, r3, #20
 8009a20:	fa48 f103 	asr.w	r1, r8, r3
 8009a24:	fa01 f303 	lsl.w	r3, r1, r3
 8009a28:	4543      	cmp	r3, r8
 8009a2a:	f040 8487 	bne.w	800a33c <__ieee754_pow+0x9ec>
 8009a2e:	f001 0101 	and.w	r1, r1, #1
 8009a32:	f1c1 0302 	rsb	r3, r1, #2
 8009a36:	9304      	str	r3, [sp, #16]
 8009a38:	4b5c      	ldr	r3, [pc, #368]	; (8009bac <__ieee754_pow+0x25c>)
 8009a3a:	4598      	cmp	r8, r3
 8009a3c:	d132      	bne.n	8009aa4 <__ieee754_pow+0x154>
 8009a3e:	f1b9 0f00 	cmp.w	r9, #0
 8009a42:	f280 8477 	bge.w	800a334 <__ieee754_pow+0x9e4>
 8009a46:	4959      	ldr	r1, [pc, #356]	; (8009bac <__ieee754_pow+0x25c>)
 8009a48:	4632      	mov	r2, r6
 8009a4a:	463b      	mov	r3, r7
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	f7f6 fefd 	bl	800084c <__aeabi_ddiv>
 8009a52:	e79c      	b.n	800998e <__ieee754_pow+0x3e>
 8009a54:	2300      	movs	r3, #0
 8009a56:	9304      	str	r3, [sp, #16]
 8009a58:	2a00      	cmp	r2, #0
 8009a5a:	d13d      	bne.n	8009ad8 <__ieee754_pow+0x188>
 8009a5c:	4b51      	ldr	r3, [pc, #324]	; (8009ba4 <__ieee754_pow+0x254>)
 8009a5e:	4598      	cmp	r8, r3
 8009a60:	d1ea      	bne.n	8009a38 <__ieee754_pow+0xe8>
 8009a62:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009a66:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009a6a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a6e:	f000 8459 	beq.w	800a324 <__ieee754_pow+0x9d4>
 8009a72:	4b4f      	ldr	r3, [pc, #316]	; (8009bb0 <__ieee754_pow+0x260>)
 8009a74:	429c      	cmp	r4, r3
 8009a76:	dd08      	ble.n	8009a8a <__ieee754_pow+0x13a>
 8009a78:	f1b9 0f00 	cmp.w	r9, #0
 8009a7c:	f2c0 8456 	blt.w	800a32c <__ieee754_pow+0x9dc>
 8009a80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a84:	e783      	b.n	800998e <__ieee754_pow+0x3e>
 8009a86:	2302      	movs	r3, #2
 8009a88:	e7e5      	b.n	8009a56 <__ieee754_pow+0x106>
 8009a8a:	f1b9 0f00 	cmp.w	r9, #0
 8009a8e:	f04f 0000 	mov.w	r0, #0
 8009a92:	f04f 0100 	mov.w	r1, #0
 8009a96:	f6bf af7a 	bge.w	800998e <__ieee754_pow+0x3e>
 8009a9a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009a9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009aa2:	e774      	b.n	800998e <__ieee754_pow+0x3e>
 8009aa4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009aa8:	d106      	bne.n	8009ab8 <__ieee754_pow+0x168>
 8009aaa:	4632      	mov	r2, r6
 8009aac:	463b      	mov	r3, r7
 8009aae:	4630      	mov	r0, r6
 8009ab0:	4639      	mov	r1, r7
 8009ab2:	f7f6 fda1 	bl	80005f8 <__aeabi_dmul>
 8009ab6:	e76a      	b.n	800998e <__ieee754_pow+0x3e>
 8009ab8:	4b3e      	ldr	r3, [pc, #248]	; (8009bb4 <__ieee754_pow+0x264>)
 8009aba:	4599      	cmp	r9, r3
 8009abc:	d10c      	bne.n	8009ad8 <__ieee754_pow+0x188>
 8009abe:	2d00      	cmp	r5, #0
 8009ac0:	db0a      	blt.n	8009ad8 <__ieee754_pow+0x188>
 8009ac2:	ec47 6b10 	vmov	d0, r6, r7
 8009ac6:	b009      	add	sp, #36	; 0x24
 8009ac8:	ecbd 8b06 	vpop	{d8-d10}
 8009acc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad0:	f000 bd20 	b.w	800a514 <__ieee754_sqrt>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	9304      	str	r3, [sp, #16]
 8009ad8:	ec47 6b10 	vmov	d0, r6, r7
 8009adc:	f000 fc62 	bl	800a3a4 <fabs>
 8009ae0:	ec51 0b10 	vmov	r0, r1, d0
 8009ae4:	f1ba 0f00 	cmp.w	sl, #0
 8009ae8:	d129      	bne.n	8009b3e <__ieee754_pow+0x1ee>
 8009aea:	b124      	cbz	r4, 8009af6 <__ieee754_pow+0x1a6>
 8009aec:	4b2f      	ldr	r3, [pc, #188]	; (8009bac <__ieee754_pow+0x25c>)
 8009aee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d123      	bne.n	8009b3e <__ieee754_pow+0x1ee>
 8009af6:	f1b9 0f00 	cmp.w	r9, #0
 8009afa:	da05      	bge.n	8009b08 <__ieee754_pow+0x1b8>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	2000      	movs	r0, #0
 8009b02:	492a      	ldr	r1, [pc, #168]	; (8009bac <__ieee754_pow+0x25c>)
 8009b04:	f7f6 fea2 	bl	800084c <__aeabi_ddiv>
 8009b08:	2d00      	cmp	r5, #0
 8009b0a:	f6bf af40 	bge.w	800998e <__ieee754_pow+0x3e>
 8009b0e:	9b04      	ldr	r3, [sp, #16]
 8009b10:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009b14:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009b18:	431c      	orrs	r4, r3
 8009b1a:	d108      	bne.n	8009b2e <__ieee754_pow+0x1de>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4610      	mov	r0, r2
 8009b22:	4619      	mov	r1, r3
 8009b24:	f7f6 fbb0 	bl	8000288 <__aeabi_dsub>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	e78f      	b.n	8009a4e <__ieee754_pow+0xfe>
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	f47f af2c 	bne.w	800998e <__ieee754_pow+0x3e>
 8009b36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	e727      	b.n	800998e <__ieee754_pow+0x3e>
 8009b3e:	0feb      	lsrs	r3, r5, #31
 8009b40:	3b01      	subs	r3, #1
 8009b42:	9306      	str	r3, [sp, #24]
 8009b44:	9a06      	ldr	r2, [sp, #24]
 8009b46:	9b04      	ldr	r3, [sp, #16]
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	d102      	bne.n	8009b52 <__ieee754_pow+0x202>
 8009b4c:	4632      	mov	r2, r6
 8009b4e:	463b      	mov	r3, r7
 8009b50:	e7e6      	b.n	8009b20 <__ieee754_pow+0x1d0>
 8009b52:	4b19      	ldr	r3, [pc, #100]	; (8009bb8 <__ieee754_pow+0x268>)
 8009b54:	4598      	cmp	r8, r3
 8009b56:	f340 80fb 	ble.w	8009d50 <__ieee754_pow+0x400>
 8009b5a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009b5e:	4598      	cmp	r8, r3
 8009b60:	4b13      	ldr	r3, [pc, #76]	; (8009bb0 <__ieee754_pow+0x260>)
 8009b62:	dd0c      	ble.n	8009b7e <__ieee754_pow+0x22e>
 8009b64:	429c      	cmp	r4, r3
 8009b66:	dc0f      	bgt.n	8009b88 <__ieee754_pow+0x238>
 8009b68:	f1b9 0f00 	cmp.w	r9, #0
 8009b6c:	da0f      	bge.n	8009b8e <__ieee754_pow+0x23e>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	b009      	add	sp, #36	; 0x24
 8009b72:	ecbd 8b06 	vpop	{d8-d10}
 8009b76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7a:	f000 bcc2 	b.w	800a502 <__math_oflow>
 8009b7e:	429c      	cmp	r4, r3
 8009b80:	dbf2      	blt.n	8009b68 <__ieee754_pow+0x218>
 8009b82:	4b0a      	ldr	r3, [pc, #40]	; (8009bac <__ieee754_pow+0x25c>)
 8009b84:	429c      	cmp	r4, r3
 8009b86:	dd19      	ble.n	8009bbc <__ieee754_pow+0x26c>
 8009b88:	f1b9 0f00 	cmp.w	r9, #0
 8009b8c:	dcef      	bgt.n	8009b6e <__ieee754_pow+0x21e>
 8009b8e:	2000      	movs	r0, #0
 8009b90:	b009      	add	sp, #36	; 0x24
 8009b92:	ecbd 8b06 	vpop	{d8-d10}
 8009b96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9a:	f000 bca9 	b.w	800a4f0 <__math_uflow>
 8009b9e:	bf00      	nop
 8009ba0:	fff00000 	.word	0xfff00000
 8009ba4:	7ff00000 	.word	0x7ff00000
 8009ba8:	433fffff 	.word	0x433fffff
 8009bac:	3ff00000 	.word	0x3ff00000
 8009bb0:	3fefffff 	.word	0x3fefffff
 8009bb4:	3fe00000 	.word	0x3fe00000
 8009bb8:	41e00000 	.word	0x41e00000
 8009bbc:	4b60      	ldr	r3, [pc, #384]	; (8009d40 <__ieee754_pow+0x3f0>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f7f6 fb62 	bl	8000288 <__aeabi_dsub>
 8009bc4:	a354      	add	r3, pc, #336	; (adr r3, 8009d18 <__ieee754_pow+0x3c8>)
 8009bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bca:	4604      	mov	r4, r0
 8009bcc:	460d      	mov	r5, r1
 8009bce:	f7f6 fd13 	bl	80005f8 <__aeabi_dmul>
 8009bd2:	a353      	add	r3, pc, #332	; (adr r3, 8009d20 <__ieee754_pow+0x3d0>)
 8009bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd8:	4606      	mov	r6, r0
 8009bda:	460f      	mov	r7, r1
 8009bdc:	4620      	mov	r0, r4
 8009bde:	4629      	mov	r1, r5
 8009be0:	f7f6 fd0a 	bl	80005f8 <__aeabi_dmul>
 8009be4:	4b57      	ldr	r3, [pc, #348]	; (8009d44 <__ieee754_pow+0x3f4>)
 8009be6:	4682      	mov	sl, r0
 8009be8:	468b      	mov	fp, r1
 8009bea:	2200      	movs	r2, #0
 8009bec:	4620      	mov	r0, r4
 8009bee:	4629      	mov	r1, r5
 8009bf0:	f7f6 fd02 	bl	80005f8 <__aeabi_dmul>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	a14b      	add	r1, pc, #300	; (adr r1, 8009d28 <__ieee754_pow+0x3d8>)
 8009bfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bfe:	f7f6 fb43 	bl	8000288 <__aeabi_dsub>
 8009c02:	4622      	mov	r2, r4
 8009c04:	462b      	mov	r3, r5
 8009c06:	f7f6 fcf7 	bl	80005f8 <__aeabi_dmul>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	2000      	movs	r0, #0
 8009c10:	494d      	ldr	r1, [pc, #308]	; (8009d48 <__ieee754_pow+0x3f8>)
 8009c12:	f7f6 fb39 	bl	8000288 <__aeabi_dsub>
 8009c16:	4622      	mov	r2, r4
 8009c18:	4680      	mov	r8, r0
 8009c1a:	4689      	mov	r9, r1
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	4620      	mov	r0, r4
 8009c20:	4629      	mov	r1, r5
 8009c22:	f7f6 fce9 	bl	80005f8 <__aeabi_dmul>
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	4649      	mov	r1, r9
 8009c2e:	f7f6 fce3 	bl	80005f8 <__aeabi_dmul>
 8009c32:	a33f      	add	r3, pc, #252	; (adr r3, 8009d30 <__ieee754_pow+0x3e0>)
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	f7f6 fcde 	bl	80005f8 <__aeabi_dmul>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4650      	mov	r0, sl
 8009c42:	4659      	mov	r1, fp
 8009c44:	f7f6 fb20 	bl	8000288 <__aeabi_dsub>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4680      	mov	r8, r0
 8009c4e:	4689      	mov	r9, r1
 8009c50:	4630      	mov	r0, r6
 8009c52:	4639      	mov	r1, r7
 8009c54:	f7f6 fb1a 	bl	800028c <__adddf3>
 8009c58:	2000      	movs	r0, #0
 8009c5a:	4632      	mov	r2, r6
 8009c5c:	463b      	mov	r3, r7
 8009c5e:	4604      	mov	r4, r0
 8009c60:	460d      	mov	r5, r1
 8009c62:	f7f6 fb11 	bl	8000288 <__aeabi_dsub>
 8009c66:	4602      	mov	r2, r0
 8009c68:	460b      	mov	r3, r1
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	4649      	mov	r1, r9
 8009c6e:	f7f6 fb0b 	bl	8000288 <__aeabi_dsub>
 8009c72:	9b04      	ldr	r3, [sp, #16]
 8009c74:	9a06      	ldr	r2, [sp, #24]
 8009c76:	3b01      	subs	r3, #1
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	4682      	mov	sl, r0
 8009c7c:	468b      	mov	fp, r1
 8009c7e:	f040 81e7 	bne.w	800a050 <__ieee754_pow+0x700>
 8009c82:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009d38 <__ieee754_pow+0x3e8>
 8009c86:	eeb0 8a47 	vmov.f32	s16, s14
 8009c8a:	eef0 8a67 	vmov.f32	s17, s15
 8009c8e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009c92:	2600      	movs	r6, #0
 8009c94:	4632      	mov	r2, r6
 8009c96:	463b      	mov	r3, r7
 8009c98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c9c:	f7f6 faf4 	bl	8000288 <__aeabi_dsub>
 8009ca0:	4622      	mov	r2, r4
 8009ca2:	462b      	mov	r3, r5
 8009ca4:	f7f6 fca8 	bl	80005f8 <__aeabi_dmul>
 8009ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009cac:	4680      	mov	r8, r0
 8009cae:	4689      	mov	r9, r1
 8009cb0:	4650      	mov	r0, sl
 8009cb2:	4659      	mov	r1, fp
 8009cb4:	f7f6 fca0 	bl	80005f8 <__aeabi_dmul>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	4640      	mov	r0, r8
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	f7f6 fae4 	bl	800028c <__adddf3>
 8009cc4:	4632      	mov	r2, r6
 8009cc6:	463b      	mov	r3, r7
 8009cc8:	4680      	mov	r8, r0
 8009cca:	4689      	mov	r9, r1
 8009ccc:	4620      	mov	r0, r4
 8009cce:	4629      	mov	r1, r5
 8009cd0:	f7f6 fc92 	bl	80005f8 <__aeabi_dmul>
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	460d      	mov	r5, r1
 8009cda:	4602      	mov	r2, r0
 8009cdc:	4649      	mov	r1, r9
 8009cde:	4640      	mov	r0, r8
 8009ce0:	f7f6 fad4 	bl	800028c <__adddf3>
 8009ce4:	4b19      	ldr	r3, [pc, #100]	; (8009d4c <__ieee754_pow+0x3fc>)
 8009ce6:	4299      	cmp	r1, r3
 8009ce8:	ec45 4b19 	vmov	d9, r4, r5
 8009cec:	4606      	mov	r6, r0
 8009cee:	460f      	mov	r7, r1
 8009cf0:	468b      	mov	fp, r1
 8009cf2:	f340 82f0 	ble.w	800a2d6 <__ieee754_pow+0x986>
 8009cf6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009cfa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009cfe:	4303      	orrs	r3, r0
 8009d00:	f000 81e4 	beq.w	800a0cc <__ieee754_pow+0x77c>
 8009d04:	ec51 0b18 	vmov	r0, r1, d8
 8009d08:	2200      	movs	r2, #0
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	f7f6 fee6 	bl	8000adc <__aeabi_dcmplt>
 8009d10:	3800      	subs	r0, #0
 8009d12:	bf18      	it	ne
 8009d14:	2001      	movne	r0, #1
 8009d16:	e72b      	b.n	8009b70 <__ieee754_pow+0x220>
 8009d18:	60000000 	.word	0x60000000
 8009d1c:	3ff71547 	.word	0x3ff71547
 8009d20:	f85ddf44 	.word	0xf85ddf44
 8009d24:	3e54ae0b 	.word	0x3e54ae0b
 8009d28:	55555555 	.word	0x55555555
 8009d2c:	3fd55555 	.word	0x3fd55555
 8009d30:	652b82fe 	.word	0x652b82fe
 8009d34:	3ff71547 	.word	0x3ff71547
 8009d38:	00000000 	.word	0x00000000
 8009d3c:	bff00000 	.word	0xbff00000
 8009d40:	3ff00000 	.word	0x3ff00000
 8009d44:	3fd00000 	.word	0x3fd00000
 8009d48:	3fe00000 	.word	0x3fe00000
 8009d4c:	408fffff 	.word	0x408fffff
 8009d50:	4bd5      	ldr	r3, [pc, #852]	; (800a0a8 <__ieee754_pow+0x758>)
 8009d52:	402b      	ands	r3, r5
 8009d54:	2200      	movs	r2, #0
 8009d56:	b92b      	cbnz	r3, 8009d64 <__ieee754_pow+0x414>
 8009d58:	4bd4      	ldr	r3, [pc, #848]	; (800a0ac <__ieee754_pow+0x75c>)
 8009d5a:	f7f6 fc4d 	bl	80005f8 <__aeabi_dmul>
 8009d5e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009d62:	460c      	mov	r4, r1
 8009d64:	1523      	asrs	r3, r4, #20
 8009d66:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009d6a:	4413      	add	r3, r2
 8009d6c:	9305      	str	r3, [sp, #20]
 8009d6e:	4bd0      	ldr	r3, [pc, #832]	; (800a0b0 <__ieee754_pow+0x760>)
 8009d70:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009d74:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009d78:	429c      	cmp	r4, r3
 8009d7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009d7e:	dd08      	ble.n	8009d92 <__ieee754_pow+0x442>
 8009d80:	4bcc      	ldr	r3, [pc, #816]	; (800a0b4 <__ieee754_pow+0x764>)
 8009d82:	429c      	cmp	r4, r3
 8009d84:	f340 8162 	ble.w	800a04c <__ieee754_pow+0x6fc>
 8009d88:	9b05      	ldr	r3, [sp, #20]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	9305      	str	r3, [sp, #20]
 8009d8e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009d92:	2400      	movs	r4, #0
 8009d94:	00e3      	lsls	r3, r4, #3
 8009d96:	9307      	str	r3, [sp, #28]
 8009d98:	4bc7      	ldr	r3, [pc, #796]	; (800a0b8 <__ieee754_pow+0x768>)
 8009d9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d9e:	ed93 7b00 	vldr	d7, [r3]
 8009da2:	4629      	mov	r1, r5
 8009da4:	ec53 2b17 	vmov	r2, r3, d7
 8009da8:	eeb0 9a47 	vmov.f32	s18, s14
 8009dac:	eef0 9a67 	vmov.f32	s19, s15
 8009db0:	4682      	mov	sl, r0
 8009db2:	f7f6 fa69 	bl	8000288 <__aeabi_dsub>
 8009db6:	4652      	mov	r2, sl
 8009db8:	4606      	mov	r6, r0
 8009dba:	460f      	mov	r7, r1
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	ec51 0b19 	vmov	r0, r1, d9
 8009dc2:	f7f6 fa63 	bl	800028c <__adddf3>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	2000      	movs	r0, #0
 8009dcc:	49bb      	ldr	r1, [pc, #748]	; (800a0bc <__ieee754_pow+0x76c>)
 8009dce:	f7f6 fd3d 	bl	800084c <__aeabi_ddiv>
 8009dd2:	ec41 0b1a 	vmov	d10, r0, r1
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4630      	mov	r0, r6
 8009ddc:	4639      	mov	r1, r7
 8009dde:	f7f6 fc0b 	bl	80005f8 <__aeabi_dmul>
 8009de2:	2300      	movs	r3, #0
 8009de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009de8:	9302      	str	r3, [sp, #8]
 8009dea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009dee:	46ab      	mov	fp, r5
 8009df0:	106d      	asrs	r5, r5, #1
 8009df2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009df6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009dfa:	ec41 0b18 	vmov	d8, r0, r1
 8009dfe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009e02:	2200      	movs	r2, #0
 8009e04:	4640      	mov	r0, r8
 8009e06:	4649      	mov	r1, r9
 8009e08:	4614      	mov	r4, r2
 8009e0a:	461d      	mov	r5, r3
 8009e0c:	f7f6 fbf4 	bl	80005f8 <__aeabi_dmul>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4630      	mov	r0, r6
 8009e16:	4639      	mov	r1, r7
 8009e18:	f7f6 fa36 	bl	8000288 <__aeabi_dsub>
 8009e1c:	ec53 2b19 	vmov	r2, r3, d9
 8009e20:	4606      	mov	r6, r0
 8009e22:	460f      	mov	r7, r1
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7f6 fa2e 	bl	8000288 <__aeabi_dsub>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4650      	mov	r0, sl
 8009e32:	4659      	mov	r1, fp
 8009e34:	f7f6 fa28 	bl	8000288 <__aeabi_dsub>
 8009e38:	4642      	mov	r2, r8
 8009e3a:	464b      	mov	r3, r9
 8009e3c:	f7f6 fbdc 	bl	80005f8 <__aeabi_dmul>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4630      	mov	r0, r6
 8009e46:	4639      	mov	r1, r7
 8009e48:	f7f6 fa1e 	bl	8000288 <__aeabi_dsub>
 8009e4c:	ec53 2b1a 	vmov	r2, r3, d10
 8009e50:	f7f6 fbd2 	bl	80005f8 <__aeabi_dmul>
 8009e54:	ec53 2b18 	vmov	r2, r3, d8
 8009e58:	ec41 0b19 	vmov	d9, r0, r1
 8009e5c:	ec51 0b18 	vmov	r0, r1, d8
 8009e60:	f7f6 fbca 	bl	80005f8 <__aeabi_dmul>
 8009e64:	a37c      	add	r3, pc, #496	; (adr r3, 800a058 <__ieee754_pow+0x708>)
 8009e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	460d      	mov	r5, r1
 8009e6e:	f7f6 fbc3 	bl	80005f8 <__aeabi_dmul>
 8009e72:	a37b      	add	r3, pc, #492	; (adr r3, 800a060 <__ieee754_pow+0x710>)
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f7f6 fa08 	bl	800028c <__adddf3>
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	462b      	mov	r3, r5
 8009e80:	f7f6 fbba 	bl	80005f8 <__aeabi_dmul>
 8009e84:	a378      	add	r3, pc, #480	; (adr r3, 800a068 <__ieee754_pow+0x718>)
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	f7f6 f9ff 	bl	800028c <__adddf3>
 8009e8e:	4622      	mov	r2, r4
 8009e90:	462b      	mov	r3, r5
 8009e92:	f7f6 fbb1 	bl	80005f8 <__aeabi_dmul>
 8009e96:	a376      	add	r3, pc, #472	; (adr r3, 800a070 <__ieee754_pow+0x720>)
 8009e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e9c:	f7f6 f9f6 	bl	800028c <__adddf3>
 8009ea0:	4622      	mov	r2, r4
 8009ea2:	462b      	mov	r3, r5
 8009ea4:	f7f6 fba8 	bl	80005f8 <__aeabi_dmul>
 8009ea8:	a373      	add	r3, pc, #460	; (adr r3, 800a078 <__ieee754_pow+0x728>)
 8009eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eae:	f7f6 f9ed 	bl	800028c <__adddf3>
 8009eb2:	4622      	mov	r2, r4
 8009eb4:	462b      	mov	r3, r5
 8009eb6:	f7f6 fb9f 	bl	80005f8 <__aeabi_dmul>
 8009eba:	a371      	add	r3, pc, #452	; (adr r3, 800a080 <__ieee754_pow+0x730>)
 8009ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec0:	f7f6 f9e4 	bl	800028c <__adddf3>
 8009ec4:	4622      	mov	r2, r4
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	460f      	mov	r7, r1
 8009eca:	462b      	mov	r3, r5
 8009ecc:	4620      	mov	r0, r4
 8009ece:	4629      	mov	r1, r5
 8009ed0:	f7f6 fb92 	bl	80005f8 <__aeabi_dmul>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	4630      	mov	r0, r6
 8009eda:	4639      	mov	r1, r7
 8009edc:	f7f6 fb8c 	bl	80005f8 <__aeabi_dmul>
 8009ee0:	4642      	mov	r2, r8
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	460d      	mov	r5, r1
 8009ee6:	464b      	mov	r3, r9
 8009ee8:	ec51 0b18 	vmov	r0, r1, d8
 8009eec:	f7f6 f9ce 	bl	800028c <__adddf3>
 8009ef0:	ec53 2b19 	vmov	r2, r3, d9
 8009ef4:	f7f6 fb80 	bl	80005f8 <__aeabi_dmul>
 8009ef8:	4622      	mov	r2, r4
 8009efa:	462b      	mov	r3, r5
 8009efc:	f7f6 f9c6 	bl	800028c <__adddf3>
 8009f00:	4642      	mov	r2, r8
 8009f02:	4682      	mov	sl, r0
 8009f04:	468b      	mov	fp, r1
 8009f06:	464b      	mov	r3, r9
 8009f08:	4640      	mov	r0, r8
 8009f0a:	4649      	mov	r1, r9
 8009f0c:	f7f6 fb74 	bl	80005f8 <__aeabi_dmul>
 8009f10:	4b6b      	ldr	r3, [pc, #428]	; (800a0c0 <__ieee754_pow+0x770>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	4606      	mov	r6, r0
 8009f16:	460f      	mov	r7, r1
 8009f18:	f7f6 f9b8 	bl	800028c <__adddf3>
 8009f1c:	4652      	mov	r2, sl
 8009f1e:	465b      	mov	r3, fp
 8009f20:	f7f6 f9b4 	bl	800028c <__adddf3>
 8009f24:	2000      	movs	r0, #0
 8009f26:	4604      	mov	r4, r0
 8009f28:	460d      	mov	r5, r1
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	4640      	mov	r0, r8
 8009f30:	4649      	mov	r1, r9
 8009f32:	f7f6 fb61 	bl	80005f8 <__aeabi_dmul>
 8009f36:	4b62      	ldr	r3, [pc, #392]	; (800a0c0 <__ieee754_pow+0x770>)
 8009f38:	4680      	mov	r8, r0
 8009f3a:	4689      	mov	r9, r1
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	4620      	mov	r0, r4
 8009f40:	4629      	mov	r1, r5
 8009f42:	f7f6 f9a1 	bl	8000288 <__aeabi_dsub>
 8009f46:	4632      	mov	r2, r6
 8009f48:	463b      	mov	r3, r7
 8009f4a:	f7f6 f99d 	bl	8000288 <__aeabi_dsub>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	460b      	mov	r3, r1
 8009f52:	4650      	mov	r0, sl
 8009f54:	4659      	mov	r1, fp
 8009f56:	f7f6 f997 	bl	8000288 <__aeabi_dsub>
 8009f5a:	ec53 2b18 	vmov	r2, r3, d8
 8009f5e:	f7f6 fb4b 	bl	80005f8 <__aeabi_dmul>
 8009f62:	4622      	mov	r2, r4
 8009f64:	4606      	mov	r6, r0
 8009f66:	460f      	mov	r7, r1
 8009f68:	462b      	mov	r3, r5
 8009f6a:	ec51 0b19 	vmov	r0, r1, d9
 8009f6e:	f7f6 fb43 	bl	80005f8 <__aeabi_dmul>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4630      	mov	r0, r6
 8009f78:	4639      	mov	r1, r7
 8009f7a:	f7f6 f987 	bl	800028c <__adddf3>
 8009f7e:	4606      	mov	r6, r0
 8009f80:	460f      	mov	r7, r1
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	4640      	mov	r0, r8
 8009f88:	4649      	mov	r1, r9
 8009f8a:	f7f6 f97f 	bl	800028c <__adddf3>
 8009f8e:	a33e      	add	r3, pc, #248	; (adr r3, 800a088 <__ieee754_pow+0x738>)
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	2000      	movs	r0, #0
 8009f96:	4604      	mov	r4, r0
 8009f98:	460d      	mov	r5, r1
 8009f9a:	f7f6 fb2d 	bl	80005f8 <__aeabi_dmul>
 8009f9e:	4642      	mov	r2, r8
 8009fa0:	ec41 0b18 	vmov	d8, r0, r1
 8009fa4:	464b      	mov	r3, r9
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	4629      	mov	r1, r5
 8009faa:	f7f6 f96d 	bl	8000288 <__aeabi_dsub>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	f7f6 f967 	bl	8000288 <__aeabi_dsub>
 8009fba:	a335      	add	r3, pc, #212	; (adr r3, 800a090 <__ieee754_pow+0x740>)
 8009fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc0:	f7f6 fb1a 	bl	80005f8 <__aeabi_dmul>
 8009fc4:	a334      	add	r3, pc, #208	; (adr r3, 800a098 <__ieee754_pow+0x748>)
 8009fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fca:	4606      	mov	r6, r0
 8009fcc:	460f      	mov	r7, r1
 8009fce:	4620      	mov	r0, r4
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	f7f6 fb11 	bl	80005f8 <__aeabi_dmul>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	4630      	mov	r0, r6
 8009fdc:	4639      	mov	r1, r7
 8009fde:	f7f6 f955 	bl	800028c <__adddf3>
 8009fe2:	9a07      	ldr	r2, [sp, #28]
 8009fe4:	4b37      	ldr	r3, [pc, #220]	; (800a0c4 <__ieee754_pow+0x774>)
 8009fe6:	4413      	add	r3, r2
 8009fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fec:	f7f6 f94e 	bl	800028c <__adddf3>
 8009ff0:	4682      	mov	sl, r0
 8009ff2:	9805      	ldr	r0, [sp, #20]
 8009ff4:	468b      	mov	fp, r1
 8009ff6:	f7f6 fa95 	bl	8000524 <__aeabi_i2d>
 8009ffa:	9a07      	ldr	r2, [sp, #28]
 8009ffc:	4b32      	ldr	r3, [pc, #200]	; (800a0c8 <__ieee754_pow+0x778>)
 8009ffe:	4413      	add	r3, r2
 800a000:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a004:	4606      	mov	r6, r0
 800a006:	460f      	mov	r7, r1
 800a008:	4652      	mov	r2, sl
 800a00a:	465b      	mov	r3, fp
 800a00c:	ec51 0b18 	vmov	r0, r1, d8
 800a010:	f7f6 f93c 	bl	800028c <__adddf3>
 800a014:	4642      	mov	r2, r8
 800a016:	464b      	mov	r3, r9
 800a018:	f7f6 f938 	bl	800028c <__adddf3>
 800a01c:	4632      	mov	r2, r6
 800a01e:	463b      	mov	r3, r7
 800a020:	f7f6 f934 	bl	800028c <__adddf3>
 800a024:	2000      	movs	r0, #0
 800a026:	4632      	mov	r2, r6
 800a028:	463b      	mov	r3, r7
 800a02a:	4604      	mov	r4, r0
 800a02c:	460d      	mov	r5, r1
 800a02e:	f7f6 f92b 	bl	8000288 <__aeabi_dsub>
 800a032:	4642      	mov	r2, r8
 800a034:	464b      	mov	r3, r9
 800a036:	f7f6 f927 	bl	8000288 <__aeabi_dsub>
 800a03a:	ec53 2b18 	vmov	r2, r3, d8
 800a03e:	f7f6 f923 	bl	8000288 <__aeabi_dsub>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4650      	mov	r0, sl
 800a048:	4659      	mov	r1, fp
 800a04a:	e610      	b.n	8009c6e <__ieee754_pow+0x31e>
 800a04c:	2401      	movs	r4, #1
 800a04e:	e6a1      	b.n	8009d94 <__ieee754_pow+0x444>
 800a050:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a0a0 <__ieee754_pow+0x750>
 800a054:	e617      	b.n	8009c86 <__ieee754_pow+0x336>
 800a056:	bf00      	nop
 800a058:	4a454eef 	.word	0x4a454eef
 800a05c:	3fca7e28 	.word	0x3fca7e28
 800a060:	93c9db65 	.word	0x93c9db65
 800a064:	3fcd864a 	.word	0x3fcd864a
 800a068:	a91d4101 	.word	0xa91d4101
 800a06c:	3fd17460 	.word	0x3fd17460
 800a070:	518f264d 	.word	0x518f264d
 800a074:	3fd55555 	.word	0x3fd55555
 800a078:	db6fabff 	.word	0xdb6fabff
 800a07c:	3fdb6db6 	.word	0x3fdb6db6
 800a080:	33333303 	.word	0x33333303
 800a084:	3fe33333 	.word	0x3fe33333
 800a088:	e0000000 	.word	0xe0000000
 800a08c:	3feec709 	.word	0x3feec709
 800a090:	dc3a03fd 	.word	0xdc3a03fd
 800a094:	3feec709 	.word	0x3feec709
 800a098:	145b01f5 	.word	0x145b01f5
 800a09c:	be3e2fe0 	.word	0xbe3e2fe0
 800a0a0:	00000000 	.word	0x00000000
 800a0a4:	3ff00000 	.word	0x3ff00000
 800a0a8:	7ff00000 	.word	0x7ff00000
 800a0ac:	43400000 	.word	0x43400000
 800a0b0:	0003988e 	.word	0x0003988e
 800a0b4:	000bb679 	.word	0x000bb679
 800a0b8:	0800b160 	.word	0x0800b160
 800a0bc:	3ff00000 	.word	0x3ff00000
 800a0c0:	40080000 	.word	0x40080000
 800a0c4:	0800b180 	.word	0x0800b180
 800a0c8:	0800b170 	.word	0x0800b170
 800a0cc:	a3b3      	add	r3, pc, #716	; (adr r3, 800a39c <__ieee754_pow+0xa4c>)
 800a0ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d2:	4640      	mov	r0, r8
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	f7f6 f8d9 	bl	800028c <__adddf3>
 800a0da:	4622      	mov	r2, r4
 800a0dc:	ec41 0b1a 	vmov	d10, r0, r1
 800a0e0:	462b      	mov	r3, r5
 800a0e2:	4630      	mov	r0, r6
 800a0e4:	4639      	mov	r1, r7
 800a0e6:	f7f6 f8cf 	bl	8000288 <__aeabi_dsub>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	ec51 0b1a 	vmov	r0, r1, d10
 800a0f2:	f7f6 fd11 	bl	8000b18 <__aeabi_dcmpgt>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	f47f ae04 	bne.w	8009d04 <__ieee754_pow+0x3b4>
 800a0fc:	4aa2      	ldr	r2, [pc, #648]	; (800a388 <__ieee754_pow+0xa38>)
 800a0fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a102:	4293      	cmp	r3, r2
 800a104:	f340 8107 	ble.w	800a316 <__ieee754_pow+0x9c6>
 800a108:	151b      	asrs	r3, r3, #20
 800a10a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a10e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a112:	fa4a fa03 	asr.w	sl, sl, r3
 800a116:	44da      	add	sl, fp
 800a118:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a11c:	489b      	ldr	r0, [pc, #620]	; (800a38c <__ieee754_pow+0xa3c>)
 800a11e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a122:	4108      	asrs	r0, r1
 800a124:	ea00 030a 	and.w	r3, r0, sl
 800a128:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a12c:	f1c1 0114 	rsb	r1, r1, #20
 800a130:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a134:	fa4a fa01 	asr.w	sl, sl, r1
 800a138:	f1bb 0f00 	cmp.w	fp, #0
 800a13c:	f04f 0200 	mov.w	r2, #0
 800a140:	4620      	mov	r0, r4
 800a142:	4629      	mov	r1, r5
 800a144:	bfb8      	it	lt
 800a146:	f1ca 0a00 	rsblt	sl, sl, #0
 800a14a:	f7f6 f89d 	bl	8000288 <__aeabi_dsub>
 800a14e:	ec41 0b19 	vmov	d9, r0, r1
 800a152:	4642      	mov	r2, r8
 800a154:	464b      	mov	r3, r9
 800a156:	ec51 0b19 	vmov	r0, r1, d9
 800a15a:	f7f6 f897 	bl	800028c <__adddf3>
 800a15e:	a37a      	add	r3, pc, #488	; (adr r3, 800a348 <__ieee754_pow+0x9f8>)
 800a160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a164:	2000      	movs	r0, #0
 800a166:	4604      	mov	r4, r0
 800a168:	460d      	mov	r5, r1
 800a16a:	f7f6 fa45 	bl	80005f8 <__aeabi_dmul>
 800a16e:	ec53 2b19 	vmov	r2, r3, d9
 800a172:	4606      	mov	r6, r0
 800a174:	460f      	mov	r7, r1
 800a176:	4620      	mov	r0, r4
 800a178:	4629      	mov	r1, r5
 800a17a:	f7f6 f885 	bl	8000288 <__aeabi_dsub>
 800a17e:	4602      	mov	r2, r0
 800a180:	460b      	mov	r3, r1
 800a182:	4640      	mov	r0, r8
 800a184:	4649      	mov	r1, r9
 800a186:	f7f6 f87f 	bl	8000288 <__aeabi_dsub>
 800a18a:	a371      	add	r3, pc, #452	; (adr r3, 800a350 <__ieee754_pow+0xa00>)
 800a18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a190:	f7f6 fa32 	bl	80005f8 <__aeabi_dmul>
 800a194:	a370      	add	r3, pc, #448	; (adr r3, 800a358 <__ieee754_pow+0xa08>)
 800a196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19a:	4680      	mov	r8, r0
 800a19c:	4689      	mov	r9, r1
 800a19e:	4620      	mov	r0, r4
 800a1a0:	4629      	mov	r1, r5
 800a1a2:	f7f6 fa29 	bl	80005f8 <__aeabi_dmul>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	f7f6 f86d 	bl	800028c <__adddf3>
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	460d      	mov	r5, r1
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	460b      	mov	r3, r1
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	4639      	mov	r1, r7
 800a1be:	f7f6 f865 	bl	800028c <__adddf3>
 800a1c2:	4632      	mov	r2, r6
 800a1c4:	463b      	mov	r3, r7
 800a1c6:	4680      	mov	r8, r0
 800a1c8:	4689      	mov	r9, r1
 800a1ca:	f7f6 f85d 	bl	8000288 <__aeabi_dsub>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	f7f6 f857 	bl	8000288 <__aeabi_dsub>
 800a1da:	4642      	mov	r2, r8
 800a1dc:	4606      	mov	r6, r0
 800a1de:	460f      	mov	r7, r1
 800a1e0:	464b      	mov	r3, r9
 800a1e2:	4640      	mov	r0, r8
 800a1e4:	4649      	mov	r1, r9
 800a1e6:	f7f6 fa07 	bl	80005f8 <__aeabi_dmul>
 800a1ea:	a35d      	add	r3, pc, #372	; (adr r3, 800a360 <__ieee754_pow+0xa10>)
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	f7f6 fa00 	bl	80005f8 <__aeabi_dmul>
 800a1f8:	a35b      	add	r3, pc, #364	; (adr r3, 800a368 <__ieee754_pow+0xa18>)
 800a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fe:	f7f6 f843 	bl	8000288 <__aeabi_dsub>
 800a202:	4622      	mov	r2, r4
 800a204:	462b      	mov	r3, r5
 800a206:	f7f6 f9f7 	bl	80005f8 <__aeabi_dmul>
 800a20a:	a359      	add	r3, pc, #356	; (adr r3, 800a370 <__ieee754_pow+0xa20>)
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	f7f6 f83c 	bl	800028c <__adddf3>
 800a214:	4622      	mov	r2, r4
 800a216:	462b      	mov	r3, r5
 800a218:	f7f6 f9ee 	bl	80005f8 <__aeabi_dmul>
 800a21c:	a356      	add	r3, pc, #344	; (adr r3, 800a378 <__ieee754_pow+0xa28>)
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	f7f6 f831 	bl	8000288 <__aeabi_dsub>
 800a226:	4622      	mov	r2, r4
 800a228:	462b      	mov	r3, r5
 800a22a:	f7f6 f9e5 	bl	80005f8 <__aeabi_dmul>
 800a22e:	a354      	add	r3, pc, #336	; (adr r3, 800a380 <__ieee754_pow+0xa30>)
 800a230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a234:	f7f6 f82a 	bl	800028c <__adddf3>
 800a238:	4622      	mov	r2, r4
 800a23a:	462b      	mov	r3, r5
 800a23c:	f7f6 f9dc 	bl	80005f8 <__aeabi_dmul>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	4640      	mov	r0, r8
 800a246:	4649      	mov	r1, r9
 800a248:	f7f6 f81e 	bl	8000288 <__aeabi_dsub>
 800a24c:	4604      	mov	r4, r0
 800a24e:	460d      	mov	r5, r1
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	4640      	mov	r0, r8
 800a256:	4649      	mov	r1, r9
 800a258:	f7f6 f9ce 	bl	80005f8 <__aeabi_dmul>
 800a25c:	2200      	movs	r2, #0
 800a25e:	ec41 0b19 	vmov	d9, r0, r1
 800a262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a266:	4620      	mov	r0, r4
 800a268:	4629      	mov	r1, r5
 800a26a:	f7f6 f80d 	bl	8000288 <__aeabi_dsub>
 800a26e:	4602      	mov	r2, r0
 800a270:	460b      	mov	r3, r1
 800a272:	ec51 0b19 	vmov	r0, r1, d9
 800a276:	f7f6 fae9 	bl	800084c <__aeabi_ddiv>
 800a27a:	4632      	mov	r2, r6
 800a27c:	4604      	mov	r4, r0
 800a27e:	460d      	mov	r5, r1
 800a280:	463b      	mov	r3, r7
 800a282:	4640      	mov	r0, r8
 800a284:	4649      	mov	r1, r9
 800a286:	f7f6 f9b7 	bl	80005f8 <__aeabi_dmul>
 800a28a:	4632      	mov	r2, r6
 800a28c:	463b      	mov	r3, r7
 800a28e:	f7f5 fffd 	bl	800028c <__adddf3>
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4620      	mov	r0, r4
 800a298:	4629      	mov	r1, r5
 800a29a:	f7f5 fff5 	bl	8000288 <__aeabi_dsub>
 800a29e:	4642      	mov	r2, r8
 800a2a0:	464b      	mov	r3, r9
 800a2a2:	f7f5 fff1 	bl	8000288 <__aeabi_dsub>
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	4939      	ldr	r1, [pc, #228]	; (800a390 <__ieee754_pow+0xa40>)
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	f7f5 ffeb 	bl	8000288 <__aeabi_dsub>
 800a2b2:	ec41 0b10 	vmov	d0, r0, r1
 800a2b6:	ee10 3a90 	vmov	r3, s1
 800a2ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a2be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2c2:	da2b      	bge.n	800a31c <__ieee754_pow+0x9cc>
 800a2c4:	4650      	mov	r0, sl
 800a2c6:	f000 f877 	bl	800a3b8 <scalbn>
 800a2ca:	ec51 0b10 	vmov	r0, r1, d0
 800a2ce:	ec53 2b18 	vmov	r2, r3, d8
 800a2d2:	f7ff bbee 	b.w	8009ab2 <__ieee754_pow+0x162>
 800a2d6:	4b2f      	ldr	r3, [pc, #188]	; (800a394 <__ieee754_pow+0xa44>)
 800a2d8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a2dc:	429e      	cmp	r6, r3
 800a2de:	f77f af0d 	ble.w	800a0fc <__ieee754_pow+0x7ac>
 800a2e2:	4b2d      	ldr	r3, [pc, #180]	; (800a398 <__ieee754_pow+0xa48>)
 800a2e4:	440b      	add	r3, r1
 800a2e6:	4303      	orrs	r3, r0
 800a2e8:	d009      	beq.n	800a2fe <__ieee754_pow+0x9ae>
 800a2ea:	ec51 0b18 	vmov	r0, r1, d8
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f7f6 fbf3 	bl	8000adc <__aeabi_dcmplt>
 800a2f6:	3800      	subs	r0, #0
 800a2f8:	bf18      	it	ne
 800a2fa:	2001      	movne	r0, #1
 800a2fc:	e448      	b.n	8009b90 <__ieee754_pow+0x240>
 800a2fe:	4622      	mov	r2, r4
 800a300:	462b      	mov	r3, r5
 800a302:	f7f5 ffc1 	bl	8000288 <__aeabi_dsub>
 800a306:	4642      	mov	r2, r8
 800a308:	464b      	mov	r3, r9
 800a30a:	f7f6 fbfb 	bl	8000b04 <__aeabi_dcmpge>
 800a30e:	2800      	cmp	r0, #0
 800a310:	f43f aef4 	beq.w	800a0fc <__ieee754_pow+0x7ac>
 800a314:	e7e9      	b.n	800a2ea <__ieee754_pow+0x99a>
 800a316:	f04f 0a00 	mov.w	sl, #0
 800a31a:	e71a      	b.n	800a152 <__ieee754_pow+0x802>
 800a31c:	ec51 0b10 	vmov	r0, r1, d0
 800a320:	4619      	mov	r1, r3
 800a322:	e7d4      	b.n	800a2ce <__ieee754_pow+0x97e>
 800a324:	491a      	ldr	r1, [pc, #104]	; (800a390 <__ieee754_pow+0xa40>)
 800a326:	2000      	movs	r0, #0
 800a328:	f7ff bb31 	b.w	800998e <__ieee754_pow+0x3e>
 800a32c:	2000      	movs	r0, #0
 800a32e:	2100      	movs	r1, #0
 800a330:	f7ff bb2d 	b.w	800998e <__ieee754_pow+0x3e>
 800a334:	4630      	mov	r0, r6
 800a336:	4639      	mov	r1, r7
 800a338:	f7ff bb29 	b.w	800998e <__ieee754_pow+0x3e>
 800a33c:	9204      	str	r2, [sp, #16]
 800a33e:	f7ff bb7b 	b.w	8009a38 <__ieee754_pow+0xe8>
 800a342:	2300      	movs	r3, #0
 800a344:	f7ff bb65 	b.w	8009a12 <__ieee754_pow+0xc2>
 800a348:	00000000 	.word	0x00000000
 800a34c:	3fe62e43 	.word	0x3fe62e43
 800a350:	fefa39ef 	.word	0xfefa39ef
 800a354:	3fe62e42 	.word	0x3fe62e42
 800a358:	0ca86c39 	.word	0x0ca86c39
 800a35c:	be205c61 	.word	0xbe205c61
 800a360:	72bea4d0 	.word	0x72bea4d0
 800a364:	3e663769 	.word	0x3e663769
 800a368:	c5d26bf1 	.word	0xc5d26bf1
 800a36c:	3ebbbd41 	.word	0x3ebbbd41
 800a370:	af25de2c 	.word	0xaf25de2c
 800a374:	3f11566a 	.word	0x3f11566a
 800a378:	16bebd93 	.word	0x16bebd93
 800a37c:	3f66c16c 	.word	0x3f66c16c
 800a380:	5555553e 	.word	0x5555553e
 800a384:	3fc55555 	.word	0x3fc55555
 800a388:	3fe00000 	.word	0x3fe00000
 800a38c:	fff00000 	.word	0xfff00000
 800a390:	3ff00000 	.word	0x3ff00000
 800a394:	4090cbff 	.word	0x4090cbff
 800a398:	3f6f3400 	.word	0x3f6f3400
 800a39c:	652b82fe 	.word	0x652b82fe
 800a3a0:	3c971547 	.word	0x3c971547

0800a3a4 <fabs>:
 800a3a4:	ec51 0b10 	vmov	r0, r1, d0
 800a3a8:	ee10 2a10 	vmov	r2, s0
 800a3ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3b0:	ec43 2b10 	vmov	d0, r2, r3
 800a3b4:	4770      	bx	lr
	...

0800a3b8 <scalbn>:
 800a3b8:	b570      	push	{r4, r5, r6, lr}
 800a3ba:	ec55 4b10 	vmov	r4, r5, d0
 800a3be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	462b      	mov	r3, r5
 800a3c6:	b999      	cbnz	r1, 800a3f0 <scalbn+0x38>
 800a3c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a3cc:	4323      	orrs	r3, r4
 800a3ce:	d03f      	beq.n	800a450 <scalbn+0x98>
 800a3d0:	4b35      	ldr	r3, [pc, #212]	; (800a4a8 <scalbn+0xf0>)
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	ee10 0a10 	vmov	r0, s0
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f7f6 f90d 	bl	80005f8 <__aeabi_dmul>
 800a3de:	4b33      	ldr	r3, [pc, #204]	; (800a4ac <scalbn+0xf4>)
 800a3e0:	429e      	cmp	r6, r3
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	460d      	mov	r5, r1
 800a3e6:	da10      	bge.n	800a40a <scalbn+0x52>
 800a3e8:	a327      	add	r3, pc, #156	; (adr r3, 800a488 <scalbn+0xd0>)
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	e01f      	b.n	800a430 <scalbn+0x78>
 800a3f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a3f4:	4291      	cmp	r1, r2
 800a3f6:	d10c      	bne.n	800a412 <scalbn+0x5a>
 800a3f8:	ee10 2a10 	vmov	r2, s0
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	4629      	mov	r1, r5
 800a400:	f7f5 ff44 	bl	800028c <__adddf3>
 800a404:	4604      	mov	r4, r0
 800a406:	460d      	mov	r5, r1
 800a408:	e022      	b.n	800a450 <scalbn+0x98>
 800a40a:	460b      	mov	r3, r1
 800a40c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a410:	3936      	subs	r1, #54	; 0x36
 800a412:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a416:	4296      	cmp	r6, r2
 800a418:	dd0d      	ble.n	800a436 <scalbn+0x7e>
 800a41a:	2d00      	cmp	r5, #0
 800a41c:	a11c      	add	r1, pc, #112	; (adr r1, 800a490 <scalbn+0xd8>)
 800a41e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a422:	da02      	bge.n	800a42a <scalbn+0x72>
 800a424:	a11c      	add	r1, pc, #112	; (adr r1, 800a498 <scalbn+0xe0>)
 800a426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a42a:	a319      	add	r3, pc, #100	; (adr r3, 800a490 <scalbn+0xd8>)
 800a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a430:	f7f6 f8e2 	bl	80005f8 <__aeabi_dmul>
 800a434:	e7e6      	b.n	800a404 <scalbn+0x4c>
 800a436:	1872      	adds	r2, r6, r1
 800a438:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a43c:	428a      	cmp	r2, r1
 800a43e:	dcec      	bgt.n	800a41a <scalbn+0x62>
 800a440:	2a00      	cmp	r2, #0
 800a442:	dd08      	ble.n	800a456 <scalbn+0x9e>
 800a444:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a448:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a44c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a450:	ec45 4b10 	vmov	d0, r4, r5
 800a454:	bd70      	pop	{r4, r5, r6, pc}
 800a456:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a45a:	da08      	bge.n	800a46e <scalbn+0xb6>
 800a45c:	2d00      	cmp	r5, #0
 800a45e:	a10a      	add	r1, pc, #40	; (adr r1, 800a488 <scalbn+0xd0>)
 800a460:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a464:	dac0      	bge.n	800a3e8 <scalbn+0x30>
 800a466:	a10e      	add	r1, pc, #56	; (adr r1, 800a4a0 <scalbn+0xe8>)
 800a468:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a46c:	e7bc      	b.n	800a3e8 <scalbn+0x30>
 800a46e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a472:	3236      	adds	r2, #54	; 0x36
 800a474:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a478:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a47c:	4620      	mov	r0, r4
 800a47e:	4b0c      	ldr	r3, [pc, #48]	; (800a4b0 <scalbn+0xf8>)
 800a480:	2200      	movs	r2, #0
 800a482:	e7d5      	b.n	800a430 <scalbn+0x78>
 800a484:	f3af 8000 	nop.w
 800a488:	c2f8f359 	.word	0xc2f8f359
 800a48c:	01a56e1f 	.word	0x01a56e1f
 800a490:	8800759c 	.word	0x8800759c
 800a494:	7e37e43c 	.word	0x7e37e43c
 800a498:	8800759c 	.word	0x8800759c
 800a49c:	fe37e43c 	.word	0xfe37e43c
 800a4a0:	c2f8f359 	.word	0xc2f8f359
 800a4a4:	81a56e1f 	.word	0x81a56e1f
 800a4a8:	43500000 	.word	0x43500000
 800a4ac:	ffff3cb0 	.word	0xffff3cb0
 800a4b0:	3c900000 	.word	0x3c900000

0800a4b4 <with_errno>:
 800a4b4:	b570      	push	{r4, r5, r6, lr}
 800a4b6:	4604      	mov	r4, r0
 800a4b8:	460d      	mov	r5, r1
 800a4ba:	4616      	mov	r6, r2
 800a4bc:	f7fd fb62 	bl	8007b84 <__errno>
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	6006      	str	r6, [r0, #0]
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	bd70      	pop	{r4, r5, r6, pc}

0800a4c8 <xflow>:
 800a4c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4ca:	4614      	mov	r4, r2
 800a4cc:	461d      	mov	r5, r3
 800a4ce:	b108      	cbz	r0, 800a4d4 <xflow+0xc>
 800a4d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a4d4:	e9cd 2300 	strd	r2, r3, [sp]
 800a4d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4dc:	4620      	mov	r0, r4
 800a4de:	4629      	mov	r1, r5
 800a4e0:	f7f6 f88a 	bl	80005f8 <__aeabi_dmul>
 800a4e4:	2222      	movs	r2, #34	; 0x22
 800a4e6:	b003      	add	sp, #12
 800a4e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4ec:	f7ff bfe2 	b.w	800a4b4 <with_errno>

0800a4f0 <__math_uflow>:
 800a4f0:	b508      	push	{r3, lr}
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a4f8:	f7ff ffe6 	bl	800a4c8 <xflow>
 800a4fc:	ec41 0b10 	vmov	d0, r0, r1
 800a500:	bd08      	pop	{r3, pc}

0800a502 <__math_oflow>:
 800a502:	b508      	push	{r3, lr}
 800a504:	2200      	movs	r2, #0
 800a506:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a50a:	f7ff ffdd 	bl	800a4c8 <xflow>
 800a50e:	ec41 0b10 	vmov	d0, r0, r1
 800a512:	bd08      	pop	{r3, pc}

0800a514 <__ieee754_sqrt>:
 800a514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a518:	ec55 4b10 	vmov	r4, r5, d0
 800a51c:	4e67      	ldr	r6, [pc, #412]	; (800a6bc <__ieee754_sqrt+0x1a8>)
 800a51e:	43ae      	bics	r6, r5
 800a520:	ee10 0a10 	vmov	r0, s0
 800a524:	ee10 2a10 	vmov	r2, s0
 800a528:	4629      	mov	r1, r5
 800a52a:	462b      	mov	r3, r5
 800a52c:	d10d      	bne.n	800a54a <__ieee754_sqrt+0x36>
 800a52e:	f7f6 f863 	bl	80005f8 <__aeabi_dmul>
 800a532:	4602      	mov	r2, r0
 800a534:	460b      	mov	r3, r1
 800a536:	4620      	mov	r0, r4
 800a538:	4629      	mov	r1, r5
 800a53a:	f7f5 fea7 	bl	800028c <__adddf3>
 800a53e:	4604      	mov	r4, r0
 800a540:	460d      	mov	r5, r1
 800a542:	ec45 4b10 	vmov	d0, r4, r5
 800a546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a54a:	2d00      	cmp	r5, #0
 800a54c:	dc0b      	bgt.n	800a566 <__ieee754_sqrt+0x52>
 800a54e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a552:	4326      	orrs	r6, r4
 800a554:	d0f5      	beq.n	800a542 <__ieee754_sqrt+0x2e>
 800a556:	b135      	cbz	r5, 800a566 <__ieee754_sqrt+0x52>
 800a558:	f7f5 fe96 	bl	8000288 <__aeabi_dsub>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	f7f6 f974 	bl	800084c <__aeabi_ddiv>
 800a564:	e7eb      	b.n	800a53e <__ieee754_sqrt+0x2a>
 800a566:	1509      	asrs	r1, r1, #20
 800a568:	f000 808d 	beq.w	800a686 <__ieee754_sqrt+0x172>
 800a56c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a570:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a578:	07c9      	lsls	r1, r1, #31
 800a57a:	bf5c      	itt	pl
 800a57c:	005b      	lslpl	r3, r3, #1
 800a57e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a582:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a586:	bf58      	it	pl
 800a588:	0052      	lslpl	r2, r2, #1
 800a58a:	2500      	movs	r5, #0
 800a58c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a590:	1076      	asrs	r6, r6, #1
 800a592:	0052      	lsls	r2, r2, #1
 800a594:	f04f 0e16 	mov.w	lr, #22
 800a598:	46ac      	mov	ip, r5
 800a59a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a59e:	eb0c 0001 	add.w	r0, ip, r1
 800a5a2:	4298      	cmp	r0, r3
 800a5a4:	bfde      	ittt	le
 800a5a6:	1a1b      	suble	r3, r3, r0
 800a5a8:	eb00 0c01 	addle.w	ip, r0, r1
 800a5ac:	186d      	addle	r5, r5, r1
 800a5ae:	005b      	lsls	r3, r3, #1
 800a5b0:	f1be 0e01 	subs.w	lr, lr, #1
 800a5b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a5b8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a5bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a5c0:	d1ed      	bne.n	800a59e <__ieee754_sqrt+0x8a>
 800a5c2:	4674      	mov	r4, lr
 800a5c4:	2720      	movs	r7, #32
 800a5c6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a5ca:	4563      	cmp	r3, ip
 800a5cc:	eb01 000e 	add.w	r0, r1, lr
 800a5d0:	dc02      	bgt.n	800a5d8 <__ieee754_sqrt+0xc4>
 800a5d2:	d113      	bne.n	800a5fc <__ieee754_sqrt+0xe8>
 800a5d4:	4290      	cmp	r0, r2
 800a5d6:	d811      	bhi.n	800a5fc <__ieee754_sqrt+0xe8>
 800a5d8:	2800      	cmp	r0, #0
 800a5da:	eb00 0e01 	add.w	lr, r0, r1
 800a5de:	da57      	bge.n	800a690 <__ieee754_sqrt+0x17c>
 800a5e0:	f1be 0f00 	cmp.w	lr, #0
 800a5e4:	db54      	blt.n	800a690 <__ieee754_sqrt+0x17c>
 800a5e6:	f10c 0801 	add.w	r8, ip, #1
 800a5ea:	eba3 030c 	sub.w	r3, r3, ip
 800a5ee:	4290      	cmp	r0, r2
 800a5f0:	bf88      	it	hi
 800a5f2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a5f6:	1a12      	subs	r2, r2, r0
 800a5f8:	440c      	add	r4, r1
 800a5fa:	46c4      	mov	ip, r8
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	3f01      	subs	r7, #1
 800a600:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a604:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a608:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a60c:	d1dd      	bne.n	800a5ca <__ieee754_sqrt+0xb6>
 800a60e:	4313      	orrs	r3, r2
 800a610:	d01b      	beq.n	800a64a <__ieee754_sqrt+0x136>
 800a612:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800a6c0 <__ieee754_sqrt+0x1ac>
 800a616:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800a6c4 <__ieee754_sqrt+0x1b0>
 800a61a:	e9da 0100 	ldrd	r0, r1, [sl]
 800a61e:	e9db 2300 	ldrd	r2, r3, [fp]
 800a622:	f7f5 fe31 	bl	8000288 <__aeabi_dsub>
 800a626:	e9da 8900 	ldrd	r8, r9, [sl]
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	4640      	mov	r0, r8
 800a630:	4649      	mov	r1, r9
 800a632:	f7f6 fa5d 	bl	8000af0 <__aeabi_dcmple>
 800a636:	b140      	cbz	r0, 800a64a <__ieee754_sqrt+0x136>
 800a638:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a63c:	e9da 0100 	ldrd	r0, r1, [sl]
 800a640:	e9db 2300 	ldrd	r2, r3, [fp]
 800a644:	d126      	bne.n	800a694 <__ieee754_sqrt+0x180>
 800a646:	3501      	adds	r5, #1
 800a648:	463c      	mov	r4, r7
 800a64a:	106a      	asrs	r2, r5, #1
 800a64c:	0863      	lsrs	r3, r4, #1
 800a64e:	07e9      	lsls	r1, r5, #31
 800a650:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a654:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a658:	bf48      	it	mi
 800a65a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a65e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800a662:	461c      	mov	r4, r3
 800a664:	e76d      	b.n	800a542 <__ieee754_sqrt+0x2e>
 800a666:	0ad3      	lsrs	r3, r2, #11
 800a668:	3815      	subs	r0, #21
 800a66a:	0552      	lsls	r2, r2, #21
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d0fa      	beq.n	800a666 <__ieee754_sqrt+0x152>
 800a670:	02dc      	lsls	r4, r3, #11
 800a672:	d50a      	bpl.n	800a68a <__ieee754_sqrt+0x176>
 800a674:	f1c1 0420 	rsb	r4, r1, #32
 800a678:	fa22 f404 	lsr.w	r4, r2, r4
 800a67c:	1e4d      	subs	r5, r1, #1
 800a67e:	408a      	lsls	r2, r1
 800a680:	4323      	orrs	r3, r4
 800a682:	1b41      	subs	r1, r0, r5
 800a684:	e772      	b.n	800a56c <__ieee754_sqrt+0x58>
 800a686:	4608      	mov	r0, r1
 800a688:	e7f0      	b.n	800a66c <__ieee754_sqrt+0x158>
 800a68a:	005b      	lsls	r3, r3, #1
 800a68c:	3101      	adds	r1, #1
 800a68e:	e7ef      	b.n	800a670 <__ieee754_sqrt+0x15c>
 800a690:	46e0      	mov	r8, ip
 800a692:	e7aa      	b.n	800a5ea <__ieee754_sqrt+0xd6>
 800a694:	f7f5 fdfa 	bl	800028c <__adddf3>
 800a698:	e9da 8900 	ldrd	r8, r9, [sl]
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4640      	mov	r0, r8
 800a6a2:	4649      	mov	r1, r9
 800a6a4:	f7f6 fa1a 	bl	8000adc <__aeabi_dcmplt>
 800a6a8:	b120      	cbz	r0, 800a6b4 <__ieee754_sqrt+0x1a0>
 800a6aa:	1ca0      	adds	r0, r4, #2
 800a6ac:	bf08      	it	eq
 800a6ae:	3501      	addeq	r5, #1
 800a6b0:	3402      	adds	r4, #2
 800a6b2:	e7ca      	b.n	800a64a <__ieee754_sqrt+0x136>
 800a6b4:	3401      	adds	r4, #1
 800a6b6:	f024 0401 	bic.w	r4, r4, #1
 800a6ba:	e7c6      	b.n	800a64a <__ieee754_sqrt+0x136>
 800a6bc:	7ff00000 	.word	0x7ff00000
 800a6c0:	200001d8 	.word	0x200001d8
 800a6c4:	200001e0 	.word	0x200001e0

0800a6c8 <_init>:
 800a6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ca:	bf00      	nop
 800a6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ce:	bc08      	pop	{r3}
 800a6d0:	469e      	mov	lr, r3
 800a6d2:	4770      	bx	lr

0800a6d4 <_fini>:
 800a6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d6:	bf00      	nop
 800a6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6da:	bc08      	pop	{r3}
 800a6dc:	469e      	mov	lr, r3
 800a6de:	4770      	bx	lr
